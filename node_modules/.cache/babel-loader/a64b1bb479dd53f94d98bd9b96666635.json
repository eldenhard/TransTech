{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'MultiSelectUni',\n  props: {\n    variantTitle: {\n      type: String,\n      required: true\n    },\n    placeholder: {\n      type: String,\n      default: 'Выберите...'\n    },\n    selected: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    variants: {\n      type: [Array, Object],\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      show: false,\n      checked: null\n    };\n  },\n\n  methods: {\n    checkSelected(id) {\n      return this.selected.includes(id);\n    },\n\n    change(v) {\n      if (this.selected.includes(v.id)) {\n        this.selected.splice(this.selected.indexOf(v.id), 1);\n      } else {\n        this.selected.push(v.id);\n      }\n\n      this.update();\n    },\n\n    update() {\n      this.$emit('change', this.selected);\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAyEA;EACAA,sBADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAG;IAFA,CALA;IASAC;MACAJ,WADA;MAEAG;QAAA;MAAA;IAFA,CATA;IAaAE;MACAL,qBADA;MAEAC;IAFA;EAbA,CAFA;;EAsBAK;IACA;MACAC,WADA;MAEAC;IAFA;EAIA,CA3BA;;EA4BAC;IACAC;MACA;IAEA,CAJA;;IAKAC;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;;MACA;IACA,CAZA;;IAaAC;MACA;IACA;;EAfA;AA5BA","names":["name","props","variantTitle","type","required","placeholder","default","selected","variants","data","show","checked","methods","checkSelected","change","update"],"sourceRoot":"src/components/ui","sources":["MultiSelectUni.vue"],"sourcesContent":["<template>\r\n    \r\n    <div class=\"multipleSelection\">\r\n        <div class=\"selectBox\" \r\n            @click=\"show=!show\">\r\n            <select style=\"font-weight: 400 !important; text-align: center; width: 25%;\">\r\n                <option>{{placeholder}}</option>\r\n            </select>\r\n            <div class=\"overSelect\"></div>\r\n        </div>\r\n\r\n        <div id=\"checkBoxes\" v-if=\"show\">\r\n            <label :for=\"'v'+v.id\" v-for=\"v in variants\" :key=\"v.id\">\r\n                <input type=\"checkbox\" :id=\"'v'+v.id\" @change=\"change(v)\" :checked=\"checkSelected(v.id)\"/> \r\n                {{v[variantTitle]}}\r\n            </label>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<style>\r\n.multipleSelection {\r\n        width: 90% !important;\r\n        position: relative;\r\n        left: 50%;\r\n        transform: translate(-50%,0);\r\n        z-index: 0 !important;\r\n    }\r\n\r\n    .selectBox {\r\n        position: relative;\r\n        z-index: 0 !important;\r\n\r\n    }\r\n\r\n    .selectBox select {\r\n        width: 100%;\r\n        font-weight: bold;\r\n        bottom: 0;\r\n        z-index: 0 !important;\r\n    }\r\n\r\n    .overSelect {\r\n        position: absolute;\r\n        left: 0;\r\n        right: 0;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: 0 !important;\r\n    }\r\n\r\n    #checkBoxes {\r\n        height: 150px;\r\n        overflow-y: auto;\r\n        z-index: 0 !important;\r\n    }\r\n\r\n    #checkBoxes label {\r\n        display: block;\r\n        text-align: left;\r\n        font-size: 11px;\r\n        font-weight: 500;\r\n        z-index: 0 !important;\r\n    }\r\n    #checkBoxes input {\r\n        text-align: left;\r\n        z-index: 0 !important;\r\n    }\r\n</style>\r\n\r\n<script>\r\n\r\nexport default {\r\nname: 'MultiSelectUni',\r\nprops: {\r\n    variantTitle: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    placeholder: {\r\n        type: String,\r\n        default: 'Выберите...'\r\n    },\r\n    selected : {\r\n        type: Array,\r\n        default: () => {return []}\r\n    },\r\n    variants: {\r\n        type: [Array, Object],\r\n        required : true\r\n    },\r\n\r\n    \r\n},\r\ndata(){\r\n    return {\r\n        show: false,\r\n        checked: null,\r\n    }\r\n},\r\nmethods:{\r\n    checkSelected(id){\r\n        return this.selected.includes(id)\r\n        \r\n    },\r\n    change(v){\r\n        if(this.selected.includes(v.id)){\r\n            this.selected.splice(this.selected.indexOf(v.id), 1)\r\n        }else{\r\n            this.selected.push(v.id)\r\n        }\r\n        this.update()\r\n    },\r\n    update(){\r\n        this.$emit('change', this.selected)\r\n    },\r\n}\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}