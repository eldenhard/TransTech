{"ast":null,"code":"import api from \"@/api/auth\";\nimport { setItem } from \"@/helpers/persistanseStorage\";\nconst resource = api.resource;\nconst state = {\n  user: {},\n  uid: null,\n  isLoggedIn: false\n};\nexport const mutationTypes = {\n  loginStart: `[${resource}] loginStart`,\n  loginSuccess: `[${resource}] loginSuccess`,\n  loginFailure: `[${resource}] loginFailure`,\n  // у нас форма авторизации показываетс когда isLoggedIn = false. Когда авторизация успешна - там тру. Нам нужен отдельный обработчик чтобы сделать логаут\n  logout: `[${resource}] logout`\n};\nexport const actionTypes = {\n  login: `${resource} login`,\n  logout: `${resource} logout`\n};\nconst mutations = {\n  [mutationTypes.loginSuccess](state, user) {\n    state.user = user;\n    state.uid = user.user.id;\n    state.isLoggedIn = true;\n    setItem('accessToken', user.token);\n  },\n\n  [mutationTypes.logout](state) {\n    state.user = {};\n    state.uid = null;\n    state.isLoggedIn = false;\n    setItem('accessToken', '');\n  }\n\n};\nconst actions = {\n  async [actionTypes.login](context, data) {\n    return new Promise(resolve => {\n      api.login(data).then(response => {\n        context.commit(mutationTypes.loginSuccess, response.data);\n        resolve(response.data);\n      }).catch(error => {\n        setItem('accessToken', '');\n        resolve(error);\n      });\n    });\n  },\n\n  async\n};\nexport default {\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["api","setItem","resource","state","user","uid","isLoggedIn","mutationTypes","loginStart","loginSuccess","loginFailure","logout","actionTypes","login","mutations","id","token","actions","context","data","Promise","resolve","then","response","commit","catch","error","async"],"sources":["C:/Users/Asus/Desktop/VueTTRe/project/src/store/modules/auth.js"],"sourcesContent":["import api from \"@/api/auth\"\r\nimport {setItem} from \"@/helpers/persistanseStorage\"\r\n\r\nconst resource = api.resource\r\n\r\nconst state = {\r\n    user: {},\r\n    uid: null,\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const mutationTypes = {\r\n    loginStart: `[${resource}] loginStart`,\r\n    loginSuccess: `[${resource}] loginSuccess`,\r\n    loginFailure: `[${resource}] loginFailure`,\r\n    // у нас форма авторизации показываетс когда isLoggedIn = false. Когда авторизация успешна - там тру. Нам нужен отдельный обработчик чтобы сделать логаут\r\n    logout: `[${resource}] logout`\r\n}\r\n\r\nexport const actionTypes = {\r\n    login: `${resource} login`,\r\n    logout: `${resource} logout`,\r\n}\r\n\r\nconst mutations = {\r\n    [mutationTypes.loginSuccess](state, user) {\r\n        state.user = user\r\n        state.uid = user.user.id\r\n        state.isLoggedIn = true\r\n        setItem('accessToken', user.token)\r\n      },\r\n      [mutationTypes.logout](state){\r\n        state.user = {}\r\n        state.uid = null\r\n        state.isLoggedIn = false\r\n        setItem('accessToken', '')\r\n      }\r\n}\r\n\r\nconst actions = {\r\n    async [actionTypes.login](context, data){\r\n        return new Promise(resolve => {\r\n            api.login(data).then(response => {\r\n                context.commit(mutationTypes.loginSuccess, response.data)\r\n                resolve(response.data)\r\n            }).catch(error => {\r\n                setItem('accessToken', '')\r\n                resolve(error)\r\n            })\r\n            \r\n        })\r\n    },\r\n    async \r\n}\r\n\r\nexport default \r\n{\r\n    state,\r\n    mutations,\r\n    actions\r\n}"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAAQC,OAAR,QAAsB,8BAAtB;AAEA,MAAMC,QAAQ,GAAGF,GAAG,CAACE,QAArB;AAEA,MAAMC,KAAK,GAAG;EACVC,IAAI,EAAE,EADI;EAEVC,GAAG,EAAE,IAFK;EAGVC,UAAU,EAAE;AAHF,CAAd;AAMA,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAG,IAAGN,QAAS,cADA;EAEzBO,YAAY,EAAG,IAAGP,QAAS,gBAFF;EAGzBQ,YAAY,EAAG,IAAGR,QAAS,gBAHF;EAIzB;EACAS,MAAM,EAAG,IAAGT,QAAS;AALI,CAAtB;AAQP,OAAO,MAAMU,WAAW,GAAG;EACvBC,KAAK,EAAG,GAAEX,QAAS,QADI;EAEvBS,MAAM,EAAG,GAAET,QAAS;AAFG,CAApB;AAKP,MAAMY,SAAS,GAAG;EACd,CAACP,aAAa,CAACE,YAAf,EAA6BN,KAA7B,EAAoCC,IAApC,EAA0C;IACtCD,KAAK,CAACC,IAAN,GAAaA,IAAb;IACAD,KAAK,CAACE,GAAN,GAAYD,IAAI,CAACA,IAAL,CAAUW,EAAtB;IACAZ,KAAK,CAACG,UAAN,GAAmB,IAAnB;IACAL,OAAO,CAAC,aAAD,EAAgBG,IAAI,CAACY,KAArB,CAAP;EACD,CANW;;EAOZ,CAACT,aAAa,CAACI,MAAf,EAAuBR,KAAvB,EAA6B;IAC3BA,KAAK,CAACC,IAAN,GAAa,EAAb;IACAD,KAAK,CAACE,GAAN,GAAY,IAAZ;IACAF,KAAK,CAACG,UAAN,GAAmB,KAAnB;IACAL,OAAO,CAAC,aAAD,EAAgB,EAAhB,CAAP;EACD;;AAZW,CAAlB;AAeA,MAAMgB,OAAO,GAAG;EACZ,OAAOL,WAAW,CAACC,KAAnB,EAA0BK,OAA1B,EAAmCC,IAAnC,EAAwC;IACpC,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;MAC1BrB,GAAG,CAACa,KAAJ,CAAUM,IAAV,EAAgBG,IAAhB,CAAqBC,QAAQ,IAAI;QAC7BL,OAAO,CAACM,MAAR,CAAejB,aAAa,CAACE,YAA7B,EAA2Cc,QAAQ,CAACJ,IAApD;QACAE,OAAO,CAACE,QAAQ,CAACJ,IAAV,CAAP;MACH,CAHD,EAGGM,KAHH,CAGSC,KAAK,IAAI;QACdzB,OAAO,CAAC,aAAD,EAAgB,EAAhB,CAAP;QACAoB,OAAO,CAACK,KAAD,CAAP;MACH,CAND;IAQH,CATM,CAAP;EAUH,CAZW;;EAaZC;AAbY,CAAhB;AAgBA,eACA;EACIxB,KADJ;EAEIW,SAFJ;EAGIG;AAHJ,CADA"},"metadata":{},"sourceType":"module"}