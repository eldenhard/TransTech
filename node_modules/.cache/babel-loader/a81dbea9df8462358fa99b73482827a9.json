{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends, __read } from \"tslib\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Axis } from \"./Axis\";\nimport { MultiDisposer } from \"../../../core/util/Disposer\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Creates a value axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info\r\n * @important\r\n */\n\nvar ValueAxis =\n/** @class */\nfunction (_super) {\n  __extends(ValueAxis, _super);\n\n  function ValueAxis() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_dirtyExtremes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_dirtySelectionExtremes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_deltaMinMax\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_minReal\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_maxReal\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_baseValue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_syncDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_minLogAdjusted\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(ValueAxis.prototype, \"markDirtyExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._dirtyExtremes = true;\n      this.markDirty();\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"markDirtySelectionExtremes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._dirtySelectionExtremes = true;\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n      this.setPrivateRaw(\"name\", \"value\");\n      this.addTag(\"value\");\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"syncWithAxis\")) {\n        var previousValue = this._prevSettings.syncWithAxis;\n\n        if (previousValue) {\n          if (this._syncDp) {\n            this._syncDp.dispose();\n          }\n        }\n\n        var syncWithAxis = this.get(\"syncWithAxis\");\n\n        if (syncWithAxis) {\n          this._syncDp = new MultiDisposer([syncWithAxis.onPrivate(\"selectionMinFinal\", function () {\n            _this._dirtySelectionExtremes = true;\n          }), syncWithAxis.onPrivate(\"selectionMaxFinal\", function () {\n            _this._dirtySelectionExtremes = true;\n          })]);\n        }\n      } //if (this._dirtyExtremes || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\")) {\n\n\n      if (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"strictMinMaxSelection\") || this.isDirty(\"maxPrecision\") || this.isDirty(\"numberFormat\")) {\n        this._getMinMax();\n\n        this.ghostLabel.set(\"text\", \"\");\n        this._dirtyExtremes = false;\n      }\n\n      if (this._dirtySelectionExtremes && !this._isPanning && this.get(\"autoZoom\", true)) {\n        this._getSelectionMinMax();\n\n        this._dirtySelectionExtremes = false;\n      }\n\n      this._groupData();\n\n      if (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"min\") || this.isPrivateDirty(\"selectionMax\") || this.isPrivateDirty(\"selectionMin\") || this.isPrivateDirty(\"max\") || this.isPrivateDirty(\"step\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"logarithmic\")) {\n        this._handleRangeChange();\n\n        this._prepareAxisItems();\n\n        this._updateAxisRanges();\n      }\n\n      this._baseValue = this.baseValue();\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_groupData\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_formatText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var numberFormat = this.get(\"numberFormat\");\n      var formatter = this.getNumberFormatter();\n      var text = \"\";\n\n      if (numberFormat) {\n        text = formatter.format(value, numberFormat);\n      } else {\n        text = formatter.format(value, undefined, this.getPrivate(\"stepDecimalPlaces\"));\n      }\n\n      return text;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_prepareAxisItems\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var min = this.getPrivate(\"min\");\n      var max = this.getPrivate(\"max\");\n\n      if ($type.isNumber(min) && $type.isNumber(max)) {\n        var logarithmic = this.get(\"logarithmic\");\n        var step = this.getPrivate(\"step\");\n        var selectionMin = this.getPrivate(\"selectionMin\");\n        var selectionMax = this.getPrivate(\"selectionMax\") + step;\n        var value = selectionMin - step;\n        var i = 0;\n        var differencePower = 1;\n        var minLog = min;\n\n        if (logarithmic) {\n          value = this._minLogAdjusted;\n\n          if (value < selectionMin) {\n            while (value < selectionMin) {\n              value += step;\n            }\n          }\n\n          minLog = value;\n\n          if (minLog <= 0) {\n            minLog = 1;\n\n            if (step < 1) {\n              minLog = step;\n            }\n          }\n\n          differencePower = Math.log(selectionMax - step) * Math.LOG10E - Math.log(minLog) * Math.LOG10E;\n\n          if (differencePower > 2) {\n            value = Math.pow(10, Math.log(minLog) * Math.LOG10E - 5);\n          }\n        }\n\n        var previous = -Infinity;\n\n        while (value < selectionMax) {\n          var dataItem = void 0;\n\n          if (this.dataItems.length < i + 1) {\n            dataItem = new DataItem(this, undefined, {});\n\n            this._dataItems.push(dataItem);\n\n            this.processDataItem(dataItem);\n          } else {\n            dataItem = this.dataItems[i];\n          }\n\n          this._createAssets(dataItem, []);\n\n          if (dataItem.isHidden()) {\n            dataItem.show();\n          }\n\n          dataItem.setRaw(\"value\", value);\n          var label = dataItem.get(\"label\");\n\n          if (label) {\n            label.set(\"text\", this._formatText(value));\n          }\n\n          this._prepareDataItem(dataItem);\n\n          if (!logarithmic) {\n            value += step;\n          } else {\n            if (differencePower > 2) {\n              value = Math.pow(10, Math.log(minLog) * Math.LOG10E + i - 5);\n            } else {\n              value += step;\n            }\n          }\n\n          if (previous == value) {\n            break;\n          }\n\n          var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\n          if (stepPower < 1) {\n            // exponent is less then 1 too. Count decimals of exponent\n            var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2; // round value to avoid floating point issues\n\n            value = $math.round(value, decCount);\n          }\n\n          i++;\n          previous = value;\n        }\n\n        for (var j = i; j < this.dataItems.length; j++) {\n          this.dataItems[j].hide();\n        }\n\n        $array.each(this.series, function (series) {\n          if (series.inited) {\n            series._markDirtyAxes();\n          }\n        });\n\n        this._updateGhost();\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_prepareDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, count) {\n      var renderer = this.get(\"renderer\");\n      var value = dataItem.get(\"value\");\n      var endValue = dataItem.get(\"endValue\");\n      var position = this.valueToPosition(value);\n      var endPosition = position;\n      var fillEndPosition = this.valueToPosition(value + this.getPrivate(\"step\"));\n\n      if ($type.isNumber(endValue)) {\n        endPosition = this.valueToPosition(endValue);\n        fillEndPosition = endPosition;\n      }\n\n      if (dataItem.get(\"isRange\")) {\n        if (endValue == null) {\n          fillEndPosition = position;\n        }\n      }\n\n      renderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n      var grid = dataItem.get(\"grid\");\n      renderer.updateGrid(grid, position, endPosition);\n\n      if (grid) {\n        if (value == this.get(\"baseValue\", 0)) {\n          grid.addTag(\"base\");\n\n          grid._applyThemes();\n        } else if (grid.hasTag(\"base\")) {\n          grid.removeTag(\"base\");\n\n          grid._applyThemes();\n        }\n      }\n\n      renderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n      renderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\n      this._processBullet(dataItem);\n\n      renderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n\n      if (!dataItem.get(\"isRange\")) {\n        var fillRule = this.get(\"fillRule\");\n\n        if (fillRule) {\n          fillRule(dataItem);\n        }\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_handleRangeChange\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var selectionMin = this.positionToValue(this.get(\"start\", 0));\n      var selectionMax = this.positionToValue(this.get(\"end\", 1));\n      var gridCount = this.get(\"renderer\").gridCount();\n\n      var minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n      var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n      this.setPrivateRaw(\"stepDecimalPlaces\", stepDecimalPlaces);\n      selectionMin = $math.round(selectionMin, stepDecimalPlaces);\n      selectionMax = $math.round(selectionMax, stepDecimalPlaces);\n      minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n      var step = minMaxStep.step;\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n\n      if (this.getPrivate(\"selectionMin\") !== selectionMin || this.getPrivate(\"selectionMax\") !== selectionMax || this.getPrivate(\"step\") !== step) {\n        // do not change to setPrivate, will cause SO\n        this.setPrivateRaw(\"selectionMin\", selectionMin);\n        this.setPrivateRaw(\"selectionMax\", selectionMax);\n        this.setPrivateRaw(\"step\", step);\n      }\n    }\n  });\n  /**\r\n   * Converts a relative position to a corresponding numeric value from axis\r\n   * scale.\r\n   *\r\n   * @param   position  Relative position\r\n   * @return            Value\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"positionToValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var min = this.getPrivate(\"min\");\n      var max = this.getPrivate(\"max\");\n\n      if (!this.get(\"logarithmic\")) {\n        return position * (max - min) + min;\n      } else {\n        return Math.pow(Math.E, (position * (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E) + Math.log(min) * Math.LOG10E) / Math.LOG10E);\n      }\n    }\n  });\n  /**\r\n   * Convers value to a relative position on axis.\r\n   *\r\n   * @param   value  Value\r\n   * @return         Relative position\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"valueToPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var min = this.getPrivate(\"min\");\n      var max = this.getPrivate(\"max\");\n\n      if (!this.get(\"logarithmic\")) {\n        return (value - min) / (max - min);\n      } else {\n        if (value <= 0) {\n          var treatZeroAs = this.get(\"treatZeroAs\");\n\n          if ($type.isNumber(treatZeroAs)) {\n            value = treatZeroAs;\n          }\n        }\n\n        return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"valueToFinalPosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var min = this.getPrivate(\"minFinal\");\n      var max = this.getPrivate(\"maxFinal\");\n\n      if (!this.get(\"logarithmic\")) {\n        return (value - min) / (max - min);\n      } else {\n        if (value <= 0) {\n          var treatZeroAs = this.get(\"treatZeroAs\");\n\n          if ($type.isNumber(treatZeroAs)) {\n            value = treatZeroAs;\n          }\n        }\n\n        return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E);\n      }\n    }\n  });\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific value.\r\n   *\r\n   * @param   value     Numeric value\r\n   * @param   location  Location\r\n   * @param   baseValue Base value\r\n   * @return            X coordinate\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, location, baseValue) {\n      value = baseValue + (value - baseValue) * location;\n      var position = this.valueToPosition(value);\n      return this._settings.renderer.positionToCoordinate(position);\n    }\n  });\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific value.\r\n   *\r\n   * @param   value     Numeric value\r\n   * @param   location  Location\r\n   * @param   baseValue Base value\r\n   * @return            X coordinate\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, location, baseValue) {\n      value = baseValue + (value - baseValue) * location;\n      var position = this.valueToPosition(value);\n      return this._settings.renderer.positionToCoordinate(position);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemCoordinateX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemPositionX\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      var value = dataItem.get(field);\n      var stackToItem = dataItem.get(\"stackToItemX\");\n\n      if (stackToItem) {\n        var series = dataItem.component;\n        value = value * axisLocation + series.getStackedXValueWorking(dataItem, field);\n      } else {\n        value = this._baseValue + (value - this._baseValue) * axisLocation;\n      }\n\n      return this.valueToPosition(value);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemCoordinateY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getDataItemPositionY\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem, field, _cellLocation, axisLocation) {\n      var value = dataItem.get(field);\n      var stackToItem = dataItem.get(\"stackToItemY\");\n\n      if (stackToItem) {\n        var series = dataItem.component;\n        value = value * axisLocation + series.getStackedYValueWorking(dataItem, field);\n      } else {\n        value = this._baseValue + (value - this._baseValue) * axisLocation;\n      }\n\n      return this.valueToPosition(value);\n    }\n  });\n  /**\r\n   * Returns relative position of axis' `baseValue`.\r\n   *\r\n   * @return  Base value position\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"basePosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.valueToPosition(this.baseValue());\n    }\n  });\n  /**\r\n   * Base value of the [[ValueAxis]], which determines positive and negative\r\n   * values.\r\n   *\r\n   * @return Base value\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var min = Math.min(this.getPrivate(\"minFinal\", -Infinity), this.getPrivate(\"selectionMin\", -Infinity));\n      var max = Math.max(this.getPrivate(\"maxFinal\", Infinity), this.getPrivate(\"selectionMax\", Infinity));\n      var baseValue = this.get(\"baseValue\", 0);\n\n      if (baseValue < min) {\n        baseValue = min;\n      }\n\n      if (baseValue > max) {\n        baseValue = max;\n      }\n\n      return baseValue;\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"cellEndValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return value;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"fixSmallStep\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (step) {\n      // happens because of floating point error\n      if (1 + step === 1) {\n        step *= 2;\n        return this.fixSmallStep(step);\n      }\n\n      return step;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_fixMin\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min) {\n      return min;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_fixMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (max) {\n      return max;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_calculateTotals\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.get(\"calculateTotals\")) {\n        var series = this.series[0];\n\n        if (series) {\n          var startIndex = series.startIndex();\n\n          if (series.dataItems.length > 0) {\n            if (startIndex > 0) {\n              startIndex--;\n            }\n\n            var endIndex = series.endIndex();\n\n            if (endIndex < series.dataItems.length) {\n              endIndex++;\n            }\n\n            var field_1;\n            var vc_1;\n\n            if (series.get(\"yAxis\") == this) {\n              field_1 = \"valueY\";\n              vc_1 = \"vcy\";\n            } else if (series.get(\"xAxis\") == this) {\n              field_1 = \"valueX\";\n              vc_1 = \"vcx\";\n            }\n\n            var fieldWorking_1 = field_1 + \"Working\";\n\n            if (field_1) {\n              var _loop_1 = function (i) {\n                var sum = 0;\n                var total = 0;\n                $array.each(this_1.series, function (series) {\n                  if (!series.get(\"excludeFromTotal\")) {\n                    var dataItem = series.dataItems[i];\n\n                    if (dataItem) {\n                      var value = dataItem.get(fieldWorking_1) * series.get(vc_1);\n\n                      if (!$type.isNaN(value)) {\n                        sum += value;\n                        total += Math.abs(value);\n                      }\n                    }\n                  }\n                });\n                $array.each(this_1.series, function (series) {\n                  if (!series.get(\"excludeFromTotal\")) {\n                    var dataItem = series.dataItems[i];\n\n                    if (dataItem) {\n                      var value = dataItem.get(fieldWorking_1) * series.get(vc_1);\n\n                      if (!$type.isNaN(value)) {\n                        dataItem.set(field_1 + \"Total\", total);\n                        dataItem.set(field_1 + \"Sum\", sum);\n                        dataItem.set(field_1 + \"TotalPercent\", value / total * 100);\n                      }\n                    }\n                  }\n                });\n              };\n\n              var this_1 = this;\n\n              for (var i = startIndex; i < endIndex; i++) {\n                _loop_1(i);\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_getSelectionMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a;\n\n      var _this = this;\n\n      var min = this.getPrivate(\"minFinal\");\n      var max = this.getPrivate(\"maxFinal\");\n      var minDefined = this.get(\"min\");\n      var maxDefined = this.get(\"max\");\n      var extraMin = this.get(\"extraMin\", 0);\n      var extraMax = this.get(\"extraMax\", 0);\n\n      if (this.get(\"logarithmic\")) {\n        if (this.get(\"extraMin\") == null) {\n          extraMin = 0.1;\n        }\n\n        if (this.get(\"extraMax\") == null) {\n          extraMax = 0.2;\n        }\n      }\n\n      var gridCount = this.get(\"renderer\").gridCount();\n      var selectionStrictMinMax = this.get(\"strictMinMaxSelection\");\n      var strictMinMax = this.get(\"strictMinMax\");\n\n      if ($type.isNumber(min) && $type.isNumber(max)) {\n        var selectionMin_1 = max;\n        var selectionMax_1 = min;\n        $array.each(this.series, function (series) {\n          if (!series.get(\"ignoreMinMax\")) {\n            var seriesMin = void 0;\n            var seriesMax = void 0;\n            var outOfSelection = series.getPrivate(\"outOfSelection\");\n\n            if (series.get(\"xAxis\") === _this) {\n              if (!outOfSelection) {\n                seriesMin = series.getPrivate(\"selectionMinX\", series.getPrivate(\"minX\"));\n                seriesMax = series.getPrivate(\"selectionMaxX\", series.getPrivate(\"maxX\"));\n              }\n            } else if (series.get(\"yAxis\") === _this) {\n              if (!outOfSelection) {\n                seriesMin = series.getPrivate(\"selectionMinY\", series.getPrivate(\"minY\"));\n                seriesMax = series.getPrivate(\"selectionMaxY\", series.getPrivate(\"maxY\"));\n              }\n            }\n\n            if (!series.isHidden() && !series.isShowing()) {\n              if ($type.isNumber(seriesMin)) {\n                selectionMin_1 = Math.min(selectionMin_1, seriesMin);\n              }\n\n              if ($type.isNumber(seriesMax)) {\n                selectionMax_1 = Math.max(selectionMax_1, seriesMax);\n              }\n            }\n          }\n        });\n        this.axisRanges.each(function (range) {\n          if (range.get(\"affectsMinMax\")) {\n            var value = range.get(\"value\");\n\n            if (value != null) {\n              selectionMin_1 = Math.min(selectionMin_1, value);\n              selectionMax_1 = Math.max(selectionMax_1, value);\n            }\n\n            value = range.get(\"endValue\");\n\n            if (value != null) {\n              selectionMin_1 = Math.min(selectionMin_1, value);\n              selectionMax_1 = Math.max(selectionMax_1, value);\n            }\n          }\n        });\n\n        if (selectionMin_1 > selectionMax_1) {\n          _a = __read([selectionMax_1, selectionMin_1], 2), selectionMin_1 = _a[0], selectionMax_1 = _a[1];\n        }\n\n        if ($type.isNumber(minDefined)) {\n          if (strictMinMax) {\n            selectionMin_1 = minDefined;\n          } else {\n            selectionMin_1 = min;\n          }\n        } else if (strictMinMax) {\n          if ($type.isNumber(this._minReal)) {\n            selectionMin_1 = this._minReal;\n          }\n        }\n\n        if ($type.isNumber(maxDefined)) {\n          if (strictMinMax) {\n            selectionMax_1 = maxDefined;\n          } else {\n            selectionMax_1 = max;\n          }\n        } else if (strictMinMax) {\n          if ($type.isNumber(this._maxReal)) {\n            selectionMax_1 = this._maxReal;\n          }\n        }\n\n        if (selectionMin_1 === selectionMax_1) {\n          selectionMin_1 -= this._deltaMinMax;\n          selectionMax_1 += this._deltaMinMax;\n\n          var minMaxStep2 = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, strictMinMax);\n\n          selectionMin_1 = minMaxStep2.min;\n          selectionMax_1 = minMaxStep2.max;\n        }\n\n        var selectionMinReal = selectionMin_1;\n        var selectionMaxReal = selectionMax_1;\n        selectionMin_1 -= (selectionMax_1 - selectionMin_1) * extraMin;\n        selectionMax_1 += (selectionMax_1 - selectionMin_1) * extraMax;\n\n        var minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount);\n\n        selectionMin_1 = minMaxStep.min;\n        selectionMax_1 = minMaxStep.max;\n        selectionMin_1 = $math.fitToRange(selectionMin_1, min, max);\n        selectionMax_1 = $math.fitToRange(selectionMax_1, min, max); // do it for the second time !important\t\t\t\n\n        minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, true);\n\n        if (!strictMinMax) {\n          selectionMin_1 = minMaxStep.min;\n          selectionMax_1 = minMaxStep.max;\n        }\n\n        var syncWithAxis = this.get(\"syncWithAxis\");\n\n        if (syncWithAxis) {\n          minMaxStep = this._syncAxes(selectionMin_1, selectionMax_1, minMaxStep.step, syncWithAxis.getPrivate(\"selectionMinFinal\", syncWithAxis.getPrivate(\"minFinal\", 0)), syncWithAxis.getPrivate(\"selectionMaxFinal\", syncWithAxis.getPrivate(\"maxFinal\", 1)), syncWithAxis.getPrivate(\"selectionStepFinal\", syncWithAxis.getPrivate(\"step\", 1)));\n          selectionMin_1 = minMaxStep.min;\n          selectionMax_1 = minMaxStep.max;\n        }\n\n        if (strictMinMax) {\n          if ($type.isNumber(minDefined)) {\n            selectionMin_1 = Math.max(selectionMin_1, minDefined);\n          }\n\n          if ($type.isNumber(maxDefined)) {\n            selectionMax_1 = Math.min(selectionMax_1, maxDefined);\n          }\n        }\n\n        if (selectionStrictMinMax) {\n          selectionMin_1 = selectionMinReal - (selectionMax_1 - selectionMin_1) * extraMin;\n          selectionMax_1 = selectionMaxReal + (selectionMax_1 - selectionMin_1) * extraMax;\n        }\n\n        if (this.get(\"logarithmic\")) {\n          if (selectionMin_1 <= 0) {\n            selectionMin_1 = selectionMinReal * (1 - Math.min(extraMin, 0.99));\n          }\n\n          if (selectionMin_1 < min) {\n            selectionMin_1 = min;\n          }\n\n          if (selectionMax_1 > max) {\n            selectionMax_1 = max;\n          }\n        }\n\n        var start = this.valueToFinalPosition(selectionMin_1);\n        var end = this.valueToFinalPosition(selectionMax_1);\n        this.setPrivateRaw(\"selectionMinFinal\", selectionMin_1);\n        this.setPrivateRaw(\"selectionMaxFinal\", selectionMax_1);\n        this.setPrivateRaw(\"selectionStepFinal\", minMaxStep.step);\n        this.zoom(start, end);\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_getMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var minDefined = this.get(\"min\");\n      var maxDefined = this.get(\"max\");\n      var min = Infinity;\n      var max = -Infinity;\n      var extraMin = this.get(\"extraMin\", 0);\n      var extraMax = this.get(\"extraMax\", 0);\n\n      if (this.get(\"logarithmic\")) {\n        if (this.get(\"extraMin\") == null) {\n          extraMin = 0.1;\n        }\n\n        if (this.get(\"extraMax\") == null) {\n          extraMax = 0.2;\n        }\n      }\n\n      var minDiff = Infinity;\n      $array.each(this.series, function (series) {\n        if (!series.get(\"ignoreMinMax\")) {\n          var seriesMin = void 0;\n          var seriesMax = void 0;\n\n          if (series.get(\"xAxis\") === _this) {\n            seriesMin = series.getPrivate(\"minX\");\n            seriesMax = series.getPrivate(\"maxX\");\n          } else if (series.get(\"yAxis\") === _this) {\n            seriesMin = series.getPrivate(\"minY\");\n            seriesMax = series.getPrivate(\"maxY\");\n          }\n\n          if ($type.isNumber(seriesMin) && $type.isNumber(seriesMax)) {\n            min = Math.min(min, seriesMin);\n            max = Math.max(max, seriesMax);\n            var diff = seriesMax - seriesMin;\n\n            if (diff <= 0) {\n              diff = Math.abs(seriesMax / 100);\n            }\n\n            if (diff < minDiff) {\n              minDiff = diff;\n            }\n          }\n        }\n      });\n      this.axisRanges.each(function (range) {\n        if (range.get(\"affectsMinMax\")) {\n          var value = range.get(\"value\");\n\n          if (value != null) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n          }\n\n          value = range.get(\"endValue\");\n\n          if (value != null) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n          }\n        }\n      });\n\n      if (this.get(\"logarithmic\")) {\n        var treatZeroAs = this.get(\"treatZeroAs\");\n\n        if ($type.isNumber(treatZeroAs)) {\n          if (min <= 0) {\n            min = treatZeroAs;\n          }\n        }\n\n        if (min <= 0) {\n          new Error(\"Logarithmic value axis can not have values <= 0.\");\n        }\n      }\n\n      if (min === 0 && max === 0) {\n        max = 0.9;\n        min = -0.9;\n      }\n\n      if ($type.isNumber(minDefined)) {\n        min = minDefined;\n      }\n\n      if ($type.isNumber(maxDefined)) {\n        max = maxDefined;\n      } // meaning no min/max found on series/ranges and no min/max was defined\n\n\n      if (min === Infinity || max === -Infinity) {\n        return;\n      }\n\n      var initialMin = min;\n      var initialMax = max; // adapter\n\n      var minAdapted = this.adapters.fold(\"min\", min);\n      var maxAdapted = this.adapters.fold(\"max\", max);\n\n      if ($type.isNumber(minAdapted)) {\n        min = minAdapted;\n      }\n\n      if ($type.isNumber(maxAdapted)) {\n        max = maxAdapted;\n      } // DateAxis does some magic here\n\n\n      min = this._fixMin(min);\n      max = this._fixMax(max); // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\t\t\n\n      if (max - min <= 1 / Math.pow(10, 15)) {\n        if (max - min !== 0) {\n          this._deltaMinMax = (max - min) / 2;\n        } else {\n          this._getDelta(max);\n        }\n\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      } // add extras\n\n\n      min -= (max - min) * extraMin;\n      max += (max - min) * extraMax;\n\n      if (this.get(\"logarithmic\")) {\n        // don't let min go below 0 if real min is >= 0\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        } // don't let max go above 0 if real max is <= 0\n\n\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      }\n\n      this._minReal = min;\n      this._maxReal = max;\n      var strictMinMax = this.get(\"strictMinMax\");\n      var strictMinMaxSelection = this.get(\"strictMinMaxSelection\", false);\n\n      if (strictMinMaxSelection) {\n        strictMinMax = strictMinMaxSelection;\n      }\n\n      var strict = strictMinMax;\n\n      if ($type.isNumber(maxDefined)) {\n        strict = true;\n      }\n\n      var gridCount = this.get(\"renderer\").gridCount();\n\n      var minMaxStep = this._adjustMinMax(min, max, gridCount, strict);\n\n      min = minMaxStep.min;\n      max = minMaxStep.max; // do it for the second time with strict true (importat!)\n\n      minMaxStep = this._adjustMinMax(min, max, gridCount, true);\n      min = minMaxStep.min;\n      max = minMaxStep.max; // return min max if strict\n\n      if (strictMinMax) {\n        if ($type.isNumber(minDefined)) {\n          min = minDefined;\n        } else {\n          min = this._minReal;\n        }\n\n        if ($type.isNumber(maxDefined)) {\n          max = maxDefined;\n        } else {\n          max = this._maxReal;\n        }\n\n        if (max - min <= 0.00000001) {\n          min -= this._deltaMinMax;\n          max += this._deltaMinMax;\n        }\n\n        min -= (max - min) * extraMin;\n        max += (max - min) * extraMax;\n      }\n\n      minAdapted = this.adapters.fold(\"min\", min);\n      maxAdapted = this.adapters.fold(\"max\", max);\n\n      if ($type.isNumber(minAdapted)) {\n        min = minAdapted;\n      }\n\n      if ($type.isNumber(maxAdapted)) {\n        max = maxAdapted;\n      }\n\n      if (minDiff == Infinity) {\n        minDiff = max - min;\n      } // this is to avoid floating point number error\n\n\n      var decCount = Math.round(Math.abs(Math.log(Math.abs(max - min)) * Math.LOG10E)) + 5;\n      min = $math.round(min, decCount);\n      max = $math.round(max, decCount);\n      var syncWithAxis = this.get(\"syncWithAxis\");\n\n      if (syncWithAxis) {\n        minMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate(\"minFinal\", syncWithAxis.getPrivate(\"min\", 0)), syncWithAxis.getPrivate(\"maxFinal\", syncWithAxis.getPrivate(\"max\", 1)), syncWithAxis.getPrivate(\"step\", 1));\n        min = minMaxStep.min;\n        max = minMaxStep.max;\n      }\n\n      this.setPrivateRaw(\"maxZoomFactor\", (max - min) / minDiff * this.get(\"maxZoomFactor\", 100));\n\n      if (this.get(\"logarithmic\")) {\n        this._minLogAdjusted = min;\n        min = this._minReal;\n        max = this._maxReal;\n\n        if (min <= 0) {\n          min = initialMin * (1 - Math.min(extraMin, 0.99));\n        }\n      }\n\n      if ($type.isNumber(min) && $type.isNumber(max)) {\n        if (this.getPrivate(\"minFinal\") !== min || this.getPrivate(\"maxFinal\") !== max) {\n          this.setPrivate(\"minFinal\", min);\n          this.setPrivate(\"maxFinal\", max);\n\n          this._saveMinMax(min, max);\n\n          var duration = this.get(\"interpolationDuration\", 0);\n          var easing = this.get(\"interpolationEasing\");\n          this.animatePrivate({\n            key: \"min\",\n            to: min,\n            duration: duration,\n            easing: easing\n          });\n          this.animatePrivate({\n            key: \"max\",\n            to: max,\n            duration: duration,\n            easing: easing\n          });\n        }\n      }\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_getDelta\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (max) {\n      // the number by which we need to raise 10 to get difference\n      var exponent = Math.log(Math.abs(max)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n      var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n      power = power / 10;\n      this._deltaMinMax = power;\n    }\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_saveMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_min, _max) {}\n  });\n  Object.defineProperty(ValueAxis.prototype, \"_adjustMinMax\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max, gridCount, strictMode) {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max;\n      var difference = max - min; // in case min and max is the same, use max\n\n      if (difference === 0) {\n        difference = Math.abs(max);\n      } // the number by which we need to raise 10 to get difference\n\n\n      var exponent = Math.log(Math.abs(difference)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n      var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n      power = power / 10;\n      var extra = power;\n\n      if (strictMode) {\n        extra = 0;\n      } // round down min\n\n\n      if (strictMode) {\n        min = Math.floor(min / power) * power; // round up max\n\n        max = Math.ceil(max / power) * power;\n      } else {\n        min = Math.ceil(min / power) * power - extra; // round up max\n\n        max = Math.floor(max / power) * power + extra;\n      } // don't let min go below 0 if real min is >= 0\n\n\n      if (min < 0 && initialMin >= 0) {\n        min = 0;\n      } // don't let max go above 0 if real max is <= 0\n\n\n      if (max > 0 && initialMax <= 0) {\n        max = 0;\n      }\n\n      exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n      power = Math.pow(10, Math.floor(exponent));\n      power = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance\n      // approximate difference between two grid lines\n\n      var step = Math.ceil(difference / gridCount / power) * power;\n      var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E)); // the step should divide by  2, 5, and 10.\n\n      var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n\n      if (stepDivisor > 5) {\n        stepDivisor = 10;\n      } else if (stepDivisor <= 5 && stepDivisor > 2) {\n        stepDivisor = 5;\n      } // now get real step\n\n\n      step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n      var maxPrecision = this.get(\"maxPrecision\");\n\n      if ($type.isNumber(maxPrecision)) {\n        var ceiledStep = $math.ceil(step, maxPrecision);\n\n        if (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {\n          step = ceiledStep;\n        }\n      }\n\n      var decCount = 0; // in case numbers are smaller than 1\n\n      if (stepPower < 1) {\n        // exponent is less then 1 too. Count decimals of exponent\n        decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1; // round step\n\n        step = $math.round(step, decCount);\n      } // final min and max\n\n\n      var minCount = Math.floor(min / step);\n      min = $math.round(step * minCount, decCount);\n      var maxCount;\n\n      if (!strictMode) {\n        maxCount = Math.ceil(max / step);\n      } else {\n        maxCount = Math.floor(max / step);\n      }\n\n      if (maxCount === minCount) {\n        maxCount++;\n      }\n\n      max = $math.round(step * maxCount, decCount);\n\n      if (max < initialMax) {\n        max = max + step;\n      }\n\n      if (min > initialMin) {\n        min = min - step;\n      }\n\n      step = this.fixSmallStep(step);\n      return {\n        min: min,\n        max: max,\n        step: step\n      };\n    }\n  });\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getTooltipText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (position) {\n      var numberFormat = this.get(\"tooltipNumberFormat\", this.get(\"numberFormat\"));\n      var formatter = this.getNumberFormatter();\n      var extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n      var decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n      var value = $math.round(this.positionToValue(position), decimals);\n\n      if (numberFormat) {\n        return formatter.format(value, numberFormat);\n      } else {\n        return formatter.format(value, undefined, decimals); //label.set(\"text\", this.getNumberFormatter().format(value, undefined, this.getPrivate(\"stepDecimalPlaces\")));\n      } // //@todo number formatter + tag\n      // return $math.round(this.positionToValue(position), this.getPrivate(\"stepDecimalPlaces\")).toString();\n\n    }\n  });\n  /**\r\n   * Returns a data item from series that is closest to the `position`.\r\n   *\r\n   * @param   series    Series\r\n   * @param   position  Relative position\r\n   * @return            Data item\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"getSeriesItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series, position) {\n      var fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n      var value = this.positionToValue(position);\n      var index = undefined;\n      var oldDiff;\n      $array.each(series.dataItems, function (dataItem, i) {\n        var diff = Math.abs(dataItem.get(fieldName) - value);\n\n        if (index === undefined || diff < oldDiff) {\n          index = i;\n          oldDiff = diff;\n        }\n      });\n\n      if (index != null) {\n        return series.dataItems[index];\n      }\n    }\n  });\n  /**\r\n   * Zooms the axis to specific `start` and `end` values.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start value\r\n   * @param  end       End value\r\n   * @param  duration  Duration in milliseconds\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"zoomToValues\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (start, end, duration) {\n      var min = this.getPrivate(\"minFinal\", 0);\n      var max = this.getPrivate(\"maxFinal\", 0);\n\n      if (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n        this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n      }\n    }\n  });\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"_syncAxes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max, step, syncMin, syncMax, syncStep) {\n      var axis = this.get(\"syncWithAxis\");\n\n      if (axis) {\n        var count = Math.round(syncMax - syncMin) / syncStep;\n        var currentCount = Math.round((max - min) / step);\n        var gridCount = this.get(\"renderer\").gridCount();\n\n        if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n          var synced = false;\n          var c = 0;\n          var diff = (max - min) * 0.01;\n          var omin = min;\n          var omax = max;\n          var ostep = step;\n\n          while (synced != true) {\n            synced = this._checkSync(omin, omax, ostep, count);\n            c++;\n\n            if (c > 500) {\n              synced = true;\n            }\n\n            if (!synced) {\n              if (c / 3 == Math.round(c / 3)) {\n                omin = min - diff * c;\n\n                if (min >= 0 && omin < 0) {\n                  omin = 0;\n                }\n              } else {\n                omax = max + diff * c;\n\n                if (omax <= 0 && omax > 0) {\n                  omax = 0;\n                }\n              }\n\n              var minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);\n\n              omin = minMaxStep.min;\n              omax = minMaxStep.max;\n              ostep = minMaxStep.step;\n            } else {\n              min = omin;\n              max = omax;\n              step = ostep;\n            }\n          }\n        }\n      }\n\n      return {\n        min: min,\n        max: max,\n        step: step\n      };\n    }\n  });\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n\n  Object.defineProperty(ValueAxis.prototype, \"_checkSync\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (min, max, step, count) {\n      var currentCount = (max - min) / step;\n\n      for (var i = 1; i < count; i++) {\n        if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  Object.defineProperty(ValueAxis, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ValueAxis\"\n  });\n  Object.defineProperty(ValueAxis, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Axis.classNames.concat([ValueAxis.className])\n  });\n  return ValueAxis;\n}(Axis);\n\nexport { ValueAxis };","map":{"version":3,"mappings":";;AAGA,SAASA,QAAT,QAAyB,gCAAzB;AACA,SAASC,IAAT,QAA8E,QAA9E;AACA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,yBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,0BAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,yBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,0BAAxB;AA2TA;;;;;;;AAMA;AAAA;AAAA;EAAuDC;;EAAvD;IAAA;;IASCC;sBAAA;wBAAA;oBAAA;aAAoC;IAApC;IACAA;sBAAA;wBAAA;oBAAA;aAA6C;IAA7C;IACAA;sBAAA;wBAAA;oBAAA;aAAiC;IAAjC;IACAA;sBAAA;wBAAA;oBAAA;;IAAA;IACAA;sBAAA;wBAAA;oBAAA;;IAAA;IAEAA;sBAAA;wBAAA;oBAAA;aAA+B;IAA/B;IACAA;sBAAA;wBAAA;oBAAA;;IAAA;IACAA;sBAAA;wBAAA;oBAAA;aAAoC;IAApC;;EAmvCA;EAlvCA;;;;;;;;;WAGA;MACC,KAAKC,cAAL,GAAsB,IAAtB;MACA,KAAKC,SAAL;IACA;;EAED;;;;;;;;WAGA;MACC,KAAKC,uBAAL,GAA+B,IAA/B;MACA,KAAKD,SAAL;IACA;;;;;;WAED;MACC,KAAKE,SAAL,CAAeC,SAAf,GAA2BP,MAAM,CAACQ,SAAP,CAAiB,KAAKF,SAAL,CAAeC,SAAhC,EAA2C,CAAC,MAAD,CAA3C,CAA3B;MACA,KAAKE,aAAL,CAAmB,MAAnB,EAA2B,OAA3B;MACA,KAAKC,MAAL,CAAY,OAAZ;;MACAC,iBAAMC,SAAN,CAAeC,IAAf,CAAe,IAAf;IACA;;;;;;WAED;MAAA;;MACCF,iBAAMG,gBAAN,CAAsBD,IAAtB,CAAsB,IAAtB;;MAEA,IAAI,KAAKE,OAAL,CAAa,cAAb,CAAJ,EAAkC;QACjC,IAAIC,aAAa,GAAG,KAAKC,aAAL,CAAmBC,YAAvC;;QACA,IAAIF,aAAJ,EAAmB;UAClB,IAAI,KAAKG,OAAT,EAAkB;YACjB,KAAKA,OAAL,CAAaC,OAAb;UACA;QACD;;QACD,IAAIF,YAAY,GAAG,KAAKG,GAAL,CAAS,cAAT,CAAnB;;QACA,IAAIH,YAAJ,EAAkB;UACjB,KAAKC,OAAL,GAAe,IAAIvB,aAAJ,CAAkB,CAChCsB,YAAY,CAACI,SAAb,CAAuB,mBAAvB,EAA4C;YAC3CC,KAAI,CAAClB,uBAAL,GAA+B,IAA/B;UACA,CAFD,CADgC,EAIhCa,YAAY,CAACI,SAAb,CAAuB,mBAAvB,EAA4C;YAC3CC,KAAI,CAAClB,uBAAL,GAA+B,IAA/B;UACA,CAFD,CAJgC,CAAlB,CAAf;QAQA;MACD,CArBF,CAuBC;;;MACA,IAAI,KAAKmB,UAAL,IAAmB,KAAKrB,cAAxB,IAA0C,KAAKsB,YAA/C,IAA+D,KAAKC,cAAL,CAAoB,OAApB,CAA/D,IAA+F,KAAKA,cAAL,CAAoB,QAApB,CAA/F,IAAgI,KAAKX,OAAL,CAAa,KAAb,CAAhI,IAAuJ,KAAKA,OAAL,CAAa,KAAb,CAAvJ,IAA8K,KAAKA,OAAL,CAAa,UAAb,CAA9K,IAA0M,KAAKA,OAAL,CAAa,UAAb,CAA1M,IAAsO,KAAKA,OAAL,CAAa,aAAb,CAAtO,IAAqQ,KAAKA,OAAL,CAAa,aAAb,CAArQ,IAAoS,KAAKA,OAAL,CAAa,WAAb,CAApS,IAAiU,KAAKA,OAAL,CAAa,cAAb,CAAjU,IAAiW,KAAKA,OAAL,CAAa,uBAAb,CAAjW,IAA0Y,KAAKA,OAAL,CAAa,cAAb,CAA1Y,IAA0a,KAAKA,OAAL,CAAa,cAAb,CAA9a,EAA4c;QAC3c,KAAKY,UAAL;;QACA,KAAKC,UAAL,CAAgBC,GAAhB,CAAoB,MAApB,EAA4B,EAA5B;QACA,KAAK1B,cAAL,GAAsB,KAAtB;MACA;;MAED,IAAI,KAAKE,uBAAL,IAAgC,CAAC,KAAKyB,UAAtC,IAAoD,KAAKT,GAAL,CAAS,UAAT,EAAqB,IAArB,CAAxD,EAAoF;QACnF,KAAKU,mBAAL;;QACA,KAAK1B,uBAAL,GAA+B,KAA/B;MACA;;MAED,KAAK2B,UAAL;;MAEA,IAAI,KAAKR,UAAL,IAAmB,KAAKC,YAAxB,IAAwC,KAAKV,OAAL,CAAa,OAAb,CAAxC,IAAiE,KAAKA,OAAL,CAAa,KAAb,CAAjE,IAAwF,KAAKW,cAAL,CAAoB,KAApB,CAAxF,IAAsH,KAAKA,cAAL,CAAoB,cAApB,CAAtH,IAA6J,KAAKA,cAAL,CAAoB,cAApB,CAA7J,IAAoM,KAAKA,cAAL,CAAoB,KAApB,CAApM,IAAkO,KAAKA,cAAL,CAAoB,MAApB,CAAlO,IAAiQ,KAAKA,cAAL,CAAoB,OAApB,CAAjQ,IAAiS,KAAKA,cAAL,CAAoB,QAApB,CAAjS,IAAkU,KAAKX,OAAL,CAAa,aAAb,CAAtU,EAAmW;QAClW,KAAKkB,kBAAL;;QACA,KAAKC,iBAAL;;QACA,KAAKC,iBAAL;MACA;;MAED,KAAKC,UAAL,GAAkB,KAAKC,SAAL,EAAlB;IAEA;;;;;;WAED,aAEC;;;;;;WAED,UAAsBC,KAAtB,EAAmC;MAClC,IAAMC,YAAY,GAAG,KAAKlB,GAAL,CAAS,cAAT,CAArB;MACA,IAAMmB,SAAS,GAAG,KAAKC,kBAAL,EAAlB;MAEA,IAAIC,IAAI,GAAG,EAAX;;MAEA,IAAIH,YAAJ,EAAkB;QACjBG,IAAI,GAAGF,SAAS,CAACG,MAAV,CAAiBL,KAAjB,EAAwBC,YAAxB,CAAP;MACA,CAFD,MAGK;QACJG,IAAI,GAAGF,SAAS,CAACG,MAAV,CAAiBL,KAAjB,EAAwBM,SAAxB,EAAmC,KAAKC,UAAL,CAAgB,mBAAhB,CAAnC,CAAP;MACA;;MACD,OAAOH,IAAP;IACA;;;;;;WAED;MACC,IAAMI,GAAG,GAAG,KAAKD,UAAL,CAAgB,KAAhB,CAAZ;MACA,IAAME,GAAG,GAAG,KAAKF,UAAL,CAAgB,KAAhB,CAAZ;;MAEA,IAAIhD,KAAK,CAACmD,QAAN,CAAeF,GAAf,KAAuBjD,KAAK,CAACmD,QAAN,CAAeD,GAAf,CAA3B,EAAgD;QAE/C,IAAME,WAAW,GAAG,KAAK5B,GAAL,CAAS,aAAT,CAApB;QACA,IAAM6B,IAAI,GAAG,KAAKL,UAAL,CAAgB,MAAhB,CAAb;QACA,IAAMM,YAAY,GAAG,KAAKN,UAAL,CAAgB,cAAhB,CAArB;QACA,IAAMO,YAAY,GAAG,KAAKP,UAAL,CAAgB,cAAhB,IAAmCK,IAAxD;QAEA,IAAIZ,KAAK,GAAGa,YAAY,GAAGD,IAA3B;QACA,IAAIG,CAAC,GAAG,CAAR;QACA,IAAIC,eAAe,GAAG,CAAtB;QACA,IAAIC,MAAM,GAAGT,GAAb;;QAEA,IAAIG,WAAJ,EAAiB;UAChBX,KAAK,GAAG,KAAKkB,eAAb;;UAEA,IAAIlB,KAAK,GAAGa,YAAZ,EAA0B;YACzB,OAAOb,KAAK,GAAGa,YAAf,EAA6B;cAC5Bb,KAAK,IAAIY,IAAT;YACA;UACD;;UAEDK,MAAM,GAAGjB,KAAT;;UAEA,IAAIiB,MAAM,IAAI,CAAd,EAAiB;YAChBA,MAAM,GAAG,CAAT;;YACA,IAAIL,IAAI,GAAG,CAAX,EAAc;cACbK,MAAM,GAAGL,IAAT;YACA;UACD;;UAEDI,eAAe,GAAGG,IAAI,CAACC,GAAL,CAASN,YAAY,GAAGF,IAAxB,IAAgCO,IAAI,CAACE,MAArC,GAA8CF,IAAI,CAACC,GAAL,CAASH,MAAT,IAAmBE,IAAI,CAACE,MAAxF;;UAEA,IAAIL,eAAe,GAAG,CAAtB,EAAyB;YACxBhB,KAAK,GAAGmB,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACC,GAAL,CAASH,MAAT,IAAmBE,IAAI,CAACE,MAAxB,GAAiC,CAA9C,CAAR;UACA;QACD;;QAED,IAAIE,QAAQ,GAAG,CAACC,QAAhB;;QACA,OAAOxB,KAAK,GAAGc,YAAf,EAA6B;UAC5B,IAAIW,QAAQ,SAAZ;;UACA,IAAI,KAAKC,SAAL,CAAeC,MAAf,GAAwBZ,CAAC,GAAG,CAAhC,EAAmC;YAClCU,QAAQ,GAAG,IAAIrE,QAAJ,CAAa,IAAb,EAAmBkD,SAAnB,EAA8B,EAA9B,CAAX;;YACA,KAAKsB,UAAL,CAAgBC,IAAhB,CAAqBJ,QAArB;;YACA,KAAKK,eAAL,CAAqBL,QAArB;UACA,CAJD,MAKK;YACJA,QAAQ,GAAG,KAAKC,SAAL,CAAeX,CAAf,CAAX;UACA;;UAED,KAAKgB,aAAL,CAAmBN,QAAnB,EAA6B,EAA7B;;UAEA,IAAIA,QAAQ,CAACO,QAAT,EAAJ,EAAyB;YACxBP,QAAQ,CAACQ,IAAT;UACA;;UAEDR,QAAQ,CAACS,MAAT,CAAgB,OAAhB,EAAyBlC,KAAzB;UAEA,IAAMmC,KAAK,GAAGV,QAAQ,CAAC1C,GAAT,CAAa,OAAb,CAAd;;UACA,IAAIoD,KAAJ,EAAW;YACVA,KAAK,CAAC5C,GAAN,CAAU,MAAV,EAAkB,KAAK6C,WAAL,CAAiBpC,KAAjB,CAAlB;UACA;;UAED,KAAKqC,gBAAL,CAAsBZ,QAAtB;;UAEA,IAAI,CAACd,WAAL,EAAkB;YACjBX,KAAK,IAAIY,IAAT;UACA,CAFD,MAGK;YACJ,IAAII,eAAe,GAAG,CAAtB,EAAyB;cACxBhB,KAAK,GAAGmB,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACC,GAAL,CAASH,MAAT,IAAmBE,IAAI,CAACE,MAAxB,GAAiCN,CAAjC,GAAqC,CAAlD,CAAR;YACA,CAFD,MAGK;cACJf,KAAK,IAAIY,IAAT;YACA;UACD;;UAED,IAAIW,QAAQ,IAAIvB,KAAhB,EAAuB;YACtB;UACA;;UAED,IAAIsC,SAAS,GAAGnB,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAAS5B,IAAT,CAAT,IAA2BO,IAAI,CAACE,MAA3C,CAAb,CAAhB;;UACA,IAAIiB,SAAS,GAAG,CAAhB,EAAmB;YAClB;YACA,IAAIG,QAAQ,GAAGtB,IAAI,CAACuB,KAAL,CAAWvB,IAAI,CAACqB,GAAL,CAASrB,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAASF,SAAT,CAAT,IAAgCnB,IAAI,CAACE,MAA9C,CAAX,IAAoE,CAAnF,CAFkB,CAGlB;;YACArB,KAAK,GAAGvC,KAAK,CAACiF,KAAN,CAAY1C,KAAZ,EAAmByC,QAAnB,CAAR;UACA;;UACD1B,CAAC;UAEDQ,QAAQ,GAAGvB,KAAX;QACA;;QAED,KAAK,IAAI2C,CAAC,GAAG5B,CAAb,EAAgB4B,CAAC,GAAG,KAAKjB,SAAL,CAAeC,MAAnC,EAA2CgB,CAAC,EAA5C,EAAgD;UAC/C,KAAKjB,SAAL,CAAeiB,CAAf,EAAkBC,IAAlB;QACA;;QAEDpF,MAAM,CAACqF,IAAP,CAAY,KAAKC,MAAjB,EAAyB,UAACA,MAAD,EAAO;UAC/B,IAAIA,MAAM,CAACC,MAAX,EAAmB;YAClBD,MAAM,CAACE,cAAP;UACA;QACD,CAJD;;QAMA,KAAKC,YAAL;MACA;IACD;;;;;;WAGD,UAAwBxB,QAAxB,EAAuEyB,KAAvE,EAAqF;MACpF,IAAIC,QAAQ,GAAG,KAAKpE,GAAL,CAAS,UAAT,CAAf;MACA,IAAIiB,KAAK,GAAGyB,QAAQ,CAAC1C,GAAT,CAAa,OAAb,CAAZ;MACA,IAAIqE,QAAQ,GAAG3B,QAAQ,CAAC1C,GAAT,CAAa,UAAb,CAAf;MAEA,IAAIsE,QAAQ,GAAG,KAAKC,eAAL,CAAqBtD,KAArB,CAAf;MAEA,IAAIuD,WAAW,GAAGF,QAAlB;MACA,IAAIG,eAAe,GAAG,KAAKF,eAAL,CAAqBtD,KAAK,GAAG,KAAKO,UAAL,CAAgB,MAAhB,CAA7B,CAAtB;;MAEA,IAAIhD,KAAK,CAACmD,QAAN,CAAe0C,QAAf,CAAJ,EAA8B;QAC7BG,WAAW,GAAG,KAAKD,eAAL,CAAqBF,QAArB,CAAd;QACAI,eAAe,GAAGD,WAAlB;MACA;;MAED,IAAI9B,QAAQ,CAAC1C,GAAT,CAAa,SAAb,CAAJ,EAA6B;QAC5B,IAAIqE,QAAQ,IAAI,IAAhB,EAAsB;UACrBI,eAAe,GAAGH,QAAlB;QACA;MACD;;MAEDF,QAAQ,CAACM,WAAT,CAAqBhC,QAAQ,CAAC1C,GAAT,CAAa,OAAb,CAArB,EAA4CsE,QAA5C,EAAsDE,WAAtD,EAAmEL,KAAnE;MAEA,IAAMQ,IAAI,GAAGjC,QAAQ,CAAC1C,GAAT,CAAa,MAAb,CAAb;MACAoE,QAAQ,CAACQ,UAAT,CAAoBD,IAApB,EAA0BL,QAA1B,EAAoCE,WAApC;;MACA,IAAIG,IAAJ,EAAU;QACT,IAAI1D,KAAK,IAAI,KAAKjB,GAAL,CAAS,WAAT,EAAsB,CAAtB,CAAb,EAAuC;UACtC2E,IAAI,CAACtF,MAAL,CAAY,MAAZ;;UACAsF,IAAI,CAACE,YAAL;QACA,CAHD,MAIK,IAAIF,IAAI,CAACG,MAAL,CAAY,MAAZ,CAAJ,EAAyB;UAC7BH,IAAI,CAACI,SAAL,CAAe,MAAf;;UACAJ,IAAI,CAACE,YAAL;QACA;MACD;;MAEDT,QAAQ,CAACY,UAAT,CAAoBtC,QAAQ,CAAC1C,GAAT,CAAa,MAAb,CAApB,EAA0CsE,QAA1C,EAAoDE,WAApD,EAAiEL,KAAjE;MACAC,QAAQ,CAACa,UAAT,CAAoBvC,QAAQ,CAAC1C,GAAT,CAAa,UAAb,CAApB,EAA8CsE,QAA9C,EAAwDG,eAAxD;;MAEA,KAAKS,cAAL,CAAoBxC,QAApB;;MACA0B,QAAQ,CAACe,YAAT,CAAsBzC,QAAQ,CAAC1C,GAAT,CAAa,QAAb,CAAtB,EAA8CsE,QAA9C,EAAwDE,WAAxD;;MAEA,IAAI,CAAC9B,QAAQ,CAAC1C,GAAT,CAAa,SAAb,CAAL,EAA8B;QAC7B,IAAMoF,QAAQ,GAAG,KAAKpF,GAAL,CAAS,UAAT,CAAjB;;QACA,IAAIoF,QAAJ,EAAc;UACbA,QAAQ,CAAC1C,QAAD,CAAR;QACA;MACD;IACD;;;;;;WAGD;MACC,IAAIZ,YAAY,GAAW,KAAKuD,eAAL,CAAqB,KAAKrF,GAAL,CAAS,OAAT,EAAkB,CAAlB,CAArB,CAA3B;MACA,IAAI+B,YAAY,GAAW,KAAKsD,eAAL,CAAqB,KAAKrF,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAArB,CAA3B;MAEA,IAAMsF,SAAS,GAAG,KAAKtF,GAAL,CAAS,UAAT,EAAqBsF,SAArB,EAAlB;;MACA,IAAIC,UAAU,GAAgB,KAAKC,aAAL,CAAmB1D,YAAnB,EAAiCC,YAAjC,EAA+CuD,SAA/C,EAA0D,IAA1D,CAA9B;;MAEA,IAAIG,iBAAiB,GAAG9G,MAAM,CAAC+G,aAAP,CAAqBH,UAAU,CAAC1D,IAAhC,CAAxB;MACA,KAAKzC,aAAL,CAAmB,mBAAnB,EAAwCqG,iBAAxC;MAEA3D,YAAY,GAAGpD,KAAK,CAACiF,KAAN,CAAY7B,YAAZ,EAA0B2D,iBAA1B,CAAf;MACA1D,YAAY,GAAGrD,KAAK,CAACiF,KAAN,CAAY5B,YAAZ,EAA0B0D,iBAA1B,CAAf;MAEAF,UAAU,GAAG,KAAKC,aAAL,CAAmB1D,YAAnB,EAAiCC,YAAjC,EAA+CuD,SAA/C,EAA0D,IAA1D,CAAb;MAEA,IAAIzD,IAAI,GAAG0D,UAAU,CAAC1D,IAAtB;MACAC,YAAY,GAAGyD,UAAU,CAAC9D,GAA1B;MACAM,YAAY,GAAGwD,UAAU,CAAC7D,GAA1B;;MAEA,IAAI,KAAKF,UAAL,CAAgB,cAAhB,MAAoCM,YAApC,IAAoD,KAAKN,UAAL,CAAgB,cAAhB,MAAoCO,YAAxF,IAAwG,KAAKP,UAAL,CAAgB,MAAhB,MAA4BK,IAAxI,EAA8I;QAC7I;QACA,KAAKzC,aAAL,CAAmB,cAAnB,EAAmC0C,YAAnC;QACA,KAAK1C,aAAL,CAAmB,cAAnB,EAAmC2C,YAAnC;QACA,KAAK3C,aAAL,CAAmB,MAAnB,EAA2ByC,IAA3B;MACA;IACD;;EAED;;;;;;;;;;;;WAOA,UAAuByC,QAAvB,EAAuC;MACtC,IAAM7C,GAAG,GAAG,KAAKD,UAAL,CAAgB,KAAhB,CAAZ;MACA,IAAME,GAAG,GAAG,KAAKF,UAAL,CAAgB,KAAhB,CAAZ;;MAEA,IAAI,CAAC,KAAKxB,GAAL,CAAS,aAAT,CAAL,EAA8B;QAC7B,OAAOsE,QAAQ,IAAI5C,GAAG,GAAGD,GAAV,CAAR,GAAyBA,GAAhC;MACA,CAFD,MAGK;QACJ,OAAOW,IAAI,CAACG,GAAL,CAASH,IAAI,CAACuD,CAAd,EAAiB,CAACrB,QAAQ,IAAKlC,IAAI,CAACC,GAAL,CAASX,GAAT,IAAgBU,IAAI,CAACE,MAArB,GAA8BF,IAAI,CAACC,GAAL,CAASZ,GAAT,IAAgBW,IAAI,CAACE,MAAxD,CAAR,GAA2EF,IAAI,CAACC,GAAL,CAASZ,GAAT,IAAgBW,IAAI,CAACE,MAAjG,IAA2GF,IAAI,CAACE,MAAjI,CAAP;MACA;IACD;;EAED;;;;;;;;;;;WAMA,UAAuBrB,KAAvB,EAAoC;MAEnC,IAAMQ,GAAG,GAAG,KAAKD,UAAL,CAAgB,KAAhB,CAAZ;MACA,IAAME,GAAG,GAAG,KAAKF,UAAL,CAAgB,KAAhB,CAAZ;;MAEA,IAAI,CAAC,KAAKxB,GAAL,CAAS,aAAT,CAAL,EAA8B;QAC7B,OAAO,CAACiB,KAAK,GAAGQ,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAP;MACA,CAFD,MAGK;QACJ,IAAIR,KAAK,IAAI,CAAb,EAAgB;UACf,IAAI2E,WAAW,GAAG,KAAK5F,GAAL,CAAS,aAAT,CAAlB;;UACA,IAAIxB,KAAK,CAACmD,QAAN,CAAeiE,WAAf,CAAJ,EAAiC;YAChC3E,KAAK,GAAG2E,WAAR;UACA;QACD;;QACD,OAAO,CAACxD,IAAI,CAACC,GAAL,CAASpB,KAAT,IAAkBmB,IAAI,CAACE,MAAvB,GAAgCF,IAAI,CAACC,GAAL,CAASZ,GAAT,IAAgBW,IAAI,CAACE,MAAtD,KAAkEF,IAAI,CAACC,GAAL,CAASX,GAAT,IAAgBU,IAAI,CAACE,MAArB,GAA8BF,IAAI,CAACC,GAAL,CAASZ,GAAT,IAAgBW,IAAI,CAACE,MAArH,CAAP;MACA;IACD;;EAED;;;;;;;;WAGA,UAA4BrB,KAA5B,EAAyC;MAExC,IAAMQ,GAAG,GAAG,KAAKD,UAAL,CAAgB,UAAhB,CAAZ;MACA,IAAME,GAAG,GAAG,KAAKF,UAAL,CAAgB,UAAhB,CAAZ;;MAEA,IAAI,CAAC,KAAKxB,GAAL,CAAS,aAAT,CAAL,EAA8B;QAC7B,OAAO,CAACiB,KAAK,GAAGQ,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAP;MACA,CAFD,MAGK;QACJ,IAAIR,KAAK,IAAI,CAAb,EAAgB;UACf,IAAI2E,WAAW,GAAG,KAAK5F,GAAL,CAAS,aAAT,CAAlB;;UACA,IAAIxB,KAAK,CAACmD,QAAN,CAAeiE,WAAf,CAAJ,EAAiC;YAChC3E,KAAK,GAAG2E,WAAR;UACA;QACD;;QACD,OAAO,CAACxD,IAAI,CAACC,GAAL,CAASpB,KAAT,IAAkBmB,IAAI,CAACE,MAAvB,GAAgCF,IAAI,CAACC,GAAL,CAASZ,GAAT,IAAgBW,IAAI,CAACE,MAAtD,KAAkEF,IAAI,CAACC,GAAL,CAASX,GAAT,IAAgBU,IAAI,CAACE,MAArB,GAA8BF,IAAI,CAACC,GAAL,CAASZ,GAAT,IAAgBW,IAAI,CAACE,MAArH,CAAP;MACA;IACD;;EAED;;;;;;;;;;;;;WAQA,UAAYrB,KAAZ,EAA2B4E,QAA3B,EAA6C7E,SAA7C,EAA8D;MAC7DC,KAAK,GAAGD,SAAS,GAAG,CAACC,KAAK,GAAGD,SAAT,IAAsB6E,QAA1C;MAEA,IAAMvB,QAAQ,GAAG,KAAKC,eAAL,CAAqBtD,KAArB,CAAjB;MACA,OAAO,KAAKhC,SAAL,CAAemF,QAAf,CAAwB0B,oBAAxB,CAA6CxB,QAA7C,CAAP;IACA;;EAED;;;;;;;;;;;;;WAQA,UAAYrD,KAAZ,EAA2B4E,QAA3B,EAA6C7E,SAA7C,EAA8D;MAC7DC,KAAK,GAAGD,SAAS,GAAG,CAACC,KAAK,GAAGD,SAAT,IAAsB6E,QAA1C;MAEA,IAAMvB,QAAQ,GAAG,KAAKC,eAAL,CAAqBtD,KAArB,CAAjB;MACA,OAAO,KAAKhC,SAAL,CAAemF,QAAf,CAAwB0B,oBAAxB,CAA6CxB,QAA7C,CAAP;IACA;;EAED;;;;;;;;WAGA,UAA8B5B,QAA9B,EAAqEqD,KAArE,EAAoFC,aAApF,EAA2GC,YAA3G,EAA+H;MAC9H,OAAO,KAAKhH,SAAL,CAAemF,QAAf,CAAwB0B,oBAAxB,CAA6C,KAAKI,oBAAL,CAA0BxD,QAA1B,EAAoCqD,KAApC,EAA2CC,aAA3C,EAA0DC,YAA1D,CAA7C,CAAP;IACA;;EAED;;;;;;;;WAGA,UAA4BvD,QAA5B,EAAmEqD,KAAnE,EAAkFC,aAAlF,EAAyGC,YAAzG,EAA6H;MAC5H,IAAIhF,KAAK,GAAGyB,QAAQ,CAAC1C,GAAT,CAAa+F,KAAb,CAAZ;MAEA,IAAMI,WAAW,GAAGzD,QAAQ,CAAC1C,GAAT,CAAa,cAAb,CAApB;;MACA,IAAImG,WAAJ,EAAiB;QAChB,IAAMpC,MAAM,GAAGrB,QAAQ,CAAC0D,SAAxB;QACAnF,KAAK,GAAGA,KAAK,GAAGgF,YAAR,GAAuBlC,MAAM,CAACsC,uBAAP,CAA+B3D,QAA/B,EAAyCqD,KAAzC,CAA/B;MACA,CAHD,MAIK;QACJ9E,KAAK,GAAG,KAAKF,UAAL,GAAkB,CAACE,KAAK,GAAG,KAAKF,UAAd,IAA4BkF,YAAtD;MACA;;MAED,OAAO,KAAK1B,eAAL,CAAqBtD,KAArB,CAAP;IACA;;EAED;;;;;;;;WAGA,UAA8ByB,QAA9B,EAAqEqD,KAArE,EAAoFC,aAApF,EAA2GC,YAA3G,EAA+H;MAC9H,OAAO,KAAKhH,SAAL,CAAemF,QAAf,CAAwB0B,oBAAxB,CAA6C,KAAKQ,oBAAL,CAA0B5D,QAA1B,EAAoCqD,KAApC,EAA2CC,aAA3C,EAA0DC,YAA1D,CAA7C,CAAP;IACA;;EAED;;;;;;;;WAGA,UAA4BvD,QAA5B,EAAmEqD,KAAnE,EAAkFC,aAAlF,EAAyGC,YAAzG,EAA6H;MAC5H,IAAIhF,KAAK,GAAGyB,QAAQ,CAAC1C,GAAT,CAAa+F,KAAb,CAAZ;MAEA,IAAMI,WAAW,GAAGzD,QAAQ,CAAC1C,GAAT,CAAa,cAAb,CAApB;;MACA,IAAImG,WAAJ,EAAiB;QAChB,IAAMpC,MAAM,GAAGrB,QAAQ,CAAC0D,SAAxB;QACAnF,KAAK,GAAGA,KAAK,GAAGgF,YAAR,GAAuBlC,MAAM,CAACwC,uBAAP,CAA+B7D,QAA/B,EAAyCqD,KAAzC,CAA/B;MACA,CAHD,MAIK;QACJ9E,KAAK,GAAG,KAAKF,UAAL,GAAkB,CAACE,KAAK,GAAG,KAAKF,UAAd,IAA4BkF,YAAtD;MACA;;MAED,OAAO,KAAK1B,eAAL,CAAqBtD,KAArB,CAAP;IACA;;EAED;;;;;;;;;;WAKA;MACC,OAAO,KAAKsD,eAAL,CAAqB,KAAKvD,SAAL,EAArB,CAAP;IACA;;EAED;;;;;;;;;;;WAMA;MACC,IAAMS,GAAG,GAAGW,IAAI,CAACX,GAAL,CAAS,KAAKD,UAAL,CAAgB,UAAhB,EAA4B,CAACiB,QAA7B,CAAT,EAAiD,KAAKjB,UAAL,CAAgB,cAAhB,EAAgC,CAACiB,QAAjC,CAAjD,CAAZ;MACA,IAAMf,GAAG,GAAGU,IAAI,CAACV,GAAL,CAAS,KAAKF,UAAL,CAAgB,UAAhB,EAA4BiB,QAA5B,CAAT,EAAgD,KAAKjB,UAAL,CAAgB,cAAhB,EAAgCiB,QAAhC,CAAhD,CAAZ;MACA,IAAIzB,SAAS,GAAG,KAAKhB,GAAL,CAAS,WAAT,EAAsB,CAAtB,CAAhB;;MAEA,IAAIgB,SAAS,GAAGS,GAAhB,EAAqB;QACpBT,SAAS,GAAGS,GAAZ;MACA;;MAED,IAAIT,SAAS,GAAGU,GAAhB,EAAqB;QACpBV,SAAS,GAAGU,GAAZ;MACA;;MAED,OAAOV,SAAP;IACA;;EAED;;;;;;;;WAGA,UAAoBC,KAApB,EAAiC;MAChC,OAAOA,KAAP;IACA;;;;;;WAED,UAAuBY,IAAvB,EAAmC;MAClC;MACA,IAAI,IAAIA,IAAJ,KAAa,CAAjB,EAAoB;QACnBA,IAAI,IAAI,CAAR;QACA,OAAO,KAAK2E,YAAL,CAAkB3E,IAAlB,CAAP;MACA;;MACD,OAAOA,IAAP;IACA;;;;;;WAED,UAAkBJ,GAAlB,EAA6B;MAC5B,OAAOA,GAAP;IACA;;;;;;WAED,UAAkBC,GAAlB,EAA6B;MAC5B,OAAOA,GAAP;IACA;;;;;;WAED;MACC,IAAI,KAAK1B,GAAL,CAAS,iBAAT,CAAJ,EAAiC;QAChC,IAAI+D,MAAM,GAAG,KAAKA,MAAL,CAAY,CAAZ,CAAb;;QACA,IAAIA,MAAJ,EAAY;UACX,IAAI0C,UAAU,GAAG1C,MAAM,CAAC0C,UAAP,EAAjB;;UAEA,IAAI1C,MAAM,CAACpB,SAAP,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;YAEhC,IAAI6D,UAAU,GAAG,CAAjB,EAAoB;cACnBA,UAAU;YACV;;YACD,IAAIC,QAAQ,GAAG3C,MAAM,CAAC2C,QAAP,EAAf;;YACA,IAAIA,QAAQ,GAAG3C,MAAM,CAACpB,SAAP,CAAiBC,MAAhC,EAAwC;cACvC8D,QAAQ;YACR;;YAED,IAAIC,OAAJ;YACA,IAAIC,IAAJ;;YAEA,IAAI7C,MAAM,CAAC/D,GAAP,CAAW,OAAX,KAAuB,IAA3B,EAAiC;cAChC2G,OAAK,GAAG,QAAR;cACAC,IAAE,GAAG,KAAL;YACA,CAHD,MAIK,IAAI7C,MAAM,CAAC/D,GAAP,CAAW,OAAX,KAAuB,IAA3B,EAAiC;cACrC2G,OAAK,GAAG,QAAR;cACAC,IAAE,GAAG,KAAL;YACA;;YAED,IAAIC,cAAY,GAAGF,OAAK,GAAG,SAA3B;;YAEA,IAAIA,OAAJ,EAAW;sCACD3E,GAAC;gBACT,IAAI8E,GAAG,GAAG,CAAV;gBACA,IAAIC,KAAK,GAAG,CAAZ;gBAEAtI,MAAM,CAACqF,IAAP,CAAYkD,OAAKjD,MAAjB,EAAyB,UAACA,MAAD,EAAO;kBAC/B,IAAI,CAACA,MAAM,CAAC/D,GAAP,CAAW,kBAAX,CAAL,EAAqC;oBACpC,IAAI0C,QAAQ,GAAGqB,MAAM,CAACpB,SAAP,CAAiBX,CAAjB,CAAf;;oBACA,IAAIU,QAAJ,EAAc;sBACb,IAAIzB,KAAK,GAAGyB,QAAQ,CAAC1C,GAAT,CAAa6G,cAAb,IAAoC9C,MAAM,CAAC/D,GAAP,CAAW4G,IAAX,CAAhD;;sBAEA,IAAI,CAACpI,KAAK,CAACyI,KAAN,CAAYhG,KAAZ,CAAL,EAAyB;wBACxB6F,GAAG,IAAI7F,KAAP;wBACA8F,KAAK,IAAI3E,IAAI,CAACqB,GAAL,CAASxC,KAAT,CAAT;sBACA;oBACD;kBACD;gBACD,CAZD;gBAcAxC,MAAM,CAACqF,IAAP,CAAYkD,OAAKjD,MAAjB,EAAyB,UAACA,MAAD,EAAO;kBAC/B,IAAI,CAACA,MAAM,CAAC/D,GAAP,CAAW,kBAAX,CAAL,EAAqC;oBACpC,IAAI0C,QAAQ,GAAGqB,MAAM,CAACpB,SAAP,CAAiBX,CAAjB,CAAf;;oBACA,IAAIU,QAAJ,EAAc;sBACb,IAAIzB,KAAK,GAAGyB,QAAQ,CAAC1C,GAAT,CAAa6G,cAAb,IAAoC9C,MAAM,CAAC/D,GAAP,CAAW4G,IAAX,CAAhD;;sBAEA,IAAI,CAACpI,KAAK,CAACyI,KAAN,CAAYhG,KAAZ,CAAL,EAAyB;wBACxByB,QAAQ,CAAClC,GAAT,CAAcmG,OAAK,GAAG,OAAtB,EAAuCI,KAAvC;wBACArE,QAAQ,CAAClC,GAAT,CAAcmG,OAAK,GAAG,KAAtB,EAAqCG,GAArC;wBACApE,QAAQ,CAAClC,GAAT,CAAcmG,OAAK,GAAG,cAAtB,EAA8C1F,KAAK,GAAG8F,KAAR,GAAgB,GAA9D;sBACA;oBACD;kBACD;gBACD,CAbD;;;;;cAlBD,KAAK,IAAI/E,CAAC,GAAGyE,UAAb,EAAyBzE,CAAC,GAAG0E,QAA7B,EAAuC1E,CAAC,EAAxC,EAA0C;wBAAjCA;cAgCR;YACD;UACD;QACD;MACD;IACD;;;;;;WAED;;;MAAA;;MACC,IAAMP,GAAG,GAAG,KAAKD,UAAL,CAAgB,UAAhB,CAAZ;MACA,IAAME,GAAG,GAAG,KAAKF,UAAL,CAAgB,UAAhB,CAAZ;MAEA,IAAM0F,UAAU,GAAG,KAAKlH,GAAL,CAAS,KAAT,CAAnB;MACA,IAAMmH,UAAU,GAAG,KAAKnH,GAAL,CAAS,KAAT,CAAnB;MAEA,IAAIoH,QAAQ,GAAG,KAAKpH,GAAL,CAAS,UAAT,EAAqB,CAArB,CAAf;MACA,IAAIqH,QAAQ,GAAG,KAAKrH,GAAL,CAAS,UAAT,EAAqB,CAArB,CAAf;;MAEA,IAAI,KAAKA,GAAL,CAAS,aAAT,CAAJ,EAA6B;QAC5B,IAAI,KAAKA,GAAL,CAAS,UAAT,KAAwB,IAA5B,EAAkC;UACjCoH,QAAQ,GAAG,GAAX;QACA;;QACD,IAAI,KAAKpH,GAAL,CAAS,UAAT,KAAwB,IAA5B,EAAkC;UACjCqH,QAAQ,GAAG,GAAX;QACA;MACD;;MAED,IAAM/B,SAAS,GAAG,KAAKtF,GAAL,CAAS,UAAT,EAAqBsF,SAArB,EAAlB;MACA,IAAMgC,qBAAqB,GAAG,KAAKtH,GAAL,CAAS,uBAAT,CAA9B;MACA,IAAMuH,YAAY,GAAG,KAAKvH,GAAL,CAAS,cAAT,CAArB;;MAEA,IAAIxB,KAAK,CAACmD,QAAN,CAAeF,GAAf,KAAuBjD,KAAK,CAACmD,QAAN,CAAeD,GAAf,CAA3B,EAAgD;QAC/C,IAAI8F,cAAY,GAAG9F,GAAnB;QACA,IAAI+F,cAAY,GAAGhG,GAAnB;QAEAhD,MAAM,CAACqF,IAAP,CAAY,KAAKC,MAAjB,EAAyB,UAACA,MAAD,EAAO;UAC/B,IAAI,CAACA,MAAM,CAAC/D,GAAP,CAAW,cAAX,CAAL,EAAiC;YAChC,IAAI0H,SAAS,SAAb;YACA,IAAIC,SAAS,SAAb;YACA,IAAMC,cAAc,GAAG7D,MAAM,CAACvC,UAAP,CAAkB,gBAAlB,CAAvB;;YACA,IAAIuC,MAAM,CAAC/D,GAAP,CAAW,OAAX,MAAwBE,KAA5B,EAAkC;cACjC,IAAI,CAAC0H,cAAL,EAAqB;gBACpBF,SAAS,GAAG3D,MAAM,CAACvC,UAAP,CAAkB,eAAlB,EAAmCuC,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAnC,CAAZ;gBACAmG,SAAS,GAAG5D,MAAM,CAACvC,UAAP,CAAkB,eAAlB,EAAmCuC,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAnC,CAAZ;cACA;YACD,CALD,MAMK,IAAIuC,MAAM,CAAC/D,GAAP,CAAW,OAAX,MAAwBE,KAA5B,EAAkC;cACtC,IAAI,CAAC0H,cAAL,EAAqB;gBACpBF,SAAS,GAAG3D,MAAM,CAACvC,UAAP,CAAkB,eAAlB,EAAmCuC,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAnC,CAAZ;gBACAmG,SAAS,GAAG5D,MAAM,CAACvC,UAAP,CAAkB,eAAlB,EAAmCuC,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAnC,CAAZ;cACA;YACD;;YACD,IAAI,CAACuC,MAAM,CAACd,QAAP,EAAD,IAAsB,CAACc,MAAM,CAAC8D,SAAP,EAA3B,EAA+C;cAC9C,IAAIrJ,KAAK,CAACmD,QAAN,CAAe+F,SAAf,CAAJ,EAA+B;gBAC9BF,cAAY,GAAGpF,IAAI,CAACX,GAAL,CAAS+F,cAAT,EAAuBE,SAAvB,CAAf;cACA;;cAED,IAAIlJ,KAAK,CAACmD,QAAN,CAAegG,SAAf,CAAJ,EAA+B;gBAC9BF,cAAY,GAAGrF,IAAI,CAACV,GAAL,CAAS+F,cAAT,EAAuBE,SAAvB,CAAf;cACA;YACD;UACD;QACD,CA3BD;QA6BA,KAAKG,UAAL,CAAgBhE,IAAhB,CAAqB,UAACiE,KAAD,EAAM;UAC1B,IAAIA,KAAK,CAAC/H,GAAN,CAAU,eAAV,CAAJ,EAAgC;YAC/B,IAAIiB,KAAK,GAAG8G,KAAK,CAAC/H,GAAN,CAAU,OAAV,CAAZ;;YACA,IAAIiB,KAAK,IAAI,IAAb,EAAmB;cAClBuG,cAAY,GAAGpF,IAAI,CAACX,GAAL,CAAS+F,cAAT,EAAuBvG,KAAvB,CAAf;cACAwG,cAAY,GAAGrF,IAAI,CAACV,GAAL,CAAS+F,cAAT,EAAuBxG,KAAvB,CAAf;YACA;;YACDA,KAAK,GAAG8G,KAAK,CAAC/H,GAAN,CAAU,UAAV,CAAR;;YACA,IAAIiB,KAAK,IAAI,IAAb,EAAmB;cAClBuG,cAAY,GAAGpF,IAAI,CAACX,GAAL,CAAS+F,cAAT,EAAuBvG,KAAvB,CAAf;cACAwG,cAAY,GAAGrF,IAAI,CAACV,GAAL,CAAS+F,cAAT,EAAuBxG,KAAvB,CAAf;YACA;UACD;QACD,CAbD;;QAeA,IAAIuG,cAAY,GAAGC,cAAnB,EAAiC;UAChCO,YAA+B,CAACP,cAAD,EAAeD,cAAf,CAA/B,EAA2D,CAA3D,GAACA,cAAY,QAAb,EAAeC,cAAY,QAA3B;QACA;;QAED,IAAIjJ,KAAK,CAACmD,QAAN,CAAeuF,UAAf,CAAJ,EAAgC;UAC/B,IAAIK,YAAJ,EAAkB;YACjBC,cAAY,GAAGN,UAAf;UACA,CAFD,MAGK;YACJM,cAAY,GAAG/F,GAAf;UACA;QACD,CAPD,MAQK,IAAI8F,YAAJ,EAAkB;UACtB,IAAI/I,KAAK,CAACmD,QAAN,CAAe,KAAKsG,QAApB,CAAJ,EAAmC;YAClCT,cAAY,GAAG,KAAKS,QAApB;UACA;QACD;;QAED,IAAIzJ,KAAK,CAACmD,QAAN,CAAewF,UAAf,CAAJ,EAAgC;UAC/B,IAAII,YAAJ,EAAkB;YACjBE,cAAY,GAAGN,UAAf;UACA,CAFD,MAGK;YACJM,cAAY,GAAG/F,GAAf;UACA;QACD,CAPD,MAQK,IAAI6F,YAAJ,EAAkB;UACtB,IAAI/I,KAAK,CAACmD,QAAN,CAAe,KAAKuG,QAApB,CAAJ,EAAmC;YAClCT,cAAY,GAAG,KAAKS,QAApB;UACA;QACD;;QAED,IAAIV,cAAY,KAAKC,cAArB,EAAmC;UAClCD,cAAY,IAAI,KAAKW,YAArB;UACAV,cAAY,IAAI,KAAKU,YAArB;;UAEA,IAAIC,WAAW,GAAG,KAAK5C,aAAL,CAAmBgC,cAAnB,EAAiCC,cAAjC,EAA+CnC,SAA/C,EAA0DiC,YAA1D,CAAlB;;UACAC,cAAY,GAAGY,WAAW,CAAC3G,GAA3B;UACAgG,cAAY,GAAGW,WAAW,CAAC1G,GAA3B;QACA;;QAED,IAAI2G,gBAAgB,GAAGb,cAAvB;QACA,IAAIc,gBAAgB,GAAGb,cAAvB;QAEAD,cAAY,IAAI,CAACC,cAAY,GAAGD,cAAhB,IAAgCJ,QAAhD;QACAK,cAAY,IAAI,CAACA,cAAY,GAAGD,cAAhB,IAAgCH,QAAhD;;QAEA,IAAI9B,UAAU,GAAgB,KAAKC,aAAL,CAAmBgC,cAAnB,EAAiCC,cAAjC,EAA+CnC,SAA/C,CAA9B;;QAEAkC,cAAY,GAAGjC,UAAU,CAAC9D,GAA1B;QACAgG,cAAY,GAAGlC,UAAU,CAAC7D,GAA1B;QAEA8F,cAAY,GAAG9I,KAAK,CAAC6J,UAAN,CAAiBf,cAAjB,EAA+B/F,GAA/B,EAAoCC,GAApC,CAAf;QACA+F,cAAY,GAAG/I,KAAK,CAAC6J,UAAN,CAAiBd,cAAjB,EAA+BhG,GAA/B,EAAoCC,GAApC,CAAf,CArG+C,CAuG/C;;QACA6D,UAAU,GAAG,KAAKC,aAAL,CAAmBgC,cAAnB,EAAiCC,cAAjC,EAA+CnC,SAA/C,EAA0D,IAA1D,CAAb;;QAEA,IAAI,CAACiC,YAAL,EAAmB;UAClBC,cAAY,GAAGjC,UAAU,CAAC9D,GAA1B;UACAgG,cAAY,GAAGlC,UAAU,CAAC7D,GAA1B;QACA;;QAED,IAAM7B,YAAY,GAAG,KAAKG,GAAL,CAAS,cAAT,CAArB;;QACA,IAAIH,YAAJ,EAAkB;UACjB0F,UAAU,GAAG,KAAKiD,SAAL,CAAehB,cAAf,EAA6BC,cAA7B,EAA2ClC,UAAU,CAAC1D,IAAtD,EAA4DhC,YAAY,CAAC2B,UAAb,CAAwB,mBAAxB,EAA6C3B,YAAY,CAAC2B,UAAb,CAAwB,UAAxB,EAAoC,CAApC,CAA7C,CAA5D,EAAkJ3B,YAAY,CAAC2B,UAAb,CAAwB,mBAAxB,EAA6C3B,YAAY,CAAC2B,UAAb,CAAwB,UAAxB,EAAoC,CAApC,CAA7C,CAAlJ,EAAwO3B,YAAY,CAAC2B,UAAb,CAAwB,oBAAxB,EAA8C3B,YAAY,CAAC2B,UAAb,CAAwB,MAAxB,EAAgC,CAAhC,CAA9C,CAAxO,CAAb;UAEAgG,cAAY,GAAGjC,UAAU,CAAC9D,GAA1B;UACAgG,cAAY,GAAGlC,UAAU,CAAC7D,GAA1B;QACA;;QAED,IAAI6F,YAAJ,EAAkB;UACjB,IAAI/I,KAAK,CAACmD,QAAN,CAAeuF,UAAf,CAAJ,EAAgC;YAC/BM,cAAY,GAAGpF,IAAI,CAACV,GAAL,CAAS8F,cAAT,EAAuBN,UAAvB,CAAf;UACA;;UAED,IAAI1I,KAAK,CAACmD,QAAN,CAAewF,UAAf,CAAJ,EAAgC;YAC/BM,cAAY,GAAGrF,IAAI,CAACX,GAAL,CAASgG,cAAT,EAAuBN,UAAvB,CAAf;UACA;QAED;;QAED,IAAIG,qBAAJ,EAA2B;UAC1BE,cAAY,GAAGa,gBAAgB,GAAG,CAACZ,cAAY,GAAGD,cAAhB,IAAgCJ,QAAlE;UACAK,cAAY,GAAGa,gBAAgB,GAAG,CAACb,cAAY,GAAGD,cAAhB,IAAgCH,QAAlE;QACA;;QAED,IAAI,KAAKrH,GAAL,CAAS,aAAT,CAAJ,EAA6B;UAE5B,IAAIwH,cAAY,IAAI,CAApB,EAAuB;YACtBA,cAAY,GAAGa,gBAAgB,IAAI,IAAIjG,IAAI,CAACX,GAAL,CAAS2F,QAAT,EAAmB,IAAnB,CAAR,CAA/B;UACA;;UAED,IAAII,cAAY,GAAG/F,GAAnB,EAAwB;YACvB+F,cAAY,GAAG/F,GAAf;UACA;;UACD,IAAIgG,cAAY,GAAG/F,GAAnB,EAAwB;YACvB+F,cAAY,GAAG/F,GAAf;UACA;QACD;;QAED,IAAI+G,KAAK,GAAG,KAAKC,oBAAL,CAA0BlB,cAA1B,CAAZ;QACA,IAAImB,GAAG,GAAG,KAAKD,oBAAL,CAA0BjB,cAA1B,CAAV;QAEA,KAAKrI,aAAL,CAAmB,mBAAnB,EAAwCoI,cAAxC;QACA,KAAKpI,aAAL,CAAmB,mBAAnB,EAAwCqI,cAAxC;QACA,KAAKrI,aAAL,CAAmB,oBAAnB,EAAyCmG,UAAU,CAAC1D,IAApD;QAEA,KAAK+G,IAAL,CAAUH,KAAV,EAAiBE,GAAjB;MACA;IACD;;;;;;WAGD;MAAA;;MACC,IAAIzB,UAAU,GAAG,KAAKlH,GAAL,CAAS,KAAT,CAAjB;MACA,IAAImH,UAAU,GAAG,KAAKnH,GAAL,CAAS,KAAT,CAAjB;MAEA,IAAIyB,GAAG,GAAGgB,QAAV;MACA,IAAIf,GAAG,GAAG,CAACe,QAAX;MAEA,IAAI2E,QAAQ,GAAG,KAAKpH,GAAL,CAAS,UAAT,EAAqB,CAArB,CAAf;MACA,IAAIqH,QAAQ,GAAG,KAAKrH,GAAL,CAAS,UAAT,EAAqB,CAArB,CAAf;;MAEA,IAAI,KAAKA,GAAL,CAAS,aAAT,CAAJ,EAA6B;QAC5B,IAAI,KAAKA,GAAL,CAAS,UAAT,KAAwB,IAA5B,EAAkC;UACjCoH,QAAQ,GAAG,GAAX;QACA;;QACD,IAAI,KAAKpH,GAAL,CAAS,UAAT,KAAwB,IAA5B,EAAkC;UACjCqH,QAAQ,GAAG,GAAX;QACA;MACD;;MAED,IAAIwB,OAAO,GAAGpG,QAAd;MAEAhE,MAAM,CAACqF,IAAP,CAAY,KAAKC,MAAjB,EAAyB,UAACA,MAAD,EAAO;QAC/B,IAAI,CAACA,MAAM,CAAC/D,GAAP,CAAW,cAAX,CAAL,EAAiC;UAChC,IAAI0H,SAAS,SAAb;UACA,IAAIC,SAAS,SAAb;;UACA,IAAI5D,MAAM,CAAC/D,GAAP,CAAW,OAAX,MAAwBE,KAA5B,EAAkC;YACjCwH,SAAS,GAAG3D,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAZ;YACAmG,SAAS,GAAG5D,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAZ;UACA,CAHD,MAIK,IAAIuC,MAAM,CAAC/D,GAAP,CAAW,OAAX,MAAwBE,KAA5B,EAAkC;YACtCwH,SAAS,GAAG3D,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAZ;YACAmG,SAAS,GAAG5D,MAAM,CAACvC,UAAP,CAAkB,MAAlB,CAAZ;UACA;;UAED,IAAIhD,KAAK,CAACmD,QAAN,CAAe+F,SAAf,KAA6BlJ,KAAK,CAACmD,QAAN,CAAegG,SAAf,CAAjC,EAA4D;YAC3DlG,GAAG,GAAGW,IAAI,CAACX,GAAL,CAASA,GAAT,EAAciG,SAAd,CAAN;YACAhG,GAAG,GAAGU,IAAI,CAACV,GAAL,CAASA,GAAT,EAAciG,SAAd,CAAN;YAEA,IAAImB,IAAI,GAAGnB,SAAS,GAAGD,SAAvB;;YAEA,IAAIoB,IAAI,IAAI,CAAZ,EAAe;cACdA,IAAI,GAAG1G,IAAI,CAACqB,GAAL,CAASkE,SAAS,GAAG,GAArB,CAAP;YACA;;YAED,IAAImB,IAAI,GAAGD,OAAX,EAAoB;cACnBA,OAAO,GAAGC,IAAV;YACA;UACD;QACD;MACD,CA5BD;MA8BA,KAAKhB,UAAL,CAAgBhE,IAAhB,CAAqB,UAACiE,KAAD,EAAM;QAC1B,IAAIA,KAAK,CAAC/H,GAAN,CAAU,eAAV,CAAJ,EAAgC;UAC/B,IAAIiB,KAAK,GAAG8G,KAAK,CAAC/H,GAAN,CAAU,OAAV,CAAZ;;UACA,IAAIiB,KAAK,IAAI,IAAb,EAAmB;YAClBQ,GAAG,GAAGW,IAAI,CAACX,GAAL,CAASA,GAAT,EAAcR,KAAd,CAAN;YACAS,GAAG,GAAGU,IAAI,CAACV,GAAL,CAASA,GAAT,EAAcT,KAAd,CAAN;UACA;;UACDA,KAAK,GAAG8G,KAAK,CAAC/H,GAAN,CAAU,UAAV,CAAR;;UACA,IAAIiB,KAAK,IAAI,IAAb,EAAmB;YAClBQ,GAAG,GAAGW,IAAI,CAACX,GAAL,CAASA,GAAT,EAAcR,KAAd,CAAN;YACAS,GAAG,GAAGU,IAAI,CAACV,GAAL,CAASA,GAAT,EAAcT,KAAd,CAAN;UACA;QACD;MACD,CAbD;;MAeA,IAAI,KAAKjB,GAAL,CAAS,aAAT,CAAJ,EAA6B;QAC5B,IAAI4F,WAAW,GAAG,KAAK5F,GAAL,CAAS,aAAT,CAAlB;;QACA,IAAIxB,KAAK,CAACmD,QAAN,CAAeiE,WAAf,CAAJ,EAAiC;UAChC,IAAInE,GAAG,IAAI,CAAX,EAAc;YACbA,GAAG,GAAGmE,WAAN;UACA;QACD;;QACD,IAAInE,GAAG,IAAI,CAAX,EAAc;UACb,IAAIsH,KAAJ,CAAU,kDAAV;QACA;MACD;;MAED,IAAItH,GAAG,KAAK,CAAR,IAAaC,GAAG,KAAK,CAAzB,EAA4B;QAC3BA,GAAG,GAAG,GAAN;QACAD,GAAG,GAAG,CAAC,GAAP;MACA;;MAED,IAAIjD,KAAK,CAACmD,QAAN,CAAeuF,UAAf,CAAJ,EAAgC;QAC/BzF,GAAG,GAAGyF,UAAN;MACA;;MACD,IAAI1I,KAAK,CAACmD,QAAN,CAAewF,UAAf,CAAJ,EAAgC;QAC/BzF,GAAG,GAAGyF,UAAN;MACA,CAxFF,CA0FC;;;MACA,IAAI1F,GAAG,KAAKgB,QAAR,IAAoBf,GAAG,KAAK,CAACe,QAAjC,EAA2C;QAC1C;MACA;;MAED,IAAMuG,UAAU,GAAGvH,GAAnB;MACA,IAAMwH,UAAU,GAAGvH,GAAnB,CAhGD,CAkGC;;MACA,IAAIwH,UAAU,GAAG,KAAKC,QAAL,CAAcC,IAAd,CAAmB,KAAnB,EAA0B3H,GAA1B,CAAjB;MACA,IAAI4H,UAAU,GAAG,KAAKF,QAAL,CAAcC,IAAd,CAAmB,KAAnB,EAA0B1H,GAA1B,CAAjB;;MAEA,IAAIlD,KAAK,CAACmD,QAAN,CAAeuH,UAAf,CAAJ,EAAgC;QAC/BzH,GAAG,GAAGyH,UAAN;MACA;;MAED,IAAI1K,KAAK,CAACmD,QAAN,CAAe0H,UAAf,CAAJ,EAAgC;QAC/B3H,GAAG,GAAG2H,UAAN;MACA,CA5GF,CA8GC;;;MACA5H,GAAG,GAAG,KAAK6H,OAAL,CAAa7H,GAAb,CAAN;MACAC,GAAG,GAAG,KAAK6H,OAAL,CAAa7H,GAAb,CAAN,CAhHD,CAkHC;;MACA,IAAIA,GAAG,GAAGD,GAAN,IAAa,IAAIW,IAAI,CAACG,GAAL,CAAS,EAAT,EAAa,EAAb,CAArB,EAAuC;QACtC,IAAIb,GAAG,GAAGD,GAAN,KAAc,CAAlB,EAAqB;UACpB,KAAK0G,YAAL,GAAoB,CAACzG,GAAG,GAAGD,GAAP,IAAc,CAAlC;QACA,CAFD,MAGK;UACJ,KAAK+H,SAAL,CAAe9H,GAAf;QACA;;QAEDD,GAAG,IAAI,KAAK0G,YAAZ;QACAzG,GAAG,IAAI,KAAKyG,YAAZ;MACA,CA7HF,CA+HC;;;MACA1G,GAAG,IAAI,CAACC,GAAG,GAAGD,GAAP,IAAc2F,QAArB;MACA1F,GAAG,IAAI,CAACA,GAAG,GAAGD,GAAP,IAAc4F,QAArB;;MAEA,IAAI,KAAKrH,GAAL,CAAS,aAAT,CAAJ,EAA6B;QAC5B;QACA,IAAIyB,GAAG,GAAG,CAAN,IAAWuH,UAAU,IAAI,CAA7B,EAAgC;UAC/BvH,GAAG,GAAG,CAAN;QACA,CAJ2B,CAK5B;;;QACA,IAAIC,GAAG,GAAG,CAAN,IAAWuH,UAAU,IAAI,CAA7B,EAAgC;UAC/BvH,GAAG,GAAG,CAAN;QACA;MACD;;MAED,KAAKuG,QAAL,GAAgBxG,GAAhB;MACA,KAAKyG,QAAL,GAAgBxG,GAAhB;MACA,IAAI6F,YAAY,GAAG,KAAKvH,GAAL,CAAS,cAAT,CAAnB;MACA,IAAIyJ,qBAAqB,GAAG,KAAKzJ,GAAL,CAAS,uBAAT,EAAkC,KAAlC,CAA5B;;MACA,IAAIyJ,qBAAJ,EAA2B;QAC1BlC,YAAY,GAAGkC,qBAAf;MACA;;MAED,IAAIC,MAAM,GAAGnC,YAAb;;MACA,IAAI/I,KAAK,CAACmD,QAAN,CAAewF,UAAf,CAAJ,EAAgC;QAC/BuC,MAAM,GAAG,IAAT;MACA;;MAED,IAAIpE,SAAS,GAAG,KAAKtF,GAAL,CAAS,UAAT,EAAqBsF,SAArB,EAAhB;;MAEA,IAAIC,UAAU,GAAgB,KAAKC,aAAL,CAAmB/D,GAAnB,EAAwBC,GAAxB,EAA6B4D,SAA7B,EAAwCoE,MAAxC,CAA9B;;MAEAjI,GAAG,GAAG8D,UAAU,CAAC9D,GAAjB;MACAC,GAAG,GAAG6D,UAAU,CAAC7D,GAAjB,CAhKD,CAkKC;;MACA6D,UAAU,GAAG,KAAKC,aAAL,CAAmB/D,GAAnB,EAAwBC,GAAxB,EAA6B4D,SAA7B,EAAwC,IAAxC,CAAb;MAEA7D,GAAG,GAAG8D,UAAU,CAAC9D,GAAjB;MACAC,GAAG,GAAG6D,UAAU,CAAC7D,GAAjB,CAtKD,CAwKC;;MACA,IAAI6F,YAAJ,EAAkB;QACjB,IAAI/I,KAAK,CAACmD,QAAN,CAAeuF,UAAf,CAAJ,EAAgC;UAC/BzF,GAAG,GAAGyF,UAAN;QACA,CAFD,MAGK;UACJzF,GAAG,GAAG,KAAKwG,QAAX;QACA;;QAED,IAAIzJ,KAAK,CAACmD,QAAN,CAAewF,UAAf,CAAJ,EAAgC;UAC/BzF,GAAG,GAAGyF,UAAN;QACA,CAFD,MAGK;UACJzF,GAAG,GAAG,KAAKwG,QAAX;QACA;;QAED,IAAIxG,GAAG,GAAGD,GAAN,IAAa,UAAjB,EAA6B;UAC5BA,GAAG,IAAI,KAAK0G,YAAZ;UACAzG,GAAG,IAAI,KAAKyG,YAAZ;QACA;;QAED1G,GAAG,IAAI,CAACC,GAAG,GAAGD,GAAP,IAAc2F,QAArB;QACA1F,GAAG,IAAI,CAACA,GAAG,GAAGD,GAAP,IAAc4F,QAArB;MACA;;MAED6B,UAAU,GAAG,KAAKC,QAAL,CAAcC,IAAd,CAAmB,KAAnB,EAA0B3H,GAA1B,CAAb;MACA4H,UAAU,GAAG,KAAKF,QAAL,CAAcC,IAAd,CAAmB,KAAnB,EAA0B1H,GAA1B,CAAb;;MAEA,IAAIlD,KAAK,CAACmD,QAAN,CAAeuH,UAAf,CAAJ,EAAgC;QAC/BzH,GAAG,GAAGyH,UAAN;MACA;;MAED,IAAI1K,KAAK,CAACmD,QAAN,CAAe0H,UAAf,CAAJ,EAAgC;QAC/B3H,GAAG,GAAG2H,UAAN;MACA;;MAED,IAAIR,OAAO,IAAIpG,QAAf,EAAyB;QACxBoG,OAAO,GAAInH,GAAG,GAAGD,GAAjB;MACA,CA9MF,CAgNC;;;MACA,IAAIiC,QAAQ,GAAGtB,IAAI,CAACuB,KAAL,CAAWvB,IAAI,CAACqB,GAAL,CAASrB,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAAS/B,GAAG,GAAGD,GAAf,CAAT,IAAgCW,IAAI,CAACE,MAA9C,CAAX,IAAoE,CAAnF;MAEAb,GAAG,GAAG/C,KAAK,CAACiF,KAAN,CAAYlC,GAAZ,EAAiBiC,QAAjB,CAAN;MACAhC,GAAG,GAAGhD,KAAK,CAACiF,KAAN,CAAYjC,GAAZ,EAAiBgC,QAAjB,CAAN;MAEA,IAAM7D,YAAY,GAAG,KAAKG,GAAL,CAAS,cAAT,CAArB;;MACA,IAAIH,YAAJ,EAAkB;QACjB0F,UAAU,GAAG,KAAKiD,SAAL,CAAe/G,GAAf,EAAoBC,GAApB,EAAyB6D,UAAU,CAAC1D,IAApC,EAA0ChC,YAAY,CAAC2B,UAAb,CAAwB,UAAxB,EAAoC3B,YAAY,CAAC2B,UAAb,CAAwB,KAAxB,EAA+B,CAA/B,CAApC,CAA1C,EAAkH3B,YAAY,CAAC2B,UAAb,CAAwB,UAAxB,EAAoC3B,YAAY,CAAC2B,UAAb,CAAwB,KAAxB,EAA+B,CAA/B,CAApC,CAAlH,EAA0L3B,YAAY,CAAC2B,UAAb,CAAwB,MAAxB,EAAgC,CAAhC,CAA1L,CAAb;QACAC,GAAG,GAAG8D,UAAU,CAAC9D,GAAjB;QACAC,GAAG,GAAG6D,UAAU,CAAC7D,GAAjB;MACA;;MAED,KAAKtC,aAAL,CAAmB,eAAnB,EAAoC,CAACsC,GAAG,GAAGD,GAAP,IAAcoH,OAAd,GAAwB,KAAK7I,GAAL,CAAS,eAAT,EAA0B,GAA1B,CAA5D;;MAEA,IAAI,KAAKA,GAAL,CAAS,aAAT,CAAJ,EAA6B;QAC5B,KAAKmC,eAAL,GAAuBV,GAAvB;QACAA,GAAG,GAAG,KAAKwG,QAAX;QACAvG,GAAG,GAAG,KAAKwG,QAAX;;QAEA,IAAIzG,GAAG,IAAI,CAAX,EAAc;UACbA,GAAG,GAAGuH,UAAU,IAAI,IAAI5G,IAAI,CAACX,GAAL,CAAS2F,QAAT,EAAmB,IAAnB,CAAR,CAAhB;QACA;MACD;;MAGD,IAAI5I,KAAK,CAACmD,QAAN,CAAeF,GAAf,KAAuBjD,KAAK,CAACmD,QAAN,CAAeD,GAAf,CAA3B,EAAgD;QAC/C,IAAI,KAAKF,UAAL,CAAgB,UAAhB,MAAgCC,GAAhC,IAAuC,KAAKD,UAAL,CAAgB,UAAhB,MAAgCE,GAA3E,EAAgF;UAC/E,KAAKiI,UAAL,CAAgB,UAAhB,EAA4BlI,GAA5B;UACA,KAAKkI,UAAL,CAAgB,UAAhB,EAA4BjI,GAA5B;;UACA,KAAKkI,WAAL,CAAiBnI,GAAjB,EAAsBC,GAAtB;;UAEA,IAAMmI,QAAQ,GAAG,KAAK7J,GAAL,CAAS,uBAAT,EAAkC,CAAlC,CAAjB;UACA,IAAM8J,MAAM,GAAG,KAAK9J,GAAL,CAAS,qBAAT,CAAf;UAEA,KAAK+J,cAAL,CAAoB;YAAEC,GAAG,EAAE,KAAP;YAAcC,EAAE,EAAExI,GAAlB;YAAuBoI,QAAQ,UAA/B;YAAiCC,MAAM;UAAvC,CAApB;UACA,KAAKC,cAAL,CAAoB;YAAEC,GAAG,EAAE,KAAP;YAAcC,EAAE,EAAEvI,GAAlB;YAAuBmI,QAAQ,UAA/B;YAAiCC,MAAM;UAAvC,CAApB;QACA;MACD;IACD;;;;;;WAED,UAAoBpI,GAApB,EAA+B;MAC9B;MACA,IAAIwI,QAAQ,GAAW9H,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAAS/B,GAAT,CAAT,IAA0BU,IAAI,CAACE,MAAtD,CAF8B,CAI9B;;MACA,IAAI6H,KAAK,GAAG/H,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACoB,KAAL,CAAW0G,QAAX,CAAb,CAAZ,CAL8B,CAO9B;;MACAC,KAAK,GAAGA,KAAK,GAAG,EAAhB;MAEA,KAAKhC,YAAL,GAAoBgC,KAApB;IACA;;;;;;WAED,UAAsBC,IAAtB,EAAoCC,IAApC,EAAgD,CAE/C;;;;;;WAGD,UAAwB5I,GAAxB,EAAqCC,GAArC,EAAkD4D,SAAlD,EAAqEgF,UAArE,EAAyF;MACxF;MACA,IAAIhF,SAAS,IAAI,CAAjB,EAAoB;QACnBA,SAAS,GAAG,CAAZ;MACA;;MAEDA,SAAS,GAAGlD,IAAI,CAACuB,KAAL,CAAW2B,SAAX,CAAZ;MAEA,IAAI0D,UAAU,GAAWvH,GAAzB;MACA,IAAIwH,UAAU,GAAWvH,GAAzB;MAEA,IAAI6I,UAAU,GAAG7I,GAAG,GAAGD,GAAvB,CAXwF,CAaxF;;MACA,IAAI8I,UAAU,KAAK,CAAnB,EAAsB;QACrBA,UAAU,GAAGnI,IAAI,CAACqB,GAAL,CAAS/B,GAAT,CAAb;MACA,CAhBuF,CAkBxF;;;MACA,IAAIwI,QAAQ,GAAW9H,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAAS8G,UAAT,CAAT,IAAiCnI,IAAI,CAACE,MAA7D,CAnBwF,CAqBxF;;MACA,IAAI6H,KAAK,GAAG/H,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACoB,KAAL,CAAW0G,QAAX,CAAb,CAAZ,CAtBwF,CAwBxF;;MACAC,KAAK,GAAGA,KAAK,GAAG,EAAhB;MAEA,IAAIK,KAAK,GAAWL,KAApB;;MACA,IAAIG,UAAJ,EAAgB;QACfE,KAAK,GAAG,CAAR;MACA,CA9BuF,CAgCxF;;;MACA,IAAIF,UAAJ,EAAgB;QACf7I,GAAG,GAAGW,IAAI,CAACoB,KAAL,CAAW/B,GAAG,GAAG0I,KAAjB,IAA0BA,KAAhC,CADe,CAEf;;QACAzI,GAAG,GAAGU,IAAI,CAACqI,IAAL,CAAU/I,GAAG,GAAGyI,KAAhB,IAAyBA,KAA/B;MACA,CAJD,MAKK;QACJ1I,GAAG,GAAGW,IAAI,CAACqI,IAAL,CAAUhJ,GAAG,GAAG0I,KAAhB,IAAyBA,KAAzB,GAAiCK,KAAvC,CADI,CAEJ;;QACA9I,GAAG,GAAGU,IAAI,CAACoB,KAAL,CAAW9B,GAAG,GAAGyI,KAAjB,IAA0BA,KAA1B,GAAkCK,KAAxC;MACA,CA1CuF,CA4CxF;;;MACA,IAAI/I,GAAG,GAAG,CAAN,IAAWuH,UAAU,IAAI,CAA7B,EAAgC;QAC/BvH,GAAG,GAAG,CAAN;MACA,CA/CuF,CAgDxF;;;MACA,IAAIC,GAAG,GAAG,CAAN,IAAWuH,UAAU,IAAI,CAA7B,EAAgC;QAC/BvH,GAAG,GAAG,CAAN;MACA;;MAEDwI,QAAQ,GAAG9H,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAAS8G,UAAT,CAAT,IAAiCnI,IAAI,CAACE,MAAjD;MACA6H,KAAK,GAAG/H,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACoB,KAAL,CAAW0G,QAAX,CAAb,CAAR;MACAC,KAAK,GAAGA,KAAK,GAAG,GAAhB,CAvDwF,CAuDnE;MAErB;;MACA,IAAItI,IAAI,GAAGO,IAAI,CAACqI,IAAL,CAAWF,UAAU,GAAGjF,SAAd,GAA2B6E,KAArC,IAA8CA,KAAzD;MACA,IAAI5G,SAAS,GAAGnB,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAAS5B,IAAT,CAAT,IAA2BO,IAAI,CAACE,MAA3C,CAAb,CAAhB,CA3DwF,CA6DxF;;MACA,IAAIoI,WAAW,GAAWtI,IAAI,CAACqI,IAAL,CAAU5I,IAAI,GAAG0B,SAAjB,CAA1B,CA9DwF,CA8DjC;;MAEvD,IAAImH,WAAW,GAAG,CAAlB,EAAqB;QACpBA,WAAW,GAAG,EAAd;MACA,CAFD,MAGK,IAAIA,WAAW,IAAI,CAAf,IAAoBA,WAAW,GAAG,CAAtC,EAAyC;QAC7CA,WAAW,GAAG,CAAd;MACA,CArEuF,CAuExF;;;MACA7I,IAAI,GAAGO,IAAI,CAACqI,IAAL,CAAU5I,IAAI,IAAI0B,SAAS,GAAGmH,WAAhB,CAAd,IAA8CnH,SAA9C,GAA0DmH,WAAjE;MAEA,IAAIC,YAAY,GAAG,KAAK3K,GAAL,CAAS,cAAT,CAAnB;;MACA,IAAIxB,KAAK,CAACmD,QAAN,CAAegJ,YAAf,CAAJ,EAAkC;QACjC,IAAIC,UAAU,GAAGlM,KAAK,CAAC+L,IAAN,CAAW5I,IAAX,EAAiB8I,YAAjB,CAAjB;;QACA,IAAIA,YAAY,GAAGE,MAAM,CAACC,SAAtB,IAAmCjJ,IAAI,KAAK+I,UAAhD,EAA4D;UAC3D/I,IAAI,GAAG+I,UAAP;QACA;MACD;;MAED,IAAIlH,QAAQ,GAAW,CAAvB,CAlFwF,CAmFxF;;MACA,IAAIH,SAAS,GAAG,CAAhB,EAAmB;QAClB;QACAG,QAAQ,GAAGtB,IAAI,CAACuB,KAAL,CAAWvB,IAAI,CAACqB,GAAL,CAASrB,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAASF,SAAT,CAAT,IAAgCnB,IAAI,CAACE,MAA9C,CAAX,IAAoE,CAA/E,CAFkB,CAGlB;;QACAT,IAAI,GAAGnD,KAAK,CAACiF,KAAN,CAAY9B,IAAZ,EAAkB6B,QAAlB,CAAP;MACA,CAzFuF,CA2FxF;;;MACA,IAAIqH,QAAQ,GAAG3I,IAAI,CAACoB,KAAL,CAAW/B,GAAG,GAAGI,IAAjB,CAAf;MAEAJ,GAAG,GAAG/C,KAAK,CAACiF,KAAN,CAAY9B,IAAI,GAAGkJ,QAAnB,EAA6BrH,QAA7B,CAAN;MAEA,IAAIsH,QAAJ;;MAEA,IAAI,CAACV,UAAL,EAAiB;QAChBU,QAAQ,GAAG5I,IAAI,CAACqI,IAAL,CAAU/I,GAAG,GAAGG,IAAhB,CAAX;MACA,CAFD,MAGK;QACJmJ,QAAQ,GAAG5I,IAAI,CAACoB,KAAL,CAAW9B,GAAG,GAAGG,IAAjB,CAAX;MACA;;MAED,IAAImJ,QAAQ,KAAKD,QAAjB,EAA2B;QAC1BC,QAAQ;MACR;;MAEDtJ,GAAG,GAAGhD,KAAK,CAACiF,KAAN,CAAY9B,IAAI,GAAGmJ,QAAnB,EAA6BtH,QAA7B,CAAN;;MAEA,IAAIhC,GAAG,GAAGuH,UAAV,EAAsB;QACrBvH,GAAG,GAAGA,GAAG,GAAGG,IAAZ;MACA;;MAED,IAAIJ,GAAG,GAAGuH,UAAV,EAAsB;QACrBvH,GAAG,GAAGA,GAAG,GAAGI,IAAZ;MACA;;MAGDA,IAAI,GAAG,KAAK2E,YAAL,CAAkB3E,IAAlB,CAAP;MAEA,OAAO;QAAEJ,GAAG,EAAEA,GAAP;QAAYC,GAAG,EAAEA,GAAjB;QAAsBG,IAAI,EAAEA;MAA5B,CAAP;IACA;;EAED;;;;;;;;;;;WAMA,UAAsByC,QAAtB,EAAsC;MACrC,IAAMpD,YAAY,GAAG,KAAKlB,GAAL,CAAS,qBAAT,EAAgC,KAAKA,GAAL,CAAS,cAAT,CAAhC,CAArB;MACA,IAAMmB,SAAS,GAAG,KAAKC,kBAAL,EAAlB;MACA,IAAM6J,aAAa,GAAG,KAAKjL,GAAL,CAAS,uBAAT,EAAkC,CAAlC,CAAtB;MACA,IAAMkL,QAAQ,GAAG,KAAK1J,UAAL,CAAgB,mBAAhB,EAAqC,CAArC,IAA0CyJ,aAA3D;MACA,IAAMhK,KAAK,GAAGvC,KAAK,CAACiF,KAAN,CAAY,KAAK0B,eAAL,CAAqBf,QAArB,CAAZ,EAA4C4G,QAA5C,CAAd;;MAEA,IAAIhK,YAAJ,EAAkB;QACjB,OAAOC,SAAS,CAACG,MAAV,CAAiBL,KAAjB,EAAwBC,YAAxB,CAAP;MACA,CAFD,MAGK;QACJ,OAAOC,SAAS,CAACG,MAAV,CAAiBL,KAAjB,EAAwBM,SAAxB,EAAmC2J,QAAnC,CAAP,CADI,CAEJ;MACA,CAboC,CAerC;MACA;;IACA;;EAED;;;;;;;;;;;;WAOA,UAAqBnH,MAArB,EAAuCO,QAAvC,EAAuD;MACtD,IAAI6G,SAAS,GAAS,KAAK3J,UAAL,CAAgB,MAAhB,IAA2B,KAAKxB,GAAL,CAAS,UAAT,EAAqBwB,UAArB,CAAgC,QAAhC,CAAjD;MACA,IAAIP,KAAK,GAAG,KAAKoE,eAAL,CAAqBf,QAArB,CAAZ;MAEA,IAAI8G,KAAK,GAAuB7J,SAAhC;MACA,IAAI8J,OAAJ;MACA5M,MAAM,CAACqF,IAAP,CAAYC,MAAM,CAACpB,SAAnB,EAA8B,UAACD,QAAD,EAAWV,CAAX,EAAY;QACzC,IAAM8G,IAAI,GAAG1G,IAAI,CAACqB,GAAL,CAASf,QAAQ,CAAC1C,GAAT,CAAamL,SAAb,IAA0BlK,KAAnC,CAAb;;QACA,IAAImK,KAAK,KAAK7J,SAAV,IAAuBuH,IAAI,GAAGuC,OAAlC,EAA2C;UAC1CD,KAAK,GAAGpJ,CAAR;UACAqJ,OAAO,GAAGvC,IAAV;QACA;MACD,CAND;;MAQA,IAAIsC,KAAK,IAAI,IAAb,EAAmB;QAClB,OAAOrH,MAAM,CAACpB,SAAP,CAAiByI,KAAjB,CAAP;MACA;IACD;;EAED;;;;;;;;;;;;;;WASA,UAAoB3C,KAApB,EAAmCE,GAAnC,EAAgDkB,QAAhD,EAAiE;MAChE,IAAMpI,GAAG,GAAG,KAAKD,UAAL,CAAgB,UAAhB,EAA4B,CAA5B,CAAZ;MACA,IAAME,GAAG,GAAG,KAAKF,UAAL,CAAgB,UAAhB,EAA4B,CAA5B,CAAZ;;MACA,IAAI,KAAKA,UAAL,CAAgB,KAAhB,KAA0B,IAA1B,IAAkC,KAAKA,UAAL,CAAgB,KAAhB,KAA0B,IAAhE,EAAsE;QACrE,KAAKoH,IAAL,CAAU,CAACH,KAAK,GAAGhH,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAV,EAAuC,CAACkH,GAAG,GAAGlH,GAAP,KAAeC,GAAG,GAAGD,GAArB,CAAvC,EAAkEoI,QAAlE;MACA;IACD;;EAGD;;;;;;;;;;;;WAOA,UAAoBpI,GAApB,EAAiCC,GAAjC,EAA8CG,IAA9C,EAA4DyJ,OAA5D,EAA6EC,OAA7E,EAA8FC,QAA9F,EAA8G;MAC7G,IAAIC,IAAI,GAAG,KAAKzL,GAAL,CAAS,cAAT,CAAX;;MACA,IAAIyL,IAAJ,EAAU;QACT,IAAItH,KAAK,GAAW/B,IAAI,CAACuB,KAAL,CAAW4H,OAAO,GAAGD,OAArB,IAAgCE,QAApD;QACA,IAAIE,YAAY,GAAGtJ,IAAI,CAACuB,KAAL,CAAW,CAACjC,GAAG,GAAGD,GAAP,IAAcI,IAAzB,CAAnB;QAEA,IAAIyD,SAAS,GAAG,KAAKtF,GAAL,CAAS,UAAT,EAAqBsF,SAArB,EAAhB;;QAEA,IAAI9G,KAAK,CAACmD,QAAN,CAAewC,KAAf,KAAyB3F,KAAK,CAACmD,QAAN,CAAe+J,YAAf,CAA7B,EAA2D;UAC1D,IAAIC,MAAM,GAAG,KAAb;UACA,IAAIC,CAAC,GAAG,CAAR;UACA,IAAI9C,IAAI,GAAG,CAACpH,GAAG,GAAGD,GAAP,IAAc,IAAzB;UACA,IAAIoK,IAAI,GAAGpK,GAAX;UACA,IAAIqK,IAAI,GAAGpK,GAAX;UACA,IAAIqK,KAAK,GAAGlK,IAAZ;;UAEA,OAAO8J,MAAM,IAAI,IAAjB,EAAuB;YACtBA,MAAM,GAAG,KAAKK,UAAL,CAAgBH,IAAhB,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC5H,KAAnC,CAAT;YACAyH,CAAC;;YACD,IAAIA,CAAC,GAAG,GAAR,EAAa;cACZD,MAAM,GAAG,IAAT;YACA;;YACD,IAAI,CAACA,MAAL,EAAa;cACZ,IAAIC,CAAC,GAAG,CAAJ,IAASxJ,IAAI,CAACuB,KAAL,CAAWiI,CAAC,GAAG,CAAf,CAAb,EAAgC;gBAC/BC,IAAI,GAAGpK,GAAG,GAAGqH,IAAI,GAAG8C,CAApB;;gBACA,IAAInK,GAAG,IAAI,CAAP,IAAYoK,IAAI,GAAG,CAAvB,EAA0B;kBACzBA,IAAI,GAAG,CAAP;gBACA;cACD,CALD,MAMK;gBACJC,IAAI,GAAGpK,GAAG,GAAGoH,IAAI,GAAG8C,CAApB;;gBACA,IAAIE,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAG,CAAxB,EAA2B;kBAC1BA,IAAI,GAAG,CAAP;gBACA;cACD;;cAED,IAAIvG,UAAU,GAAG,KAAKC,aAAL,CAAmBqG,IAAnB,EAAyBC,IAAzB,EAA+BxG,SAA/B,EAA0C,IAA1C,CAAjB;;cACAuG,IAAI,GAAGtG,UAAU,CAAC9D,GAAlB;cACAqK,IAAI,GAAGvG,UAAU,CAAC7D,GAAlB;cACAqK,KAAK,GAAGxG,UAAU,CAAC1D,IAAnB;YACA,CAlBD,MAmBK;cACJJ,GAAG,GAAGoK,IAAN;cACAnK,GAAG,GAAGoK,IAAN;cACAjK,IAAI,GAAGkK,KAAP;YACA;UACD;QACD;MACD;;MAED,OAAO;QAAEtK,GAAG,EAAEA,GAAP;QAAYC,GAAG,EAAEA,GAAjB;QAAsBG,IAAI,EAAEA;MAA5B,CAAP;IACA;;EAED;;;;;;;;WAGA,UAAqBJ,GAArB,EAAkCC,GAAlC,EAA+CG,IAA/C,EAA6DsC,KAA7D,EAA0E;MACzE,IAAIuH,YAAY,GAAG,CAAChK,GAAG,GAAGD,GAAP,IAAcI,IAAjC;;MACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,KAApB,EAA2BnC,CAAC,EAA5B,EAAgC;QAC/B,IAAItD,KAAK,CAACiF,KAAN,CAAY+H,YAAY,GAAG1J,CAA3B,EAA8B,CAA9B,KAAoCmC,KAApC,IAA6CuH,YAAY,GAAG1J,CAAf,IAAoBmC,KAArE,EAA4E;UAC3E,OAAO,IAAP;QACA;MACD;;MACD,OAAO,KAAP;IACA;;EAlwCDtF;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0CP,IAAI,CAAC2N,UAAL,CAAgBC,MAAhB,CAAuB,CAACC,SAAS,CAACC,SAAX,CAAvB;EAA1C;EAkwCD;AAAC,CApwCD,CAAuD9N,IAAvD;;SAAa6N","names":["DataItem","Axis","MultiDisposer","$type","$array","$math","$utils","__extends","Object","_dirtyExtremes","markDirty","_dirtySelectionExtremes","_settings","themeTags","mergeTags","setPrivateRaw","addTag","_super","_afterNew","call","_prepareChildren","isDirty","previousValue","_prevSettings","syncWithAxis","_syncDp","dispose","get","onPrivate","_this","_sizeDirty","_valuesDirty","isPrivateDirty","_getMinMax","ghostLabel","set","_isPanning","_getSelectionMinMax","_groupData","_handleRangeChange","_prepareAxisItems","_updateAxisRanges","_baseValue","baseValue","value","numberFormat","formatter","getNumberFormatter","text","format","undefined","getPrivate","min","max","isNumber","logarithmic","step","selectionMin","selectionMax","i","differencePower","minLog","_minLogAdjusted","Math","log","LOG10E","pow","previous","Infinity","dataItem","dataItems","length","_dataItems","push","processDataItem","_createAssets","isHidden","show","setRaw","label","_formatText","_prepareDataItem","stepPower","floor","abs","decCount","round","j","hide","each","series","inited","_markDirtyAxes","_updateGhost","count","renderer","endValue","position","valueToPosition","endPosition","fillEndPosition","updateLabel","grid","updateGrid","_applyThemes","hasTag","removeTag","updateTick","updateFill","_processBullet","updateBullet","fillRule","positionToValue","gridCount","minMaxStep","_adjustMinMax","stepDecimalPlaces","decimalPlaces","E","treatZeroAs","location","positionToCoordinate","field","_cellLocation","axisLocation","getDataItemPositionX","stackToItem","component","getStackedXValueWorking","getDataItemPositionY","getStackedYValueWorking","fixSmallStep","startIndex","endIndex","field_1","vc_1","fieldWorking_1","sum","total","this_1","isNaN","minDefined","maxDefined","extraMin","extraMax","selectionStrictMinMax","strictMinMax","selectionMin_1","selectionMax_1","seriesMin","seriesMax","outOfSelection","isShowing","axisRanges","range","_a","_minReal","_maxReal","_deltaMinMax","minMaxStep2","selectionMinReal","selectionMaxReal","fitToRange","_syncAxes","start","valueToFinalPosition","end","zoom","minDiff","diff","Error","initialMin","initialMax","minAdapted","adapters","fold","maxAdapted","_fixMin","_fixMax","_getDelta","strictMinMaxSelection","strict","setPrivate","_saveMinMax","duration","easing","animatePrivate","key","to","exponent","power","_min","_max","strictMode","difference","extra","ceil","stepDivisor","maxPrecision","ceiledStep","Number","MAX_VALUE","minCount","maxCount","extraDecimals","decimals","fieldName","index","oldDiff","syncMin","syncMax","syncStep","axis","currentCount","synced","c","omin","omax","ostep","_checkSync","classNames","concat","ValueAxis","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/charts/xy/axes/ValueAxis.ts"],"sourcesContent":["import type { AxisRenderer } from \"./AxisRenderer\";\nimport type { IXYSeriesDataItem, XYSeries } from \"../series/XYSeries\";\n\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Axis, IAxisSettings, IAxisPrivate, IAxisDataItem, IAxisEvents } from \"./Axis\";\nimport { MultiDisposer } from \"../../../core/util/Disposer\";\n\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\n\nexport interface IValueAxisSettings<R extends AxisRenderer> extends IAxisSettings<R> {\n\n\t/**\n\t * Override minimum value for the axis scale.\n\t *\n\t * NOTE: the axis might modify the minimum value to fit into its scale better,\n\t * unless `strictMinMax` is set to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tmin?: number;\n\n\t/**\n\t * Override maximum value for the axis scale.\n\t *\n\t * NOTE: the axis might modify the maximum value to fit into its scale better,\n\t * unless `strictMinMax` is set to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tmax?: number;\n\n\t/**\n\t * Force axis scale to be precisely at values as set in `min` and/or `max`.\n\t *\n\t * In case `min` and/or `max` is not set, the axis will fix its scale to\n\t * precise lowest and highest values available through all of the series\n\t * attached to it.\n\t *\n\t * This effectively locks the axis from auto-zooming itself when chart\n\t * is zoomed in.\n\t *\n\t * If you need to zoom to actual low/high values within currently visible\n\t * scope, use `strictMinMaxSelection` instead.\n\t *\n\t * Use `extraMin` and `extraMax` to add extra \"padding\".\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Custom_scope} for more info\n\t */\n\tstrictMinMax?: boolean;\n\n\t/**\n\t * Force axis to auto-zoom to exact lowest and highest values from attached\n\t * series' data items within ucurrently visible range.\n\t * \n\t * This is a good feature when your series is plotted from derivative values,\n\t * like `valueYChangeSelection` as it helps to avoid frequent jumping of\n\t * series to adjusted min and max of the axis.\n\t * \n\t * Use `extraMin` and `extraMax` to add extra \"padding\".\n\t *\n\t * @since 5.1.11\n\t */\n\tstrictMinMaxSelection?: boolean;\n\n\t/**\n\t * If set to `true` axis will use logarithmic scale.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Logarithmic_scale} for more info\n\t */\n\tlogarithmic?: boolean;\n\n\t/**\n\t * Treat zero values as some other value.\n\t *\n\t * Useful in situations where zero would result in error, i.e. logarithmic\n\t * scale.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Logarithmic_scale} for more info\n\t */\n\ttreatZeroAs?: number;\n\n\t/**\n\t * Relative extension to the automatically-calculated minimum value of the\n\t * axis scale.\n\t *\n\t * E..g. `0.1` will extend the scale by 10%, so if max value is `1000` and\n\t * minimum value is `0`, the new minimum value will be `-100`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Relative_scope_extension} for more info\n\t */\n\textraMin?: number;\n\n\t/**\n\t * Relative extension to the automatically-calculated maximum value of the\n\t * axis scale.\n\t *\n\t * E..g. `0.1` will extend the scale by 10%, so if max value is `1000`, the\n\t * axis will now show maximum value of `1100`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Relative_scope_extension} for more info\n\t */\n\textraMax?: number;\n\n\t/**\n\t * Base value, which indicates the threshold between \"positive\" and \"negative\"\n\t * values.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Base_value} for more info\n\t */\n\tbaseValue?: number;\n\n\t/**\n\t * Maximum number of decimals to allow in axis labels.\n\t *\n\t * This setting not only affects formatting of the labels, but also where and\n\t * how many grid/labels are placed on the axis.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Label_format} for more info\n\t */\n\tmaxPrecision?: number;\n\n\t/**\n\t * A function that can be used to specify how to configure axis fills.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_fills} for more info\n\t */\n\tfillRule?: (dataItem: DataItem<IValueAxisDataItem>) => void;\n\n\t/**\n\t * Number format to use for axis labels.\n\t *\n\t * If not set, will use format set in global number formatter.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Label_format} for more info\n\t */\n\tnumberFormat?: string;\n\n\t/**\n\t * A numeric format used for numbers displayed in axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Tooltip_number_format} for more info\n\t */\n\ttooltipNumberFormat?: string | Intl.NumberFormatOptions;\n\n\t/**\n\t * If set, will use greater precision for the axis fooltip than the one for\n\t * axis' actual labels.\n\t *\n\t * E.g. if axis displays labels with one decimal (`1.0`, `1.1`, `1.2`) setting\n\t * this setting to `1` would allow two decimals in axis tooltip, e.g. `1.15`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Tooltip_number_format} for more info\n\t */\n\textraTooltipPrecision?: number;\n\n\t/**\n\t * If your series relies on dynamically calculated values, like value\n\t * changes, percents, or total sums, set this to `true`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Calculated_values} for more info\n\t */\n\tcalculateTotals?: boolean;\n\n\t/**\n\t * This setting can be set to an instance of another [[ValueAxis]].\n\t *\n\t * If set the grid of this axis will be synced with grid of the target axis.\n\t *\n\t * NOTE: this is not 100% guaranteed to work. In some rare cases perfect\n\t * sync might not be possible.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Syncing_grid} for more info\n\t */\n\tsyncWithAxis?: ValueAxis<AxisRenderer>;\n\n\t/**\n\t * If set to `false`, the axis won't be auto-zoomed to a selection (this\n\t * works only if the other axis is a `DateAxis` or a `CategoryAxis`).\n\t * \n\t * IMPORTANT: This setting will be ignored if both X and Y axes are\n\t * a `ValueAxis`.\n\t *\n\t * @since 5.2.20\n\t * @default true\n\t */\n\tautoZoom?: boolean;\n\n}\n\nexport interface IValueAxisDataItem extends IAxisDataItem {\n\n\t/**\n\t * Value of the data item.\n\t */\n\tvalue?: number;\n\n\t/**\n\t * End value for axis items that span multiple values, like axis ranges.\n\t */\n\tendValue?: number;\n\n\t/**\n\t * If set to `true` the values fo this data item will be factored in when\n\t * calculating scale of the [[ValueAxis]]. Useful for axis ranges.\n\t * \n\t * @since 5.1.4\n\t */\n\taffectsMinMax?: boolean;\n\n}\n\nexport interface IMinMaxStep {\n\tmin: number;\n\tmax: number;\n\tstep: number;\n}\n\nexport interface IValueAxisPrivate extends IAxisPrivate {\n\n\t/**\n\t * Calculated current minimum value of the axis scale.\n\t * \n\t * @readonly\n\t */\n\tmin?: number;\n\n\t/**\n\t * Calculated current maximum value of the axis scale.\n\t * \n\t * @readonly\n\t */\n\tmax?: number;\n\n\t/**\n\t * A minimum value of the axis scale.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `min` is reflecting current intermediate value, whereas `minFinal` will\n\t * show target value.\n\t * \n\t * @readonly\n\t */\n\tminFinal?: number;\n\n\t/**\n\t * A maximum value of the axis scale.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `max` is reflecting current intermediate value, whereas `maxFinal` will\n\t * show target value.\n\t * \n\t * @readonly\n\t */\n\tmaxFinal?: number;\n\n\t/**\n\t * Calculated minimum value of the currently viewable (zoomed) scope.\n\t * \n\t * @readonly\n\t */\n\tselectionMin?: number;\n\n\t/**\n\t * Calculated maximum value of the currently viewable (zoomed) scope.\n\t * \n\t * @readonly\n\t */\n\tselectionMax?: number;\n\n\t/**\n\t * A target minimum value of the viewable value scope.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `selectionMin` is reflecting current intermediate value,\n\t * whereas `selectionMinFinal` will show target value.\n\t * \n\t * @readonly\n\t */\n\tselectionMinFinal?: number;\n\n\t/**\n\t * A target maximum value of the viewable value scope.\n\t *\n\t * Can be useful in cases where axis zoom is currently being animated, and\n\t * `selectionMax` is reflecting current intermediate value,\n\t * whereas `selectionMaxFinal` will show target value.\n\t * \n\t * @readonly\n\t */\n\tselectionMaxFinal?: number;\n\n\t/**\n\t * When selection step changes, it might change during axis zoom animation.\n\t *\n\t * `selectionStepFinal` will show what step will be when animation is\n\t * finished.\n\t * \n\t * @readonly\n\t */\n\tselectionStepFinal?: number;\n\n\t/**\n\t * Value step between grid lines.\n\t * \n\t * @readonly\n\t */\n\tstep?: number;\n\n\t/**\n\t * Decimal places used when formatting axis labels.\n\t * \n\t * @readonly\n\t */\n\tstepDecimalPlaces?: number;\n\n}\n\nexport interface IValueAxisEvents extends IAxisEvents {\n\n}\n\n/**\n * Creates a value axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info\n * @important\n */\nexport class ValueAxis<R extends AxisRenderer> extends Axis<R> {\n\tpublic static className: string = \"ValueAxis\";\n\tpublic static classNames: Array<string> = Axis.classNames.concat([ValueAxis.className]);\n\n\tdeclare public _settings: IValueAxisSettings<R>;\n\tdeclare public _privateSettings: IValueAxisPrivate;\n\tdeclare public _dataItemSettings: IValueAxisDataItem;\n\tdeclare public _events: IValueAxisEvents;\n\n\tprotected _dirtyExtremes: boolean = false;\n\tprotected _dirtySelectionExtremes: boolean = false;\n\tprotected _deltaMinMax: number = 1;\n\tprotected _minReal: number | undefined;\n\tprotected _maxReal: number | undefined;\n\n\tprotected _baseValue: number = 0;\n\tprotected _syncDp?: MultiDisposer;\n\tprotected _minLogAdjusted: number = 1;\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyExtremes() {\n\t\tthis._dirtyExtremes = true;\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtySelectionExtremes() {\n\t\tthis._dirtySelectionExtremes = true;\n\t\tthis.markDirty();\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tthis.setPrivateRaw(\"name\", \"value\");\n\t\tthis.addTag(\"value\");\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"syncWithAxis\")) {\n\t\t\tlet previousValue = this._prevSettings.syncWithAxis;\n\t\t\tif (previousValue) {\n\t\t\t\tif (this._syncDp) {\n\t\t\t\t\tthis._syncDp.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet syncWithAxis = this.get(\"syncWithAxis\");\n\t\t\tif (syncWithAxis) {\n\t\t\t\tthis._syncDp = new MultiDisposer([\n\t\t\t\t\tsyncWithAxis.onPrivate(\"selectionMinFinal\", () => {\n\t\t\t\t\t\tthis._dirtySelectionExtremes = true;\n\t\t\t\t\t}),\n\t\t\t\t\tsyncWithAxis.onPrivate(\"selectionMaxFinal\", () => {\n\t\t\t\t\t\tthis._dirtySelectionExtremes = true;\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t}\n\t\t}\n\n\t\t//if (this._dirtyExtremes || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\")) {\n\t\tif (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"strictMinMaxSelection\") || this.isDirty(\"maxPrecision\") || this.isDirty(\"numberFormat\")) {\n\t\t\tthis._getMinMax();\n\t\t\tthis.ghostLabel.set(\"text\", \"\");\n\t\t\tthis._dirtyExtremes = false;\n\t\t}\n\n\t\tif (this._dirtySelectionExtremes && !this._isPanning && this.get(\"autoZoom\", true)) {\n\t\t\tthis._getSelectionMinMax();\n\t\t\tthis._dirtySelectionExtremes = false;\n\t\t}\n\n\t\tthis._groupData();\n\n\t\tif (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"min\") || this.isPrivateDirty(\"selectionMax\") || this.isPrivateDirty(\"selectionMin\") || this.isPrivateDirty(\"max\") || this.isPrivateDirty(\"step\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"logarithmic\")) {\n\t\t\tthis._handleRangeChange();\n\t\t\tthis._prepareAxisItems();\n\t\t\tthis._updateAxisRanges();\n\t\t}\n\n\t\tthis._baseValue = this.baseValue();\n\n\t}\n\n\tprotected _groupData() {\n\n\t}\n\n\tprotected _formatText(value: number) {\n\t\tconst numberFormat = this.get(\"numberFormat\");\n\t\tconst formatter = this.getNumberFormatter();\n\n\t\tlet text = \"\";\n\n\t\tif (numberFormat) {\n\t\t\ttext = formatter.format(value, numberFormat);\n\t\t}\n\t\telse {\n\t\t\ttext = formatter.format(value, undefined, this.getPrivate(\"stepDecimalPlaces\"));\n\t\t}\n\t\treturn text;\n\t}\n\n\tprotected _prepareAxisItems() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\n\t\t\tconst logarithmic = this.get(\"logarithmic\");\n\t\t\tconst step = this.getPrivate(\"step\")!;\n\t\t\tconst selectionMin = this.getPrivate(\"selectionMin\")!;\n\t\t\tconst selectionMax = this.getPrivate(\"selectionMax\")! + step;\n\n\t\t\tlet value = selectionMin - step;\n\t\t\tlet i = 0;\n\t\t\tlet differencePower = 1;\n\t\t\tlet minLog = min;\n\n\t\t\tif (logarithmic) {\n\t\t\t\tvalue = this._minLogAdjusted;\n\n\t\t\t\tif (value < selectionMin) {\n\t\t\t\t\twhile (value < selectionMin) {\n\t\t\t\t\t\tvalue += step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tminLog = value;\n\n\t\t\t\tif (minLog <= 0) {\n\t\t\t\t\tminLog = 1;\n\t\t\t\t\tif (step < 1) {\n\t\t\t\t\t\tminLog = step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdifferencePower = Math.log(selectionMax - step) * Math.LOG10E - Math.log(minLog) * Math.LOG10E;\n\n\t\t\t\tif (differencePower > 2) {\n\t\t\t\t\tvalue = Math.pow(10, Math.log(minLog) * Math.LOG10E - 5);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet previous = -Infinity;\n\t\t\twhile (value < selectionMax) {\n\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\tif (this.dataItems.length < i + 1) {\n\t\t\t\t\tdataItem = new DataItem(this, undefined, {});\n\t\t\t\t\tthis._dataItems.push(dataItem);\n\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdataItem = this.dataItems[i];\n\t\t\t\t}\n\n\t\t\t\tthis._createAssets(dataItem, []);\n\n\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\tdataItem.show();\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"value\", value);\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", this._formatText(value));\n\t\t\t\t}\n\n\t\t\t\tthis._prepareDataItem(dataItem);\n\n\t\t\t\tif (!logarithmic) {\n\t\t\t\t\tvalue += step;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (differencePower > 2) {\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(minLog) * Math.LOG10E + i - 5);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue += step;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (previous == value) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\t\t\t\tif (stepPower < 1) {\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n\t\t\t\t\t// round value to avoid floating point issues\n\t\t\t\t\tvalue = $math.round(value, decCount);\n\t\t\t\t}\n\t\t\t\ti++;\n\n\t\t\t\tprevious = value;\n\t\t\t}\n\n\t\t\tfor (let j = i; j < this.dataItems.length; j++) {\n\t\t\t\tthis.dataItems[j].hide();\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.inited) {\n\t\t\t\t\tseries._markDirtyAxes();\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis._updateGhost();\n\t\t}\n\t}\n\n\n\tpublic _prepareDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, count?: number) {\n\t\tlet renderer = this.get(\"renderer\");\n\t\tlet value = dataItem.get(\"value\")!;\n\t\tlet endValue = dataItem.get(\"endValue\");\n\n\t\tlet position = this.valueToPosition(value);\n\n\t\tlet endPosition = position;\n\t\tlet fillEndPosition = this.valueToPosition(value + this.getPrivate(\"step\")!);\n\n\t\tif ($type.isNumber(endValue)) {\n\t\t\tendPosition = this.valueToPosition(endValue);\n\t\t\tfillEndPosition = endPosition;\n\t\t}\n\n\t\tif (dataItem.get(\"isRange\")) {\n\t\t\tif (endValue == null) {\n\t\t\t\tfillEndPosition = position;\n\t\t\t}\n\t\t}\n\n\t\trenderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n\n\t\tconst grid = dataItem.get(\"grid\");\n\t\trenderer.updateGrid(grid, position, endPosition);\n\t\tif (grid) {\n\t\t\tif (value == this.get(\"baseValue\", 0)) {\n\t\t\t\tgrid.addTag(\"base\");\n\t\t\t\tgrid._applyThemes();\n\t\t\t}\n\t\t\telse if (grid.hasTag(\"base\")) {\n\t\t\t\tgrid.removeTag(\"base\");\n\t\t\t\tgrid._applyThemes();\n\t\t\t}\n\t\t}\n\n\t\trenderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n\t\trenderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n\n\t\tthis._processBullet(dataItem);\n\t\trenderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n\n\t\tif (!dataItem.get(\"isRange\")) {\n\t\t\tconst fillRule = this.get(\"fillRule\");\n\t\t\tif (fillRule) {\n\t\t\t\tfillRule(dataItem)\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected _handleRangeChange() {\n\t\tlet selectionMin: number = this.positionToValue(this.get(\"start\", 0));\n\t\tlet selectionMax: number = this.positionToValue(this.get(\"end\", 1));\n\n\t\tconst gridCount = this.get(\"renderer\").gridCount();\n\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n\t\tthis.setPrivateRaw(\"stepDecimalPlaces\", stepDecimalPlaces);\n\n\t\tselectionMin = $math.round(selectionMin, stepDecimalPlaces);\n\t\tselectionMax = $math.round(selectionMax, stepDecimalPlaces);\n\n\t\tminMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\tlet step = minMaxStep.step;\n\t\tselectionMin = minMaxStep.min;\n\t\tselectionMax = minMaxStep.max;\n\n\t\tif (this.getPrivate(\"selectionMin\") !== selectionMin || this.getPrivate(\"selectionMax\") !== selectionMax || this.getPrivate(\"step\") !== step) {\n\t\t\t// do not change to setPrivate, will cause SO\n\t\t\tthis.setPrivateRaw(\"selectionMin\", selectionMin);\n\t\t\tthis.setPrivateRaw(\"selectionMax\", selectionMax);\n\t\t\tthis.setPrivateRaw(\"step\", step);\n\t\t}\n\t}\n\n\t/**\n\t * Converts a relative position to a corresponding numeric value from axis\n\t * scale.\n\t *\n\t * @param   position  Relative position\n\t * @return            Value\n\t */\n\tpublic positionToValue(position: number): number {\n\t\tconst min = this.getPrivate(\"min\")!;\n\t\tconst max = this.getPrivate(\"max\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn position * (max - min) + min;\n\t\t}\n\t\telse {\n\t\t\treturn Math.pow(Math.E, (position * ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E)) + Math.log(min) * Math.LOG10E) / Math.LOG10E);\n\t\t}\n\t}\n\n\t/**\n\t * Convers value to a relative position on axis.\n\t *\n\t * @param   value  Value\n\t * @return         Relative position\n\t */\n\tpublic valueToPosition(value: number): number {\n\n\t\tconst min = this.getPrivate(\"min\")!;\n\t\tconst max = this.getPrivate(\"max\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn (value - min) / (max - min);\n\t\t}\n\t\telse {\n\t\t\tif (value <= 0) {\n\t\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\t\tvalue = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic valueToFinalPosition(value: number): number {\n\n\t\tconst min = this.getPrivate(\"minFinal\")!;\n\t\tconst max = this.getPrivate(\"maxFinal\")!;\n\n\t\tif (!this.get(\"logarithmic\")) {\n\t\t\treturn (value - min) / (max - min);\n\t\t}\n\t\telse {\n\t\t\tif (value <= 0) {\n\t\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\t\tvalue = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));\n\t\t}\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific value.\n\t *\n\t * @param   value     Numeric value\n\t * @param   location  Location\n\t * @param   baseValue Base value\n\t * @return            X coordinate\n\t */\n\tpublic getX(value: number, location: number, baseValue: number) {\n\t\tvalue = baseValue + (value - baseValue) * location;\n\n\t\tconst position = this.valueToPosition(value);\n\t\treturn this._settings.renderer.positionToCoordinate(position);\n\t}\n\n\t/**\n\t * Returns X coordinate in pixels corresponding to specific value.\n\t *\n\t * @param   value     Numeric value\n\t * @param   location  Location\n\t * @param   baseValue Base value\n\t * @return            X coordinate\n\t */\n\tpublic getY(value: number, location: number, baseValue: number) {\n\t\tvalue = baseValue + (value - baseValue) * location;\n\n\t\tconst position = this.valueToPosition(value)\n\t\treturn this._settings.renderer.positionToCoordinate(position);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number) {\n\t\tlet value = dataItem.get(field as any);\n\n\t\tconst stackToItem = dataItem.get(\"stackToItemX\");\n\t\tif (stackToItem) {\n\t\t\tconst series = dataItem.component as XYSeries;\n\t\t\tvalue = value * axisLocation + series.getStackedXValueWorking(dataItem, field);\n\t\t}\n\t\telse {\n\t\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\t}\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, _cellLocation: number, axisLocation: number): number {\n\t\tlet value = dataItem.get(field as any);\n\n\t\tconst stackToItem = dataItem.get(\"stackToItemY\");\n\t\tif (stackToItem) {\n\t\t\tconst series = dataItem.component as XYSeries;\n\t\t\tvalue = value * axisLocation + series.getStackedYValueWorking(dataItem, field);\n\t\t}\n\t\telse {\n\t\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\t}\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * Returns relative position of axis' `baseValue`.\n\t *\n\t * @return  Base value position\n\t */\n\tpublic basePosition(): number {\n\t\treturn this.valueToPosition(this.baseValue());\n\t}\n\n\t/**\n\t * Base value of the [[ValueAxis]], which determines positive and negative\n\t * values.\n\t *\n\t * @return Base value\n\t */\n\tpublic baseValue(): number {\n\t\tconst min = Math.min(this.getPrivate(\"minFinal\", -Infinity), this.getPrivate(\"selectionMin\", -Infinity));\n\t\tconst max = Math.max(this.getPrivate(\"maxFinal\", Infinity), this.getPrivate(\"selectionMax\", Infinity));\n\t\tlet baseValue = this.get(\"baseValue\", 0);\n\n\t\tif (baseValue < min) {\n\t\t\tbaseValue = min;\n\t\t}\n\n\t\tif (baseValue > max) {\n\t\t\tbaseValue = max\n\t\t}\n\n\t\treturn baseValue;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic cellEndValue(value: number): number {\n\t\treturn value;\n\t}\n\n\tprotected fixSmallStep(step: number): number {\n\t\t// happens because of floating point error\n\t\tif (1 + step === 1) {\n\t\t\tstep *= 2;\n\t\t\treturn this.fixSmallStep(step);\n\t\t}\n\t\treturn step;\n\t}\n\n\tprotected _fixMin(min: number) {\n\t\treturn min;\n\t}\n\n\tprotected _fixMax(max: number) {\n\t\treturn max;\n\t}\n\n\tpublic _calculateTotals() {\n\t\tif (this.get(\"calculateTotals\")) {\n\t\t\tlet series = this.series[0];\n\t\t\tif (series) {\n\t\t\t\tlet startIndex = series.startIndex();\n\n\t\t\t\tif (series.dataItems.length > 0) {\n\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tstartIndex--;\n\t\t\t\t\t}\n\t\t\t\t\tlet endIndex = series.endIndex();\n\t\t\t\t\tif (endIndex < series.dataItems.length) {\n\t\t\t\t\t\tendIndex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet field: string | undefined;\n\t\t\t\t\tlet vc: string | undefined;\n\n\t\t\t\t\tif (series.get(\"yAxis\") == this) {\n\t\t\t\t\t\tfield = \"valueY\";\n\t\t\t\t\t\tvc = \"vcy\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (series.get(\"xAxis\") == this) {\n\t\t\t\t\t\tfield = \"valueX\";\n\t\t\t\t\t\tvc = \"vcx\";\n\t\t\t\t\t}\n\n\t\t\t\t\tlet fieldWorking = field + \"Working\";\n\n\t\t\t\t\tif (field) {\n\t\t\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\t\t\t\tlet sum = 0;\n\t\t\t\t\t\t\tlet total = 0;\n\n\t\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\t\tif (!series.get(\"excludeFromTotal\")) {\n\t\t\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\t\t\tlet value = dataItem.get(fieldWorking as any) * series.get(vc as any);\n\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNaN(value)) {\n\t\t\t\t\t\t\t\t\t\t\tsum += value;\n\t\t\t\t\t\t\t\t\t\t\ttotal += Math.abs(value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\t\tif (!series.get(\"excludeFromTotal\")) {\n\t\t\t\t\t\t\t\t\tlet dataItem = series.dataItems[i];\n\t\t\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\t\t\tlet value = dataItem.get(fieldWorking as any) * series.get(vc as any);\n\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNaN(value)) {\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"Total\") as any, total);\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"Sum\") as any, sum);\n\t\t\t\t\t\t\t\t\t\t\tdataItem.set((field + \"TotalPercent\") as any, value / total * 100);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _getSelectionMinMax() {\n\t\tconst min = this.getPrivate(\"minFinal\");\n\t\tconst max = this.getPrivate(\"maxFinal\");\n\n\t\tconst minDefined = this.get(\"min\");\n\t\tconst maxDefined = this.get(\"max\");\n\n\t\tlet extraMin = this.get(\"extraMin\", 0);\n\t\tlet extraMax = this.get(\"extraMax\", 0);\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tif (this.get(\"extraMin\") == null) {\n\t\t\t\textraMin = 0.1;\n\t\t\t}\n\t\t\tif (this.get(\"extraMax\") == null) {\n\t\t\t\textraMax = 0.2;\n\t\t\t}\n\t\t}\n\n\t\tconst gridCount = this.get(\"renderer\").gridCount();\n\t\tconst selectionStrictMinMax = this.get(\"strictMinMaxSelection\");\n\t\tconst strictMinMax = this.get(\"strictMinMax\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tlet selectionMin = max;\n\t\t\tlet selectionMax = min;\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (!series.get(\"ignoreMinMax\")) {\n\t\t\t\t\tlet seriesMin: number | undefined;\n\t\t\t\t\tlet seriesMax: number | undefined;\n\t\t\t\t\tconst outOfSelection = series.getPrivate(\"outOfSelection\");\n\t\t\t\t\tif (series.get(\"xAxis\") === this) {\n\t\t\t\t\t\tif (!outOfSelection) {\n\t\t\t\t\t\t\tseriesMin = series.getPrivate(\"selectionMinX\", series.getPrivate(\"minX\"));\n\t\t\t\t\t\t\tseriesMax = series.getPrivate(\"selectionMaxX\", series.getPrivate(\"maxX\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (series.get(\"yAxis\") === this) {\n\t\t\t\t\t\tif (!outOfSelection) {\n\t\t\t\t\t\t\tseriesMin = series.getPrivate(\"selectionMinY\", series.getPrivate(\"minY\"));\n\t\t\t\t\t\t\tseriesMax = series.getPrivate(\"selectionMaxY\", series.getPrivate(\"maxY\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!series.isHidden() && !series.isShowing()) {\n\t\t\t\t\t\tif ($type.isNumber(seriesMin)) {\n\t\t\t\t\t\t\tselectionMin = Math.min(selectionMin, seriesMin);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(seriesMax)) {\n\t\t\t\t\t\t\tselectionMax = Math.max(selectionMax, seriesMax);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.axisRanges.each((range) => {\n\t\t\t\tif (range.get(\"affectsMinMax\")) {\n\t\t\t\t\tlet value = range.get(\"value\");\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tselectionMin = Math.min(selectionMin, value);\n\t\t\t\t\t\tselectionMax = Math.max(selectionMax, value);\n\t\t\t\t\t}\n\t\t\t\t\tvalue = range.get(\"endValue\");\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tselectionMin = Math.min(selectionMin, value);\n\t\t\t\t\t\tselectionMax = Math.max(selectionMax, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (selectionMin > selectionMax) {\n\t\t\t\t[selectionMin, selectionMax] = [selectionMax, selectionMin]\n\t\t\t}\n\n\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\tif (strictMinMax) {\n\t\t\t\t\tselectionMin = minDefined;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tselectionMin = min;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (strictMinMax) {\n\t\t\t\tif ($type.isNumber(this._minReal)) {\n\t\t\t\t\tselectionMin = this._minReal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\tif (strictMinMax) {\n\t\t\t\t\tselectionMax = maxDefined;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tselectionMax = max;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (strictMinMax) {\n\t\t\t\tif ($type.isNumber(this._maxReal)) {\n\t\t\t\t\tselectionMax = this._maxReal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (selectionMin === selectionMax) {\n\t\t\t\tselectionMin -= this._deltaMinMax;\n\t\t\t\tselectionMax += this._deltaMinMax;\n\n\t\t\t\tlet minMaxStep2 = this._adjustMinMax(selectionMin, selectionMax, gridCount, strictMinMax);\n\t\t\t\tselectionMin = minMaxStep2.min;\n\t\t\t\tselectionMax = minMaxStep2.max;\n\t\t\t}\n\n\t\t\tlet selectionMinReal = selectionMin;\n\t\t\tlet selectionMaxReal = selectionMax;\n\n\t\t\tselectionMin -= (selectionMax - selectionMin) * extraMin;\n\t\t\tselectionMax += (selectionMax - selectionMin) * extraMax;\n\n\t\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount);\n\n\t\t\tselectionMin = minMaxStep.min;\n\t\t\tselectionMax = minMaxStep.max;\n\n\t\t\tselectionMin = $math.fitToRange(selectionMin, min, max);\n\t\t\tselectionMax = $math.fitToRange(selectionMax, min, max);\n\n\t\t\t// do it for the second time !important\t\t\t\n\t\t\tminMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n\n\t\t\tif (!strictMinMax) {\n\t\t\t\tselectionMin = minMaxStep.min;\n\t\t\t\tselectionMax = minMaxStep.max;\n\t\t\t}\n\n\t\t\tconst syncWithAxis = this.get(\"syncWithAxis\");\n\t\t\tif (syncWithAxis) {\n\t\t\t\tminMaxStep = this._syncAxes(selectionMin, selectionMax, minMaxStep.step, syncWithAxis.getPrivate(\"selectionMinFinal\", syncWithAxis.getPrivate(\"minFinal\", 0)), syncWithAxis.getPrivate(\"selectionMaxFinal\", syncWithAxis.getPrivate(\"maxFinal\", 1)), syncWithAxis.getPrivate(\"selectionStepFinal\", syncWithAxis.getPrivate(\"step\", 1)));\n\n\t\t\t\tselectionMin = minMaxStep.min;\n\t\t\t\tselectionMax = minMaxStep.max;\n\t\t\t}\n\n\t\t\tif (strictMinMax) {\n\t\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\t\tselectionMin = Math.max(selectionMin, minDefined);\n\t\t\t\t}\n\n\t\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\t\tselectionMax = Math.min(selectionMax, maxDefined);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (selectionStrictMinMax) {\n\t\t\t\tselectionMin = selectionMinReal - (selectionMax - selectionMin) * extraMin;\n\t\t\t\tselectionMax = selectionMaxReal + (selectionMax - selectionMin) * extraMax;\n\t\t\t}\n\n\t\t\tif (this.get(\"logarithmic\")) {\n\n\t\t\t\tif (selectionMin <= 0) {\n\t\t\t\t\tselectionMin = selectionMinReal * (1 - Math.min(extraMin, 0.99));\n\t\t\t\t}\n\n\t\t\t\tif (selectionMin < min) {\n\t\t\t\t\tselectionMin = min;\n\t\t\t\t}\n\t\t\t\tif (selectionMax > max) {\n\t\t\t\t\tselectionMax = max;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet start = this.valueToFinalPosition(selectionMin);\n\t\t\tlet end = this.valueToFinalPosition(selectionMax);\n\n\t\t\tthis.setPrivateRaw(\"selectionMinFinal\", selectionMin);\n\t\t\tthis.setPrivateRaw(\"selectionMaxFinal\", selectionMax);\n\t\t\tthis.setPrivateRaw(\"selectionStepFinal\", minMaxStep.step);\n\n\t\t\tthis.zoom(start, end);\n\t\t}\n\t}\n\n\n\tprotected _getMinMax() {\n\t\tlet minDefined = this.get(\"min\");\n\t\tlet maxDefined = this.get(\"max\");\n\n\t\tlet min = Infinity;\n\t\tlet max = -Infinity;\n\n\t\tlet extraMin = this.get(\"extraMin\", 0);\n\t\tlet extraMax = this.get(\"extraMax\", 0);\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tif (this.get(\"extraMin\") == null) {\n\t\t\t\textraMin = 0.1;\n\t\t\t}\n\t\t\tif (this.get(\"extraMax\") == null) {\n\t\t\t\textraMax = 0.2;\n\t\t\t}\n\t\t}\n\n\t\tlet minDiff = Infinity;\n\n\t\t$array.each(this.series, (series) => {\n\t\t\tif (!series.get(\"ignoreMinMax\")) {\n\t\t\t\tlet seriesMin: number | undefined;\n\t\t\t\tlet seriesMax: number | undefined;\n\t\t\t\tif (series.get(\"xAxis\") === this) {\n\t\t\t\t\tseriesMin = series.getPrivate(\"minX\");\n\t\t\t\t\tseriesMax = series.getPrivate(\"maxX\");\n\t\t\t\t}\n\t\t\t\telse if (series.get(\"yAxis\") === this) {\n\t\t\t\t\tseriesMin = series.getPrivate(\"minY\");\n\t\t\t\t\tseriesMax = series.getPrivate(\"maxY\");\n\t\t\t\t}\n\n\t\t\t\tif ($type.isNumber(seriesMin) && $type.isNumber(seriesMax)) {\n\t\t\t\t\tmin = Math.min(min, seriesMin);\n\t\t\t\t\tmax = Math.max(max, seriesMax);\n\n\t\t\t\t\tlet diff = seriesMax - seriesMin;\n\n\t\t\t\t\tif (diff <= 0) {\n\t\t\t\t\t\tdiff = Math.abs(seriesMax / 100);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff < minDiff) {\n\t\t\t\t\t\tminDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.axisRanges.each((range) => {\n\t\t\tif (range.get(\"affectsMinMax\")) {\n\t\t\t\tlet value = range.get(\"value\");\n\t\t\t\tif (value != null) {\n\t\t\t\t\tmin = Math.min(min, value);\n\t\t\t\t\tmax = Math.max(max, value);\n\t\t\t\t}\n\t\t\t\tvalue = range.get(\"endValue\");\n\t\t\t\tif (value != null) {\n\t\t\t\t\tmin = Math.min(min, value);\n\t\t\t\t\tmax = Math.max(max, value);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tlet treatZeroAs = this.get(\"treatZeroAs\");\n\t\t\tif ($type.isNumber(treatZeroAs)) {\n\t\t\t\tif (min <= 0) {\n\t\t\t\t\tmin = treatZeroAs;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (min <= 0) {\n\t\t\t\tnew Error(\"Logarithmic value axis can not have values <= 0.\");\n\t\t\t}\n\t\t}\n\n\t\tif (min === 0 && max === 0) {\n\t\t\tmax = 0.9;\n\t\t\tmin = -0.9;\n\t\t}\n\n\t\tif ($type.isNumber(minDefined)) {\n\t\t\tmin = minDefined;\n\t\t}\n\t\tif ($type.isNumber(maxDefined)) {\n\t\t\tmax = maxDefined;\n\t\t}\n\n\t\t// meaning no min/max found on series/ranges and no min/max was defined\n\t\tif (min === Infinity || max === -Infinity) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst initialMin = min;\n\t\tconst initialMax = max;\n\n\t\t// adapter\n\t\tlet minAdapted = this.adapters.fold(\"min\", min);\n\t\tlet maxAdapted = this.adapters.fold(\"max\", max);\n\n\t\tif ($type.isNumber(minAdapted)) {\n\t\t\tmin = minAdapted;\n\t\t}\n\n\t\tif ($type.isNumber(maxAdapted)) {\n\t\t\tmax = maxAdapted;\n\t\t}\n\n\t\t// DateAxis does some magic here\n\t\tmin = this._fixMin(min);\n\t\tmax = this._fixMax(max);\n\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\t\t\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\n\t\t\tif (max - min !== 0) {\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._getDelta(max);\n\t\t\t}\n\n\t\t\tmin -= this._deltaMinMax;\n\t\t\tmax += this._deltaMinMax;\n\t\t}\n\n\t\t// add extras\n\t\tmin -= (max - min) * extraMin;\n\t\tmax += (max - min) * extraMax;\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\t// don't let min go below 0 if real min is >= 0\n\t\t\tif (min < 0 && initialMin >= 0) {\n\t\t\t\tmin = 0;\n\t\t\t}\n\t\t\t// don't let max go above 0 if real max is <= 0\n\t\t\tif (max > 0 && initialMax <= 0) {\n\t\t\t\tmax = 0;\n\t\t\t}\n\t\t}\n\n\t\tthis._minReal = min;\n\t\tthis._maxReal = max;\n\t\tlet strictMinMax = this.get(\"strictMinMax\");\n\t\tlet strictMinMaxSelection = this.get(\"strictMinMaxSelection\", false);\n\t\tif (strictMinMaxSelection) {\n\t\t\tstrictMinMax = strictMinMaxSelection;\n\t\t}\n\n\t\tlet strict = strictMinMax;\n\t\tif ($type.isNumber(maxDefined)) {\n\t\t\tstrict = true;\n\t\t}\n\n\t\tlet gridCount = this.get(\"renderer\").gridCount();\n\n\t\tlet minMaxStep: IMinMaxStep = this._adjustMinMax(min, max, gridCount, strict);\n\n\t\tmin = minMaxStep.min;\n\t\tmax = minMaxStep.max;\n\n\t\t// do it for the second time with strict true (importat!)\n\t\tminMaxStep = this._adjustMinMax(min, max, gridCount, true);\n\n\t\tmin = minMaxStep.min;\n\t\tmax = minMaxStep.max;\n\n\t\t// return min max if strict\n\t\tif (strictMinMax) {\n\t\t\tif ($type.isNumber(minDefined)) {\n\t\t\t\tmin = minDefined;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = this._minReal;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(maxDefined)) {\n\t\t\t\tmax = maxDefined;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax = this._maxReal;\n\t\t\t}\n\n\t\t\tif (max - min <= 0.00000001) {\n\t\t\t\tmin -= this._deltaMinMax;\n\t\t\t\tmax += this._deltaMinMax;\n\t\t\t}\n\n\t\t\tmin -= (max - min) * extraMin;\n\t\t\tmax += (max - min) * extraMax;\n\t\t}\n\n\t\tminAdapted = this.adapters.fold(\"min\", min);\n\t\tmaxAdapted = this.adapters.fold(\"max\", max);\n\n\t\tif ($type.isNumber(minAdapted)) {\n\t\t\tmin = minAdapted;\n\t\t}\n\n\t\tif ($type.isNumber(maxAdapted)) {\n\t\t\tmax = maxAdapted;\n\t\t}\n\n\t\tif (minDiff == Infinity) {\n\t\t\tminDiff = (max - min)\n\t\t}\n\n\t\t// this is to avoid floating point number error\n\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(max - min)) * Math.LOG10E)) + 5;\n\n\t\tmin = $math.round(min, decCount);\n\t\tmax = $math.round(max, decCount);\n\n\t\tconst syncWithAxis = this.get(\"syncWithAxis\");\n\t\tif (syncWithAxis) {\n\t\t\tminMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate(\"minFinal\", syncWithAxis.getPrivate(\"min\", 0)), syncWithAxis.getPrivate(\"maxFinal\", syncWithAxis.getPrivate(\"max\", 1)), syncWithAxis.getPrivate(\"step\", 1));\n\t\t\tmin = minMaxStep.min;\n\t\t\tmax = minMaxStep.max;\n\t\t}\n\n\t\tthis.setPrivateRaw(\"maxZoomFactor\", (max - min) / minDiff * this.get(\"maxZoomFactor\", 100));\n\n\t\tif (this.get(\"logarithmic\")) {\n\t\t\tthis._minLogAdjusted = min;\n\t\t\tmin = this._minReal;\n\t\t\tmax = this._maxReal;\n\n\t\t\tif (min <= 0) {\n\t\t\t\tmin = initialMin * (1 - Math.min(extraMin, 0.99));\n\t\t\t}\n\t\t}\n\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tif (this.getPrivate(\"minFinal\") !== min || this.getPrivate(\"maxFinal\") !== max) {\n\t\t\t\tthis.setPrivate(\"minFinal\", min);\n\t\t\t\tthis.setPrivate(\"maxFinal\", max);\n\t\t\t\tthis._saveMinMax(min, max);\n\n\t\t\t\tconst duration = this.get(\"interpolationDuration\", 0);\n\t\t\t\tconst easing = this.get(\"interpolationEasing\");\n\n\t\t\t\tthis.animatePrivate({ key: \"min\", to: min, duration, easing });\n\t\t\t\tthis.animatePrivate({ key: \"max\", to: max, duration, easing });\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _getDelta(max: number) {\n\t\t// the number by which we need to raise 10 to get difference\n\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\n\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\n\t\tlet power = Math.pow(10, Math.floor(exponent));\n\n\t\t// reduce this number by 10 times\n\t\tpower = power / 10;\n\n\t\tthis._deltaMinMax = power;\n\t}\n\n\tprotected _saveMinMax(_min: number, _max: number) {\n\n\t}\n\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\n\t\t// will fail if 0\n\t\tif (gridCount <= 1) {\n\t\t\tgridCount = 1;\n\t\t}\n\n\t\tgridCount = Math.round(gridCount);\n\n\t\tlet initialMin: number = min;\n\t\tlet initialMax: number = max;\n\n\t\tlet difference = max - min;\n\n\t\t// in case min and max is the same, use max\n\t\tif (difference === 0) {\n\t\t\tdifference = Math.abs(max);\n\t\t}\n\n\t\t// the number by which we need to raise 10 to get difference\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\n\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\n\t\tlet power = Math.pow(10, Math.floor(exponent));\n\n\t\t// reduce this number by 10 times\n\t\tpower = power / 10;\n\n\t\tlet extra: number = power;\n\t\tif (strictMode) {\n\t\t\textra = 0;\n\t\t}\n\n\t\t// round down min\n\t\tif (strictMode) {\n\t\t\tmin = Math.floor(min / power) * power;\n\t\t\t// round up max\n\t\t\tmax = Math.ceil(max / power) * power;\n\t\t}\n\t\telse {\n\t\t\tmin = Math.ceil(min / power) * power - extra;\n\t\t\t// round up max\n\t\t\tmax = Math.floor(max / power) * power + extra;\n\t\t}\n\n\t\t// don't let min go below 0 if real min is >= 0\n\t\tif (min < 0 && initialMin >= 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\t// don't let max go above 0 if real max is <= 0\n\t\tif (max > 0 && initialMax <= 0) {\n\t\t\tmax = 0;\n\t\t}\n\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n\t\tpower = Math.pow(10, Math.floor(exponent));\n\t\tpower = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance\n\n\t\t// approximate difference between two grid lines\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n\n\t\t// the step should divide by  2, 5, and 10.\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\n\n\t\tif (stepDivisor > 5) {\n\t\t\tstepDivisor = 10;\n\t\t}\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\n\t\t\tstepDivisor = 5;\n\t\t}\n\n\t\t// now get real step\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n\n\t\tlet maxPrecision = this.get(\"maxPrecision\");\n\t\tif ($type.isNumber(maxPrecision)) {\n\t\t\tlet ceiledStep = $math.ceil(step, maxPrecision);\n\t\t\tif (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {\n\t\t\t\tstep = ceiledStep;\n\t\t\t}\n\t\t}\n\n\t\tlet decCount: number = 0;\n\t\t// in case numbers are smaller than 1\n\t\tif (stepPower < 1) {\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\n\t\t\t// round step\n\t\t\tstep = $math.round(step, decCount);\n\t\t}\n\n\t\t// final min and max\n\t\tlet minCount = Math.floor(min / step);\n\n\t\tmin = $math.round(step * minCount, decCount);\n\n\t\tlet maxCount: number;\n\n\t\tif (!strictMode) {\n\t\t\tmaxCount = Math.ceil(max / step);\n\t\t}\n\t\telse {\n\t\t\tmaxCount = Math.floor(max / step);\n\t\t}\n\n\t\tif (maxCount === minCount) {\n\t\t\tmaxCount++;\n\t\t}\n\n\t\tmax = $math.round(step * maxCount, decCount);\n\n\t\tif (max < initialMax) {\n\t\t\tmax = max + step;\n\t\t}\n\n\t\tif (min > initialMin) {\n\t\t\tmin = min - step;\n\t\t}\n\n\n\t\tstep = this.fixSmallStep(step);\n\n\t\treturn { min: min, max: max, step: step };\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * @param   position  Position\n\t * @return            Tooltip text\n\t */\n\tpublic getTooltipText(position: number): string | undefined {\n\t\tconst numberFormat = this.get(\"tooltipNumberFormat\", this.get(\"numberFormat\"));\n\t\tconst formatter = this.getNumberFormatter();\n\t\tconst extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n\t\tconst decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n\t\tconst value = $math.round(this.positionToValue(position), decimals);\n\n\t\tif (numberFormat) {\n\t\t\treturn formatter.format(value, numberFormat);\n\t\t}\n\t\telse {\n\t\t\treturn formatter.format(value, undefined, decimals);\n\t\t\t//label.set(\"text\", this.getNumberFormatter().format(value, undefined, this.getPrivate(\"stepDecimalPlaces\")));\n\t\t}\n\n\t\t// //@todo number formatter + tag\n\t\t// return $math.round(this.positionToValue(position), this.getPrivate(\"stepDecimalPlaces\")).toString();\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number): DataItem<IXYSeriesDataItem> | undefined {\n\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\tlet value = this.positionToValue(position);\n\n\t\tlet index: number | undefined = undefined;\n\t\tlet oldDiff: number;\n\t\t$array.each(series.dataItems, (dataItem, i) => {\n\t\t\tconst diff = Math.abs(dataItem.get(fieldName) - value);\n\t\t\tif (index === undefined || diff < oldDiff) {\n\t\t\t\tindex = i;\n\t\t\t\toldDiff = diff;\n\t\t\t}\n\t\t});\n\n\t\tif (index != null) {\n\t\t\treturn series.dataItems[index];\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` values.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start value\n\t * @param  end       End value\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToValues(start: number, end: number, duration?: number) {\n\t\tconst min = this.getPrivate(\"minFinal\", 0);\n\t\tconst max = this.getPrivate(\"maxFinal\", 0);\n\t\tif (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n\t\t\tthis.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n\t\t}\n\t}\n\n\n\t/**\n\t * Syncs with a target axis.\n\t *\n\t * @param  min  Min\n\t * @param  max  Max\n\t * @param  step Step\n\t */\n\tprotected _syncAxes(min: number, max: number, step: number, syncMin: number, syncMax: number, syncStep: number) {\n\t\tlet axis = this.get(\"syncWithAxis\");\n\t\tif (axis) {\n\t\t\tlet count: number = Math.round(syncMax - syncMin) / syncStep;\n\t\t\tlet currentCount = Math.round((max - min) / step);\n\n\t\t\tlet gridCount = this.get(\"renderer\").gridCount();\n\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\n\t\t\t\tlet synced = false;\n\t\t\t\tlet c = 0\n\t\t\t\tlet diff = (max - min) * 0.01;\n\t\t\t\tlet omin = min;\n\t\t\t\tlet omax = max;\n\t\t\t\tlet ostep = step;\n\n\t\t\t\twhile (synced != true) {\n\t\t\t\t\tsynced = this._checkSync(omin, omax, ostep, count);\n\t\t\t\t\tc++;\n\t\t\t\t\tif (c > 500) {\n\t\t\t\t\t\tsynced = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!synced) {\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\n\t\t\t\t\t\t\tomin = min - diff * c;\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\n\t\t\t\t\t\t\t\tomin = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tomax = max + diff * c;\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\n\t\t\t\t\t\t\t\tomax = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);\n\t\t\t\t\t\tomin = minMaxStep.min;\n\t\t\t\t\t\tomax = minMaxStep.max;\n\t\t\t\t\t\tostep = minMaxStep.step;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmin = omin;\n\t\t\t\t\t\tmax = omax;\n\t\t\t\t\t\tstep = ostep;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { min: min, max: max, step: step };\n\t}\n\n\t/**\n\t * Returns `true` if axis needs to be resunced with some other axis.\n\t */\n\tprotected _checkSync(min: number, max: number, step: number, count: number): boolean {\n\t\tlet currentCount = (max - min) / step;\n\t\tfor (let i = 1; i < count; i++) {\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}