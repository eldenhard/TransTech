{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\n/**\r\n * Picture pattern.\r\n *\r\n * @since 5.2.15\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar PicturePattern =\n/** @class */\nfunction (_super) {\n  __extends(PicturePattern, _super);\n\n  function PicturePattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_image\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(PicturePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      this._clear = true;\n\n      if (this.isDirty(\"src\")) {\n        this._load();\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n\n      var image = this._image;\n\n      if (image) {\n        var patternWidth = this.get(\"width\", 100);\n        var patternHeight = this.get(\"height\", 100); // Fit\n\n        var fit = this.get(\"fit\", \"image\");\n        var width = 0;\n        var height = 0;\n\n        if (fit == \"pattern\") {\n          width = patternWidth;\n          height = patternHeight;\n        } else {\n          width = image.width;\n          height = image.height;\n\n          if (fit == \"image\") {\n            this.set(\"width\", width);\n            this.set(\"height\", height);\n          }\n        } // Position\n\n\n        var centered = this.get(\"centered\", true);\n        var x = 0;\n        var y = 0;\n\n        if (centered) {\n          x = patternWidth / 2 - width / 2;\n          y = patternHeight / 2 - height / 2;\n        }\n\n        this._display.image(image, width, height, x, y);\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern.prototype, \"_load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var src = this.get(\"src\");\n\n      if (src) {\n        var image_1 = new Image(); //image.crossOrigin = \"Anonymous\";\n\n        image_1.src = src;\n        image_1.decode().then(function () {\n          _this._image = image_1;\n\n          _this._draw();\n\n          if (_this.events.isEnabled(\"loaded\")) {\n            _this.events.dispatch(\"loaded\", {\n              type: \"loaded\",\n              target: _this\n            });\n          }\n        }).catch(function (_error) {// TODO: maybe raise error?\n        });\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PicturePattern\"\n  });\n  Object.defineProperty(PicturePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([PicturePattern.className])\n  });\n  return PicturePattern;\n}(Pattern);\n\nexport { PicturePattern };","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAA2E,WAA3E;AA2CA;;;;;;;;AAOA;AAAA;AAAA;EAAoCC;;EAApC;IAAA;;IAQCC;sBAAA;wBAAA;oBAAA;;IAAA;;EAqEA;;;;;;WAnEA;MACCC,iBAAMC,cAAN,CAAoBC,IAApB,CAAoB,IAApB;;MAEA,KAAKC,MAAL,GAAc,IAAd;;MAEA,IAAI,KAAKC,OAAL,CAAa,KAAb,CAAJ,EAAyB;QACxB,KAAKC,KAAL;MACA;IACD;;;;;;WAED;MACCL,iBAAMM,KAAN,CAAWJ,IAAX,CAAW,IAAX;;MAEA,IAAMK,KAAK,GAAG,KAAKC,MAAnB;;MACA,IAAID,KAAJ,EAAW;QAEV,IAAME,YAAY,GAAG,KAAKC,GAAL,CAAS,OAAT,EAAkB,GAAlB,CAArB;QACA,IAAMC,aAAa,GAAG,KAAKD,GAAL,CAAS,QAAT,EAAmB,GAAnB,CAAtB,CAHU,CAKV;;QACA,IAAME,GAAG,GAAG,KAAKF,GAAL,CAAS,KAAT,EAAgB,OAAhB,CAAZ;QACA,IAAIG,KAAK,GAAG,CAAZ;QACA,IAAIC,MAAM,GAAG,CAAb;;QACA,IAAIF,GAAG,IAAI,SAAX,EAAsB;UACrBC,KAAK,GAAGJ,YAAR;UACAK,MAAM,GAAGH,aAAT;QACA,CAHD,MAIK;UACJE,KAAK,GAAGN,KAAK,CAACM,KAAd;UACAC,MAAM,GAAGP,KAAK,CAACO,MAAf;;UACA,IAAIF,GAAG,IAAI,OAAX,EAAoB;YACnB,KAAKG,GAAL,CAAS,OAAT,EAAkBF,KAAlB;YACA,KAAKE,GAAL,CAAS,QAAT,EAAmBD,MAAnB;UACA;QACD,CApBS,CAsBV;;;QACA,IAAME,QAAQ,GAAG,KAAKN,GAAL,CAAS,UAAT,EAAqB,IAArB,CAAjB;QACA,IAAIO,CAAC,GAAG,CAAR;QACA,IAAIC,CAAC,GAAG,CAAR;;QACA,IAAIF,QAAJ,EAAc;UACbC,CAAC,GAAGR,YAAY,GAAG,CAAf,GAAmBI,KAAK,GAAG,CAA/B;UACAK,CAAC,GAAGP,aAAa,GAAG,CAAhB,GAAoBG,MAAM,GAAG,CAAjC;QACA;;QACD,KAAKK,QAAL,CAAcZ,KAAd,CAAoBA,KAApB,EAA2BM,KAA3B,EAAkCC,MAAlC,EAA0CG,CAA1C,EAA6CC,CAA7C;MACA;IAED;;;;;;WAED;MAAA;;MACC,IAAME,GAAG,GAAG,KAAKV,GAAL,CAAS,KAAT,CAAZ;;MACA,IAAIU,GAAJ,EAAS;QACR,IAAMC,OAAK,GAAG,IAAIC,KAAJ,EAAd,CADQ,CAER;;QACAD,OAAK,CAACD,GAAN,GAAYA,GAAZ;QACAC,OAAK,CAACE,MAAN,GAAeC,IAAf,CAAoB;UACnBC,KAAI,CAACjB,MAAL,GAAca,OAAd;;UACAI,KAAI,CAACnB,KAAL;;UACA,IAAImB,KAAI,CAACC,MAAL,CAAYC,SAAZ,CAAsB,QAAtB,CAAJ,EAAqC;YACpCF,KAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqB,QAArB,EAA+B;cAAEC,IAAI,EAAE,QAAR;cAAkBC,MAAM,EAAEL;YAA1B,CAA/B;UACA;QACD,CAND,EAMGM,KANH,CAMS,UAACC,MAAD,EAAY,CACpB;QACA,CARD;MASA;IACD;;EAtEDjC;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0CF,OAAO,CAACoC,UAAR,CAAmBC,MAAnB,CAA0B,CAACC,cAAc,CAACC,SAAhB,CAA1B;EAA1C;EAuED;AAAC,CA7ED,CAAoCvC,OAApC;;SAAasC","names":["Pattern","__extends","Object","_super","_beforeChanged","call","_clear","isDirty","_load","_draw","image","_image","patternWidth","get","patternHeight","fit","width","height","set","centered","x","y","_display","src","image_1","Image","decode","then","_this","events","isEnabled","dispatch","type","target","catch","_error","classNames","concat","PicturePattern","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/render/patterns/PicturePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate, IPatternEvents } from \"./Pattern\";\n\nexport interface IPicturePatternSettings extends IPatternSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * How pattern should be sized:\n\t *\n\t * * `\"image\"` (default) - pattern will be sized to actual image dimensions.\n\t * * `\"pattern\"` - image will sized to image dimensions.\n\t * * `\"none\"` - image will be placed in the pattern, regardless of either dimensions.\n\t * \n\t * @default \"image\"\n\t */\n\tfit?: \"image\" | \"pattern\" | \"none\";\n\n\t/**\n\t * Center images.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IPicturePatternPrivate extends IPatternPrivate {\n}\n\nexport interface IPicturePatternEvents extends IPatternEvents {\n\n\t/**\n\t * Invoked when related image is loaded.\n\t */\n\tloaded: {};\n\n}\n\n/**\n * Picture pattern.\n *\n * @since 5.2.15\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class PicturePattern extends Pattern {\n\tdeclare public _settings: IPicturePatternSettings;\n\tdeclare public _privateSettings: IPicturePatternPrivate;\n\tdeclare public _events: IPicturePatternEvents;\n\n\tpublic static className: string = \"PicturePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([PicturePattern.className]);\n\n\tpublic _image: HTMLImageElement | undefined;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._clear = true;\n\n\t\tif (this.isDirty(\"src\")) {\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst image = this._image;\n\t\tif (image) {\n\n\t\t\tconst patternWidth = this.get(\"width\", 100);\n\t\t\tconst patternHeight = this.get(\"height\", 100);\n\n\t\t\t// Fit\n\t\t\tconst fit = this.get(\"fit\", \"image\");\n\t\t\tlet width = 0;\n\t\t\tlet height = 0;\n\t\t\tif (fit == \"pattern\") {\n\t\t\t\twidth = patternWidth;\n\t\t\t\theight = patternHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\twidth = image.width;\n\t\t\t\theight = image.height;\n\t\t\t\tif (fit == \"image\") {\n\t\t\t\t\tthis.set(\"width\", width);\n\t\t\t\t\tthis.set(\"height\", height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position\n\t\t\tconst centered = this.get(\"centered\", true);\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\t\t\tif (centered) {\n\t\t\t\tx = patternWidth / 2 - width / 2;\n\t\t\t\ty = patternHeight / 2 - height / 2;\n\t\t\t}\n\t\t\tthis._display.image(image, width, height, x, y);\n\t\t}\n\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tconst image = new Image();\n\t\t\t//image.crossOrigin = \"Anonymous\";\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._image = image;\n\t\t\t\tthis._draw();\n\t\t\t\tif (this.events.isEnabled(\"loaded\")) {\n\t\t\t\t\tthis.events.dispatch(\"loaded\", { type: \"loaded\", target: this });\n\t\t\t\t}\n\t\t\t}).catch((_error: any) => {\n\t\t\t\t// TODO: maybe raise error?\n\t\t\t});\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}