{"ast":null,"code":"import api from \"@/api/auth\";\nimport staff_api from '@/api/staff';\nimport { setItem } from \"@/helpers/persistanseStorage\";\nconst resource = api.resource;\nconst state = {\n  user: {},\n  uid: null,\n  isLoggedIn: false,\n  groups: null,\n  users: null\n};\nexport const mutationTypes = {\n  loginStart: `[${resource}] loginStart`,\n  loginSuccess: `[${resource}] loginSuccess`,\n  loginFailure: `[${resource}] loginFailure`,\n  // у нас форма авторизации показываетс когда isLoggedIn = false. Когда авторизация успешна - там тру. Нам нужен отдельный обработчик чтобы сделать логаут\n  logout: `[${resource}] logout`,\n  getStaffGroups: `[${resource}] getStaffGroups`,\n  staffGlobal: `[${resource}] staffGlobal`\n};\nexport const actionTypes = {\n  login: `${resource} login`,\n  logout: `${resource} logout`,\n  getStaffGroups: `${resource} getStaffGroups`,\n  staffGlobal: `[${resource}] staffGlobal`\n};\nconst mutations = {\n  [mutationTypes.loginSuccess](state, user) {\n    state.user = user;\n    state.uid = user.user.id;\n    state.isLoggedIn = true;\n    setItem('accessToken', user.token);\n  },\n\n  [mutationTypes.logout](state) {\n    state.user = {};\n    state.uid = null;\n    state.isLoggedIn = false;\n    setItem('accessToken', '');\n  },\n\n  [mutationTypes.getStaffGroups](state, data) {\n    state.groups = data;\n  },\n\n  [mutationTypes.staffGlobal](state, data) {\n    state.users = data;\n  }\n\n};\nconst actions = {\n  async [actionTypes.login](context, data) {\n    return new Promise((resolve, reject) => {\n      api.login(data).then(response => {\n        context.commit(mutationTypes.loginSuccess, response.data);\n        resolve(response.data);\n      }).catch(error => {\n        setItem('accessToken', '');\n        reject(error);\n      });\n    });\n  },\n\n  async [actionTypes.logout](context) {\n    return new Promise(resolve => {\n      context.commit(mutationTypes.logout);\n    });\n  },\n\n  async [actionTypes.getStaffGroups](context) {\n    return new Promise((resolve, reject) => {\n      staff_api.getStaffGroup().then(response => {\n        context.commit(mutationTypes.getStaffGroups, response.data.data);\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  },\n\n  async [actionTypes.staffGlobal](context) {\n    return new Promise((resolve, reject) => {\n      staff_api.staffGlobal().then(response => {\n        context.commit(mutationTypes.staffGlobal, response.data.data);\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["api","staff_api","setItem","resource","state","user","uid","isLoggedIn","groups","users","mutationTypes","loginStart","loginSuccess","loginFailure","logout","getStaffGroups","staffGlobal","actionTypes","login","mutations","id","token","data","actions","context","Promise","resolve","reject","then","response","commit","catch","error","getStaffGroup","err"],"sources":["C:/Users/Asus/Desktop/VueTTRe/project/src/store/modules/auth.js"],"sourcesContent":["import api from \"@/api/auth\"\r\nimport staff_api from '@/api/staff'\r\nimport {setItem} from \"@/helpers/persistanseStorage\"\r\n\r\nconst resource = api.resource\r\n\r\nconst state = {\r\n    user: {},\r\n    uid: null,\r\n    isLoggedIn: false,\r\n    groups: null,\r\n\r\n    users: null\r\n}\r\n\r\nexport const mutationTypes = {\r\n    loginStart: `[${resource}] loginStart`,\r\n    loginSuccess: `[${resource}] loginSuccess`,\r\n    loginFailure: `[${resource}] loginFailure`,\r\n    // у нас форма авторизации показываетс когда isLoggedIn = false. Когда авторизация успешна - там тру. Нам нужен отдельный обработчик чтобы сделать логаут\r\n    logout: `[${resource}] logout`,\r\n    getStaffGroups: `[${resource}] getStaffGroups`,\r\n\r\n    staffGlobal: `[${resource}] staffGlobal`\r\n\r\n}\r\n\r\nexport const actionTypes = {\r\n    login: `${resource} login`,\r\n    logout: `${resource} logout`,\r\n    getStaffGroups: `${resource} getStaffGroups`,\r\n\r\n    staffGlobal: `[${resource}] staffGlobal`\r\n\r\n}\r\n\r\nconst mutations = {\r\n    [mutationTypes.loginSuccess](state, user) {\r\n        state.user = user\r\n        state.uid = user.user.id\r\n        state.isLoggedIn = true\r\n        setItem('accessToken', user.token)\r\n      },\r\n      [mutationTypes.logout](state){\r\n        state.user = {}\r\n        state.uid = null\r\n        state.isLoggedIn = false\r\n        setItem('accessToken', '')\r\n      },\r\n      [mutationTypes.getStaffGroups](state, data){\r\n            state.groups = data\r\n      },\r\n      [mutationTypes.staffGlobal](state, data){\r\n        state.users = data\r\n  }\r\n}\r\n\r\nconst actions = {\r\n    async [actionTypes.login](context, data){\r\n        return new Promise((resolve,reject) => {\r\n            api.login(data).then(response => {\r\n                context.commit(mutationTypes.loginSuccess, response.data)\r\n                resolve(response.data)\r\n            }).catch(error => {\r\n                setItem('accessToken', '')\r\n                reject(error)\r\n            })\r\n            \r\n        })\r\n    },\r\n    async [actionTypes.logout](context){\r\n        return new Promise(resolve => {\r\n            context.commit(mutationTypes.logout)\r\n        }) \r\n    },\r\n    async [actionTypes.getStaffGroups](context){\r\n        return new Promise((resolve, reject) => {\r\n            staff_api.getStaffGroup()\r\n            .then((response) => {\r\n                context.commit(mutationTypes.getStaffGroups, response.data.data)\r\n                resolve(response.data.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    },\r\n    async [actionTypes.staffGlobal](context){\r\n        return new Promise((resolve, reject) => {\r\n            staff_api.staffGlobal()\r\n            .then((response) => {\r\n                context.commit(mutationTypes.staffGlobal, response.data.data)\r\n                resolve(response.data.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default \r\n{\r\n    state,\r\n    mutations,\r\n    actions\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}