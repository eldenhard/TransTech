{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from 'vuex';\nimport api from '@/api/wagonPark';\nimport MultiSelectUni from '../ui/MultiSelectUni.vue';\nexport default {\n  components: {\n    MultiSelectUni\n  },\n  name: 'FilterReportAbandon',\n\n  data() {\n    return {\n      filter: {\n        polygon__in: '',\n        operation: 'БРОС',\n        wagon_belong_owner__in: ''\n      },\n      poligons: [],\n      selectedPolingonIds: [],\n      selectedPartyIds: []\n    };\n  },\n\n  computed: { ...mapState({\n      user: state => state.auth.user,\n      uid: state => state.auth.uid,\n      groupsFilterStaff: state => state.auth.groups,\n      counterparties: state => state.counterparties.counterparties\n    }),\n\n    poligonsObj() {\n      const result = [];\n      this.poligons.forEach((el, idx) => {\n        el && result.push({\n          id: idx,\n          value: el\n        });\n      });\n      return result;\n    },\n\n    selectedPoligons() {\n      return this.poligonsObj.filter(el => this.selectedPolingonIds.includes(el.id));\n    },\n\n    selectedParties() {\n      return this.counterparties.filter(el => this.selectedPartyIds.includes(el.id));\n    }\n\n  },\n  methods: {\n    updateFilterDataReportAbandon() {},\n\n    getPoligons() {\n      api.getFilters().then(response => {\n        this.poligons = response.data.polygons;\n      });\n    },\n\n    updateSelectedPoligons(selected) {\n      this.selectedPolingonIds = selected;\n      this.sendEmit();\n    },\n\n    updateSelectedCounterparties(selected) {\n      this.selectedPartyIds = selected;\n      this.sendEmit();\n    },\n\n    removeSelectedPoligons(id) {\n      this.selectedPolingonIds.splice(this.selectedPolingonIds.indexOf(id), 1);\n      this.sendEmit();\n    },\n\n    removeSelectedParty(id) {\n      this.selectedPartyIds.splice(this.selectedPartyIds.indexOf(id), 1);\n      this.sendEmit();\n    },\n\n    sendEmit() {\n      const arr = [];\n      this.selectedPoligons.forEach(el => {\n        arr.push(el.value);\n      });\n      this.filter.polygon__in = arr.join();\n      const arr2 = [];\n      this.selectedParties.forEach(el => {\n        arr2.push(el.work_name); //то что положили в фильтр\n      });\n      this.filter.wagon_belong_owner__in = arr2.join();\n      this.$emit('update-filter', this.filter);\n    }\n\n  },\n\n  mounted() {\n    this.getPoligons();\n  }\n\n};","map":{"version":3,"mappings":";AAiFA;AACA;AACA;AACA;EACAA;IAAAC;EAAA,CADA;EAEAC,2BAFA;;EAGAC;IACA;MACAC;QACAC,eADA;QAEAC,iBAFA;QAGAC;MAHA,CADA;MAMAC,YANA;MAOAC,uBAPA;MAQAC;IARA;EAUA,CAdA;;EAeAC,YACA;MACAC,8BADA;MAEAC,4BAFA;MAGAC,6CAHA;MAIAC;IAJA,EADA;;IAOAC;MACA;MACA;QACAC;UAAAC;UAAAC;QAAA;MACA,CAFA;MAGA;IACA,CAbA;;IAcAC;MACA;IACA,CAhBA;;IAiBAC;MACA;IACA;;EAnBA,CAfA;EAqCAC;IACAC,iCAEA,CAHA;;IAIAC;MACAC;QACA;MACA,CAFA;IAGA,CARA;;IASAC;MACA;MACA;IAEA,CAbA;;IAcAC;MACA;MACA;IACA,CAjBA;;IAkBAC;MACA;MACA;IACA,CArBA;;IAsBAC;MACA;MACA;IACA,CAzBA;;IA0BAC;MACA;MAEA;QACAC;MACA,CAFA;MAGA;MAEA;MAEA;QACAC,wBADA,CACA;MACA,CAFA;MAGA;MAEA;IACA;;EA1CA,CArCA;;EAkFAC;IACA;EACA;;AApFA","names":["components","MultiSelectUni","name","data","filter","polygon__in","operation","wagon_belong_owner__in","poligons","selectedPolingonIds","selectedPartyIds","computed","user","uid","groupsFilterStaff","counterparties","poligonsObj","el","id","value","selectedPoligons","selectedParties","methods","updateFilterDataReportAbandon","getPoligons","api","updateSelectedPoligons","updateSelectedCounterparties","removeSelectedPoligons","removeSelectedParty","sendEmit","arr","arr2","mounted"],"sourceRoot":"src/components/filter","sources":["FilterReportAbandon.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"FilterReportAbandon\">\r\n            <!-- <div style=\"display:flex; flex-direction:column;\">\r\n                <label for=\"input_FilterReportAbandon\">Тип вагона</label>\r\n                <input type=\"text\" id=\"input-FilterReportAbandon\" class=\"input_FilterReportAbandon\"\r\n                    placeholder=\"введите тип вагона\" v-model=\"filter_FilterReportAbandon.search\"\r\n                    @change=\"updateFilterDataReportAbandon\" style=\"margin-top: -1px\">\r\n            </div> -->\r\n            <div style=\"display:flex; flex-direction:column;\">\r\n                <label for=\"input_FilterReportAbandon\">Полигон</label>\r\n                <multi-select-uni @change=\"updateSelectedPoligons\" :placeholder=\"'Выберите полигон'\" :variants=\"poligonsObj\" :variant-title=\"'value'\">\r\n                </multi-select-uni>\r\n                <!-- <input type=\"text\" id=\"input-FilterReportAbandon\" class=\"input_FilterReportAbandon\"\r\n                    placeholder=\"введите полигон\" v-model=\"filter_FilterReportAbandon.search\"\r\n                    @change=\"updateFilterDataReportAbandon\" style=\"margin-top: -1px\"> -->\r\n            </div>\r\n            <div style=\"display:flex; flex-direction:column;\">\r\n                <label for=\"input_FilterReportAbandon\">Контрагент</label>\r\n                <multi-select-uni @change=\"updateSelectedCounterparties\" :placeholder=\"'выберите контрагента'\" :variants=\"counterparties\" :variant-title=\"'work_name'\"></multi-select-uni>\r\n            </div>\r\n\r\n\r\n        </div>\r\n        <div class=\"option_select_block\">\r\n            <template v-if=\"selectedPoligons\">\r\n                <span class=\"option_select_block_check\" v-for=\"p in selectedPoligons\" :key=\"p.id\" @click=\"removeSelectedPoligons(p.id)\">\r\n                    <span style=\"color: black\">&#10003;</span>\r\n                    {{p.value}}\r\n                </span>\r\n            </template>\r\n            <template v-if=\"selectedParties\">\r\n                <span class=\"option_select_block_check\" v-for=\"p in selectedParties\" :key=\"p.id\" @click=\"removeSelectedParty(p.id)\">\r\n                    <span style=\"color: black\">&#10003;</span>\r\n                    {{p.work_name}}\r\n                </span>\r\n            </template>\r\n\r\n          \r\n        </div>\r\n    </div>\r\n</template>\r\n    \r\n    \r\n<style>\r\n.input_FilterReportAbandon {\r\n    width: 100% !important;\r\n    height: 30px;\r\n\r\n}\r\n\r\n.FilterReportAbandon {\r\n    width: 100% !important;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    /* border-radius: 50px; */\r\n    background: #e0e0e0;\r\n    box-shadow: 20px 20px 30px #cecece,\r\n        -20px -20px 30px #f2f2f2;\r\n    position: relative;\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n    margin: 1% 0;\r\n}\r\n\r\n.option_select_block {\r\n    margin-top: 3%;\r\n\r\n}\r\n\r\n.option_select_block_check {\r\n    background: #6b8798;\r\n    color: white;\r\n    font-weight: 400;\r\n    padding: 3px 4px;\r\n    border-radius: 4px;\r\n    margin-right: 0.3%;\r\n}\r\n</style>\r\n    \r\n<script>\r\nimport { mapState } from 'vuex'\r\nimport api from '@/api/wagonPark'\r\nimport MultiSelectUni from '../ui/MultiSelectUni.vue'\r\nexport default {\r\n    components: { MultiSelectUni },\r\n    name: 'FilterReportAbandon',\r\n    data() {\r\n        return {\r\n            filter: {\r\n                polygon__in: '',\r\n                operation: 'БРОС',\r\n                wagon_belong_owner__in: ''\r\n            },\r\n            poligons: [],\r\n            selectedPolingonIds: [],\r\n            selectedPartyIds: []\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapState({\r\n            user: state => state.auth.user,\r\n            uid: state => state.auth.uid,\r\n            groupsFilterStaff: state => state.auth.groups,\r\n            counterparties: state => state.counterparties.counterparties\r\n        }),\r\n        poligonsObj() {\r\n            const result = []\r\n            this.poligons.forEach((el, idx) => {\r\n                el && result.push({ id: idx, value: el })\r\n            })\r\n            return result\r\n        },\r\n        selectedPoligons(){\r\n            return this.poligonsObj.filter(el => this.selectedPolingonIds.includes(el.id))\r\n        },\r\n        selectedParties(){\r\n            return this.counterparties.filter(el=> this.selectedPartyIds.includes(el.id))\r\n        }\r\n\r\n    },\r\n    methods: {\r\n        updateFilterDataReportAbandon() {\r\n           \r\n        },\r\n        getPoligons() {\r\n            api.getFilters().then(response => {\r\n                this.poligons = response.data.polygons\r\n            })\r\n        },\r\n        updateSelectedPoligons(selected){\r\n            this.selectedPolingonIds = selected\r\n            this.sendEmit()\r\n            \r\n        },\r\n        updateSelectedCounterparties(selected){\r\n            this.selectedPartyIds = selected\r\n            this.sendEmit()\r\n        },\r\n        removeSelectedPoligons(id){\r\n            this.selectedPolingonIds.splice(this.selectedPolingonIds.indexOf(id), 1)\r\n            this.sendEmit()\r\n        },\r\n        removeSelectedParty(id){\r\n            this.selectedPartyIds.splice(this.selectedPartyIds.indexOf(id), 1)\r\n            this.sendEmit()\r\n        },\r\n        sendEmit(){\r\n            const arr = []\r\n           \r\n            this.selectedPoligons.forEach(el => {\r\n                arr.push(el.value)\r\n            })\r\n            this.filter.polygon__in = arr.join()\r\n\r\n            const arr2 = []\r\n\r\n            this.selectedParties.forEach(el => {\r\n                arr2.push(el.work_name) //то что положили в фильтр\r\n            })\r\n            this.filter.wagon_belong_owner__in = arr2.join()\r\n\r\n            this.$emit('update-filter', this.filter)\r\n        },\r\n        \r\n    },\r\n    mounted() {\r\n        this.getPoligons()\r\n    }\r\n}\r\n</script>\r\n\r\n"]},"metadata":{},"sourceType":"module"}