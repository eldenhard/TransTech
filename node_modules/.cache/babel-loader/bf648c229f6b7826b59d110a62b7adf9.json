{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n/**\r\n * Creates a pie chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\n\nvar PieChart =\n/** @class */\nfunction (_super) {\n  __extends(PieChart, _super);\n\n  function PieChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_maxRadius\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    return _this;\n  }\n\n  Object.defineProperty(PieChart.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n\n      this.seriesContainer.setAll({\n        x: p50,\n        y: p50\n      });\n    }\n  });\n  Object.defineProperty(PieChart.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      var chartContainer = this.chartContainer;\n      var w = chartContainer.innerWidth();\n      var h = chartContainer.innerHeight();\n      var startAngle = this.get(\"startAngle\", 0);\n      var endAngle = this.get(\"endAngle\", 0);\n      var innerRadius = this.get(\"innerRadius\");\n      var bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n      var wr = w / (bounds.right - bounds.left);\n      var hr = h / (bounds.bottom - bounds.top);\n      var innerBounds = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      };\n\n      if (innerRadius instanceof Percent) {\n        var value = innerRadius.value;\n        var mr = Math.min(wr, hr);\n        value = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n        innerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n        this.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n      }\n\n      bounds = $math.mergeBounds([bounds, innerBounds]);\n      var prevRadius = this._maxRadius;\n      this._maxRadius = Math.min(wr, hr);\n      var radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n      this.seriesContainer.setAll({\n        dy: -radius * (bounds.bottom + bounds.top) / 2,\n        dx: -radius * (bounds.right + bounds.left) / 2\n      });\n\n      if (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n        this.series.each(function (series) {\n          series._markDirtyKey(\"startAngle\");\n        });\n      }\n\n      if (this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")) {\n        this.series.each(function (series) {\n          series._markDirtyKey(\"innerRadius\");\n        });\n      }\n    }\n  });\n  /**\r\n   * Returns outer radius in pixels.\r\n   *\r\n   * If optional series parameter is passed in, it will return outer radius\r\n   * of that particular series.\r\n   *\r\n   * @param   series  Series\r\n   * @return          Radius in pixels\r\n   */\n\n  Object.defineProperty(PieChart.prototype, \"radius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      var radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n      var innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n      if (series) {\n        var index = this.series.indexOf(series);\n        var length_1 = this.series.length;\n        var seriesRadius = series.get(\"radius\");\n\n        if (seriesRadius != null) {\n          return innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n        } else {\n          return innerRadius + (radius - innerRadius) / length_1 * (index + 1);\n        }\n      }\n\n      return radius;\n    }\n  });\n  /**\r\n   * Returns inner radius in pixels.\r\n   *\r\n   * If optional series parameter is passed in, it will return inner radius\r\n   * of that particular series.\r\n   *\r\n   * @param   series  Series\r\n   * @return          Radius in pixels\r\n   */\n\n  Object.defineProperty(PieChart.prototype, \"innerRadius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      var radius = this.radius();\n      var innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n\n      if (series) {\n        var index = this.series.indexOf(series);\n        var length_2 = this.series.length;\n        var seriesInnerRadius = series.get(\"innerRadius\");\n\n        if (seriesInnerRadius != null) {\n          return innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n        } else {\n          return innerRadius + (radius - innerRadius) / length_2 * index;\n        }\n      }\n\n      return innerRadius;\n    }\n  });\n  Object.defineProperty(PieChart, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PieChart\"\n  });\n  Object.defineProperty(PieChart, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: PercentChart.classNames.concat([PieChart.className])\n  });\n  return PieChart;\n}(PercentChart);\n\nexport { PieChart };","map":{"version":3,"mappings":"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","names":["Percent","PercentChart","p50","$utils","$math","__extends","Object","_super","_afterNew","call","seriesContainer","setAll","x","y","_prepareChildren","chartContainer","w","innerWidth","h","innerHeight","startAngle","get","endAngle","innerRadius","bounds","getArcBounds","wr","right","left","hr","bottom","top","innerBounds","value","mr","Math","min","max","setPrivateRaw","mergeBounds","prevRadius","_maxRadius","radius","relativeToValue","dy","dx","isDirty","series","each","_markDirtyKey","index","indexOf","length_1","length","seriesRadius","length_2","seriesInnerRadius","classNames","concat","PieChart","className"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/pie/PieChart.ts"],"sourcesContent":["import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}