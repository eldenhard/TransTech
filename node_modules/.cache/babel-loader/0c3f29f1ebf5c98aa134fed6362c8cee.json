{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends } from \"tslib\";\nimport { PyramidSeries } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\";\n/**\r\n * Creates a pictorial series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\r\n * @important\r\n */\n\nvar PictorialStackedSeries =\n/** @class */\nfunction (_super) {\n  __extends(PictorialStackedSeries, _super);\n\n  function PictorialStackedSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_tag\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"pictorial\"\n    });\n    /**\r\n     * A [[Graphics]] element to used as a mask (shape) for the series.\r\n     *\r\n     * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\r\n     */\n\n    Object.defineProperty(_this, \"seriesMask\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Graphics.new(_this._root, {\n        position: \"absolute\",\n        x: p50,\n        y: p50,\n        centerX: p50,\n        centerY: p50\n      })\n    });\n    Object.defineProperty(_this, \"seriesGraphics\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.slicesContainer.children.push(Graphics.new(_this._root, {\n        themeTags: [\"pictorial\", \"background\"],\n        position: \"absolute\",\n        x: p50,\n        y: p50,\n        centerX: p50,\n        centerY: p50\n      }))\n    });\n    return _this;\n  }\n\n  Object.defineProperty(PictorialStackedSeries.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n\n      this.set(\"topWidth\", p100);\n      this.set(\"bottomWidth\", p100);\n      this.set(\"valueIs\", \"height\");\n      this.slicesContainer.set(\"mask\", this.seriesMask);\n    }\n  });\n  Object.defineProperty(PictorialStackedSeries.prototype, \"_updateScale\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var slicesContainer = this.slicesContainer;\n      var w = slicesContainer.innerWidth();\n      var h = slicesContainer.innerHeight();\n      var seriesMask = this.seriesMask;\n      var seriesGraphics = this.seriesGraphics;\n      var scale = seriesMask.get(\"scale\", 1);\n      var bounds = seriesMask.localBounds();\n      var mw = bounds.right - bounds.left;\n      var mh = bounds.bottom - bounds.top;\n\n      if (this.get(\"orientation\") == \"horizontal\") {\n        scale = w / mw;\n      } else {\n        scale = h / mh;\n      }\n\n      if (scale != Infinity && scale != NaN) {\n        seriesMask.set(\"scale\", scale);\n        seriesMask.set(\"x\", w / 2);\n        seriesMask.set(\"y\", h / 2);\n        seriesGraphics.set(\"scale\", scale);\n        seriesGraphics.set(\"x\", w / 2);\n        seriesGraphics.set(\"y\", h / 2);\n      }\n    }\n  });\n  Object.defineProperty(PictorialStackedSeries.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      if (this.isDirty(\"svgPath\")) {\n        var svgPath = this.get(\"svgPath\");\n        this.seriesMask.set(\"svgPath\", svgPath);\n        this.seriesGraphics.set(\"svgPath\", svgPath);\n      }\n\n      this._updateScale();\n    }\n  });\n  Object.defineProperty(PictorialStackedSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PictorialStackedSeries\"\n  });\n  Object.defineProperty(PictorialStackedSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: PyramidSeries.classNames.concat([PictorialStackedSeries.className])\n  });\n  return PictorialStackedSeries;\n}(PyramidSeries);\n\nexport { PictorialStackedSeries };","map":{"version":3,"mappings":"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","names":["PyramidSeries","Graphics","p100","p50","__extends","Object","new","_this","_root","position","x","y","centerX","centerY","slicesContainer","children","push","themeTags","_super","_afterNew","call","set","seriesMask","w","innerWidth","h","innerHeight","seriesGraphics","scale","get","bounds","localBounds","mw","right","left","mh","bottom","top","Infinity","NaN","_prepareChildren","isDirty","svgPath","_updateScale","classNames","concat","PictorialStackedSeries","className"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/funnel/PictorialStackedSeries.ts"],"sourcesContent":["import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}