{"ast":null,"code":"import api from '@/api/counterparties';\nconst resource = api.resource;\nconst state = {\n  counterparties: [],\n  arr: [],\n  isLoading: false,\n  errors: null\n};\nexport const mutationTypes = {\n  getCounterpartiesStart: `[${resource}] getCounterpartiesStart`,\n  getCounterpartiesSuccess: `[${resource}] getCounterpartiesSuccess`,\n  getCounterpartiesFailure: `[${resource}] getCounterpartiesFailure`\n};\nexport const actionTypes = {\n  getCounterparties: `${resource} getCounterparties`\n};\nconst mutations = {\n  [mutationTypes.getCounterpartiesStart](state) {\n    state.isLoading = true;\n  },\n\n  [mutationTypes.getCounterpartiesSuccess](state, data) {\n    state.arr = [...state.arr, ...data];\n    state.isLoading = false;\n  },\n\n  [mutationTypes.getCounterpartiesFailure](state, errors) {\n    state.isLoading = false;\n    state.errors = errors;\n  }\n\n};\nconst actions = {\n  async [actionTypes.getCounterparties](context, url) {\n    return new Promise((resolve, reject) => {\n      context.commit(mutationTypes.getCounterpartiesStart);\n      api.getAllcounterparties(url).then(response => {\n        context.commit(mutationTypes.getCounterpartiesSuccess, response.data.data); // if(response.data.links.next != null){\n        //     console.log(context)\n        // }else{\n        //     resolve(response.data)\n        // }\n      }).catch(error => {// context.commit(mutationTypes.getCounterpartiesFailure, error)\n        // reject(error)\n      });\n    });\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["api","resource","state","counterparties","arr","isLoading","errors","mutationTypes","getCounterpartiesStart","getCounterpartiesSuccess","getCounterpartiesFailure","actionTypes","getCounterparties","mutations","data","actions","context","url","Promise","resolve","reject","commit","getAllcounterparties","then","response","catch","error"],"sources":["C:/Users/Asus/Desktop/VueTTRe/project/src/store/modules/counterparties.js"],"sourcesContent":["\r\nimport api from '@/api/counterparties'\r\n\r\nconst resource = api.resource\r\n\r\nconst state = {\r\n    counterparties: [],\r\n     arr: [],\r\n    isLoading: false,\r\n    errors: null\r\n}\r\n\r\nexport const mutationTypes = {\r\n    getCounterpartiesStart: `[${resource}] getCounterpartiesStart`,\r\n    getCounterpartiesSuccess: `[${resource}] getCounterpartiesSuccess`,\r\n    getCounterpartiesFailure: `[${resource}] getCounterpartiesFailure`,\r\n}\r\n\r\nexport const actionTypes = {\r\n\r\n    getCounterparties: `${resource} getCounterparties`,\r\n\r\n\r\n}\r\n\r\nconst mutations = {\r\n    [mutationTypes.getCounterpartiesStart](state) {\r\n        state.isLoading = true\r\n      },\r\n      [mutationTypes.getCounterpartiesSuccess](state, data){\r\n        state.arr = [...state.arr, ...data]\r\n        state.isLoading = false\r\n      },\r\n      [mutationTypes.getCounterpartiesFailure](state, errors){\r\n            state.isLoading = false\r\n            state.errors = errors\r\n      },\r\n\r\n}\r\n\r\nconst actions = {\r\n    async [actionTypes.getCounterparties](context, url){\r\n        return new Promise((resolve,reject) => {\r\n            context.commit(mutationTypes.getCounterpartiesStart)\r\n            api.getAllcounterparties(url).then(response => {\r\n                \r\n                context.commit(mutationTypes.getCounterpartiesSuccess, response.data.data)\r\n                // if(response.data.links.next != null){\r\n                //     console.log(context)\r\n                // }else{\r\n                //     resolve(response.data)\r\n                // }\r\n                \r\n            }).catch(error => {\r\n                // context.commit(mutationTypes.getCounterpartiesFailure, error)\r\n                // reject(error)\r\n            })\r\n            \r\n        })\r\n    },\r\n    \r\n}\r\n\r\nexport default \r\n{\r\n    state,\r\n    mutations,\r\n    actions\r\n}"],"mappings":"AACA,OAAOA,GAAP,MAAgB,sBAAhB;AAEA,MAAMC,QAAQ,GAAGD,GAAG,CAACC,QAArB;AAEA,MAAMC,KAAK,GAAG;EACVC,cAAc,EAAE,EADN;EAETC,GAAG,EAAE,EAFI;EAGVC,SAAS,EAAE,KAHD;EAIVC,MAAM,EAAE;AAJE,CAAd;AAOA,OAAO,MAAMC,aAAa,GAAG;EACzBC,sBAAsB,EAAG,IAAGP,QAAS,0BADZ;EAEzBQ,wBAAwB,EAAG,IAAGR,QAAS,4BAFd;EAGzBS,wBAAwB,EAAG,IAAGT,QAAS;AAHd,CAAtB;AAMP,OAAO,MAAMU,WAAW,GAAG;EAEvBC,iBAAiB,EAAG,GAAEX,QAAS;AAFR,CAApB;AAOP,MAAMY,SAAS,GAAG;EACd,CAACN,aAAa,CAACC,sBAAf,EAAuCN,KAAvC,EAA8C;IAC1CA,KAAK,CAACG,SAAN,GAAkB,IAAlB;EACD,CAHW;;EAIZ,CAACE,aAAa,CAACE,wBAAf,EAAyCP,KAAzC,EAAgDY,IAAhD,EAAqD;IACnDZ,KAAK,CAACE,GAAN,GAAY,CAAC,GAAGF,KAAK,CAACE,GAAV,EAAe,GAAGU,IAAlB,CAAZ;IACAZ,KAAK,CAACG,SAAN,GAAkB,KAAlB;EACD,CAPW;;EAQZ,CAACE,aAAa,CAACG,wBAAf,EAAyCR,KAAzC,EAAgDI,MAAhD,EAAuD;IACjDJ,KAAK,CAACG,SAAN,GAAkB,KAAlB;IACAH,KAAK,CAACI,MAAN,GAAeA,MAAf;EACL;;AAXW,CAAlB;AAeA,MAAMS,OAAO,GAAG;EACZ,OAAOJ,WAAW,CAACC,iBAAnB,EAAsCI,OAAtC,EAA+CC,GAA/C,EAAmD;IAC/C,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;MACnCJ,OAAO,CAACK,MAAR,CAAed,aAAa,CAACC,sBAA7B;MACAR,GAAG,CAACsB,oBAAJ,CAAyBL,GAAzB,EAA8BM,IAA9B,CAAmCC,QAAQ,IAAI;QAE3CR,OAAO,CAACK,MAAR,CAAed,aAAa,CAACE,wBAA7B,EAAuDe,QAAQ,CAACV,IAAT,CAAcA,IAArE,EAF2C,CAG3C;QACA;QACA;QACA;QACA;MAEH,CATD,EASGW,KATH,CASSC,KAAK,IAAI,CACd;QACA;MACH,CAZD;IAcH,CAhBM,CAAP;EAiBH;;AAnBW,CAAhB;AAuBA,eACA;EACIxB,KADJ;EAEIW,SAFJ;EAGIE;AAHJ,CADA"},"metadata":{},"sourceType":"module"}