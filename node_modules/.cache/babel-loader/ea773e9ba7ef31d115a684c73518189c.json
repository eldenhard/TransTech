{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends, __read } from \"tslib\";\nimport { FunnelSeries } from \"./FunnelSeries\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n/**\r\n * Creates a pyramid series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\r\n * @important\r\n */\n\nvar PyramidSeries =\n/** @class */\nfunction (_super) {\n  __extends(PyramidSeries, _super);\n\n  function PyramidSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_tag\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"pyramid\"\n    });\n    Object.defineProperty(_this, \"_nextSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(PyramidSeries.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._prepareChildren.call(this);\n\n      this._nextSize = undefined;\n    }\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"decorateSlice\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _a, _b, _c, _d;\n\n      var orientation = this.get(\"orientation\");\n      var slicesContainer = this.slicesContainer;\n      var slice = dataItem.get(\"slice\");\n      var label = dataItem.get(\"label\");\n      var link = dataItem.get(\"link\");\n      var valueIs = this.get(\"valueIs\", \"area\");\n      var sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n      if (sum == 0) {\n        return;\n      }\n\n      var startLocation = this.get(\"startLocation\", 0);\n      var endLocation = this.get(\"endLocation\", 1);\n      var tw = this.get(\"topWidth\", 0);\n      var bw = this.get(\"bottomWidth\", p100);\n      var workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n      var value = dataItem.get(\"value\", 0);\n      var sliceHeight;\n      var sliceBottomWidth;\n      var pyramidHeight = slicesContainer.innerHeight();\n      var pyramidWidth = slicesContainer.innerWidth();\n      var linkWidth = link.width();\n      var linkHeight = link.height();\n\n      if (orientation == \"horizontal\") {\n        _a = __read([pyramidHeight, pyramidWidth], 2), pyramidWidth = _a[0], pyramidHeight = _a[1];\n        _b = __read([linkHeight, linkWidth], 2), linkWidth = _b[0], linkHeight = _b[1];\n      }\n\n      var center = pyramidWidth / 2;\n      var d = 1;\n\n      if (value != 0) {\n        d = workingValue / Math.abs(value);\n      } else {\n        if (dataItem.isHidden()) {\n          d = 0.000001;\n        }\n      }\n\n      linkHeight *= d;\n      pyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n      var topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n      if (!$type.isNumber(this._nextSize)) {\n        this._nextSize = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n      var sliceTopWidth = this._nextSize;\n      var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      if (valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n        var square = totalSquare * workingValue / sum;\n        var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n        sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n        if (sliceHeight > 0) {\n          sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n        } else {\n          sliceBottomWidth = sliceTopWidth;\n        }\n      } else {\n        sliceHeight = pyramidHeight * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceHeight * c;\n      }\n\n      var labelCoord = this._nextCoord + sliceHeight / 2;\n      var sliceX = center;\n      var sliceY = this._nextCoord;\n      var linkX = center;\n      var linkY = sliceY + sliceHeight;\n\n      if (orientation == \"vertical\") {\n        label.set(\"y\", labelCoord);\n\n        if (label.get(\"opacity\") > 0) {\n          this._rLabels.push({\n            label: label,\n            y: labelCoord\n          });\n        }\n\n        slice.set(\"height\", sliceHeight);\n      } else {\n        label.set(\"x\", labelCoord);\n\n        if (label.get(\"opacity\") > 0) {\n          this._hLabels.push({\n            label: label,\n            y: labelCoord\n          });\n        }\n\n        _c = __read([sliceY, sliceX], 2), sliceX = _c[0], sliceY = _c[1];\n        _d = __read([linkY, linkX], 2), linkX = _d[0], linkY = _d[1];\n        slice.set(\"width\", sliceHeight);\n      }\n\n      slice.setAll({\n        orientation: orientation,\n        bottomWidth: sliceBottomWidth,\n        topWidth: sliceTopWidth,\n        x: sliceX,\n        y: sliceY\n      });\n      link.setAll({\n        orientation: orientation,\n        x: linkX,\n        y: linkY,\n        topWidth: sliceBottomWidth,\n        bottomWidth: sliceBottomWidth\n      });\n      this._nextSize = sliceBottomWidth;\n      this._nextCoord += sliceHeight + linkHeight;\n    }\n  });\n  Object.defineProperty(PyramidSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PyramidSeries\"\n  });\n  Object.defineProperty(PyramidSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: FunnelSeries.classNames.concat([PyramidSeries.className])\n  });\n  return PyramidSeries;\n}(FunnelSeries);\n\nexport { PyramidSeries };","map":{"version":3,"mappings":"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","names":["FunnelSeries","p100","$utils","$type","__extends","Object","_super","_prepareChildren","call","_nextSize","undefined","dataItem","orientation","get","slicesContainer","slice","label","link","valueIs","sum","getPrivate","startLocation","endLocation","tw","bw","workingValue","Math","abs","value","sliceHeight","sliceBottomWidth","pyramidHeight","innerHeight","pyramidWidth","innerWidth","linkWidth","width","linkHeight","height","_a","_b","center","d","isHidden","_count","_total","topWidth","relativeToValue","isNumber","bottomWidth","sliceTopWidth","angle","atan2","c","tan","PI","totalSquare","square","s","sqrt","labelCoord","_nextCoord","sliceX","sliceY","linkX","linkY","set","_rLabels","push","y","_hLabels","_c","_d","setAll","x","classNames","concat","PyramidSeries","className"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/funnel/PyramidSeries.ts"],"sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}