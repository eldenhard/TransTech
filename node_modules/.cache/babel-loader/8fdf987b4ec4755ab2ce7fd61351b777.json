{"ast":null,"code":"import api from '@/api/counterparties';\nconst resource = api.resource;\nconst state = {\n  counterparties: [],\n  isLoading: false,\n  errors: null\n};\nexport const mutationTypes = {\n  getCounterpartiesStart: `[${resource}] getCounterpartiesStart`,\n  getCounterpartiesSuccess: `[${resource}] getCounterpartiesSuccess`,\n  getCounterpartiesFailure: `[${resource}] getCounterpartiesFailure`,\n  clear: `[${resource}] clear`\n};\nexport const actionTypes = {\n  getCounterparties: `${resource} getCounterparties`\n};\nconst mutations = {\n  [mutationTypes.getCounterpartiesStart](state) {\n    state.isLoading = true;\n  },\n\n  [mutationTypes.getCounterpartiesSuccess](state, data) {\n    state.counterparties = [...state.counterparties, ...data];\n    state.isLoading = false;\n  },\n\n  [mutationTypes.getCounterpartiesFailure](state, errors) {\n    state.isLoading = false;\n    state.errors = errors;\n  },\n\n  [mutationTypes.clear](state) {\n    state.counterparties = [];\n  }\n\n};\nconst actions = {\n  async [actionTypes.getCounterparties](context, url, clear = true) {\n    return new Promise((resolve, reject) => {\n      if (clear) {\n        context.commit(mutationTypes.clear);\n      }\n\n      context.commit(mutationTypes.getCounterpartiesStart);\n      api.getAllcounterparties(url).then(response => {\n        context.commit(mutationTypes.getCounterpartiesSuccess, response.data.data);\n\n        if (response.data.links.next != null) {\n          context.dispatch(actionTypes.getCounterparties, response.data.links.next, false);\n        } else {\n          resolve(response.data);\n        }\n      }).catch(error => {\n        context.commit(mutationTypes.getCounterpartiesFailure, error);\n        reject(error);\n      });\n    });\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["api","resource","state","counterparties","isLoading","errors","mutationTypes","getCounterpartiesStart","getCounterpartiesSuccess","getCounterpartiesFailure","clear","actionTypes","getCounterparties","mutations","data","actions","context","url","Promise","resolve","reject","commit","getAllcounterparties","then","response","links","next","dispatch","catch","error"],"sources":["C:/Users/Asus/Desktop/VueTTRe/project/src/store/modules/counterparties.js"],"sourcesContent":["\r\nimport api from '@/api/counterparties'\r\n\r\nconst resource = api.resource\r\n\r\nconst state = {\r\n    counterparties: [],\r\n    isLoading: false,\r\n    errors: null\r\n}\r\n\r\nexport const mutationTypes = {\r\n    getCounterpartiesStart: `[${resource}] getCounterpartiesStart`,\r\n    getCounterpartiesSuccess: `[${resource}] getCounterpartiesSuccess`,\r\n    getCounterpartiesFailure: `[${resource}] getCounterpartiesFailure`,\r\n    clear: `[${resource}] clear`,\r\n}\r\n\r\nexport const actionTypes = {\r\n\r\n    getCounterparties: `${resource} getCounterparties`,\r\n\r\n\r\n}\r\n\r\nconst mutations = {\r\n    [mutationTypes.getCounterpartiesStart](state) {\r\n        state.isLoading = true\r\n      },\r\n      [mutationTypes.getCounterpartiesSuccess](state, data){\r\n        state.counterparties = [...state.counterparties, ...data]\r\n        state.isLoading = false\r\n      },\r\n      [mutationTypes.getCounterpartiesFailure](state, errors){\r\n            state.isLoading = false\r\n            state.errors = errors\r\n      },\r\n      [mutationTypes.clear](state){\r\n        state.counterparties = []\r\n  },\r\n\r\n}\r\n\r\nconst actions = {\r\n    async [actionTypes.getCounterparties](context, url, clear = true){\r\n        return new Promise((resolve,reject) => {\r\n            if(clear) {context.commit(mutationTypes.clear)}\r\n            context.commit(mutationTypes.getCounterpartiesStart)\r\n            api.getAllcounterparties(url).then(response => {\r\n                \r\n                context.commit(mutationTypes.getCounterpartiesSuccess, response.data.data)\r\n                if(response.data.links.next != null){\r\n                    context.dispatch(actionTypes.getCounterparties, response.data.links.next, false)\r\n                }else{\r\n                    resolve(response.data)\r\n                }\r\n                \r\n            }).catch(error => {\r\n                context.commit(mutationTypes.getCounterpartiesFailure, error)\r\n                reject(error)\r\n            })\r\n            \r\n        })\r\n    },\r\n    \r\n}\r\n\r\nexport default \r\n{\r\n    state,\r\n    mutations,\r\n    actions\r\n}"],"mappings":"AACA,OAAOA,GAAP,MAAgB,sBAAhB;AAEA,MAAMC,QAAQ,GAAGD,GAAG,CAACC,QAArB;AAEA,MAAMC,KAAK,GAAG;EACVC,cAAc,EAAE,EADN;EAEVC,SAAS,EAAE,KAFD;EAGVC,MAAM,EAAE;AAHE,CAAd;AAMA,OAAO,MAAMC,aAAa,GAAG;EACzBC,sBAAsB,EAAG,IAAGN,QAAS,0BADZ;EAEzBO,wBAAwB,EAAG,IAAGP,QAAS,4BAFd;EAGzBQ,wBAAwB,EAAG,IAAGR,QAAS,4BAHd;EAIzBS,KAAK,EAAG,IAAGT,QAAS;AAJK,CAAtB;AAOP,OAAO,MAAMU,WAAW,GAAG;EAEvBC,iBAAiB,EAAG,GAAEX,QAAS;AAFR,CAApB;AAOP,MAAMY,SAAS,GAAG;EACd,CAACP,aAAa,CAACC,sBAAf,EAAuCL,KAAvC,EAA8C;IAC1CA,KAAK,CAACE,SAAN,GAAkB,IAAlB;EACD,CAHW;;EAIZ,CAACE,aAAa,CAACE,wBAAf,EAAyCN,KAAzC,EAAgDY,IAAhD,EAAqD;IACnDZ,KAAK,CAACC,cAAN,GAAuB,CAAC,GAAGD,KAAK,CAACC,cAAV,EAA0B,GAAGW,IAA7B,CAAvB;IACAZ,KAAK,CAACE,SAAN,GAAkB,KAAlB;EACD,CAPW;;EAQZ,CAACE,aAAa,CAACG,wBAAf,EAAyCP,KAAzC,EAAgDG,MAAhD,EAAuD;IACjDH,KAAK,CAACE,SAAN,GAAkB,KAAlB;IACAF,KAAK,CAACG,MAAN,GAAeA,MAAf;EACL,CAXW;;EAYZ,CAACC,aAAa,CAACI,KAAf,EAAsBR,KAAtB,EAA4B;IAC1BA,KAAK,CAACC,cAAN,GAAuB,EAAvB;EACL;;AAde,CAAlB;AAkBA,MAAMY,OAAO,GAAG;EACZ,OAAOJ,WAAW,CAACC,iBAAnB,EAAsCI,OAAtC,EAA+CC,GAA/C,EAAoDP,KAAK,GAAG,IAA5D,EAAiE;IAC7D,OAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;MACnC,IAAGV,KAAH,EAAU;QAACM,OAAO,CAACK,MAAR,CAAef,aAAa,CAACI,KAA7B;MAAoC;;MAC/CM,OAAO,CAACK,MAAR,CAAef,aAAa,CAACC,sBAA7B;MACAP,GAAG,CAACsB,oBAAJ,CAAyBL,GAAzB,EAA8BM,IAA9B,CAAmCC,QAAQ,IAAI;QAE3CR,OAAO,CAACK,MAAR,CAAef,aAAa,CAACE,wBAA7B,EAAuDgB,QAAQ,CAACV,IAAT,CAAcA,IAArE;;QACA,IAAGU,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBC,IAApB,IAA4B,IAA/B,EAAoC;UAChCV,OAAO,CAACW,QAAR,CAAiBhB,WAAW,CAACC,iBAA7B,EAAgDY,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBC,IAApE,EAA0E,KAA1E;QACH,CAFD,MAEK;UACDP,OAAO,CAACK,QAAQ,CAACV,IAAV,CAAP;QACH;MAEJ,CATD,EASGc,KATH,CASSC,KAAK,IAAI;QACdb,OAAO,CAACK,MAAR,CAAef,aAAa,CAACG,wBAA7B,EAAuDoB,KAAvD;QACAT,MAAM,CAACS,KAAD,CAAN;MACH,CAZD;IAcH,CAjBM,CAAP;EAkBH;;AApBW,CAAhB;AAwBA,eACA;EACI3B,KADJ;EAEIW,SAFJ;EAGIE;AAHJ,CADA"},"metadata":{},"sourceType":"module"}