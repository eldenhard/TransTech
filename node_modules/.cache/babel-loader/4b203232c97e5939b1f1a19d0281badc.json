{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from 'vuex';\nimport api from '@/api/report';\nimport Notifications from '@/components/notifications/Notifications.vue';\nimport Loader from '@/components/loader/loader.vue';\nimport MultiSelect from '@/components/ui/MultiSelect.vue';\nimport { getUserById } from '@/helpers/getAllUsers';\nexport default {\n  template: `{{ $route.params.id }}`,\n\n  data() {\n    return {\n      data: {},\n      all_table_data: [],\n      name: '',\n      plan: '',\n      fact: '',\n      deviation: '',\n      comment: '',\n      level: '',\n      updated_at: '',\n      showNotify: false,\n      notifyHead: '',\n      notifyMessage: '',\n      notifyClass: '',\n      loader: false\n    };\n  },\n\n  components: {\n    Notifications,\n    Loader,\n    MultiSelect\n  },\n  computed: { ...mapState({\n      user: state => state.auth.user,\n      uid: state => state.auth.uid,\n      allGroups: state => state.auth.groups,\n      staffGlobal: state => state.auth.users\n    })\n  },\n\n  mounted() {\n    this.loader = true;\n    api.getBDRreportByID(this.$route.params.id).then(response => {\n      this.all_table_data = response.data.bdr_report_rows;\n      this.loader = false;\n      this.all_table_data.forEach(el => {\n        this.data = { ...this.data,\n          [el.id]: el\n        };\n      });\n    });\n  },\n\n  methods: {\n    getName(id) {\n      const user = getUserById(this.staffGlobal, id);\n      return user.first_name;\n    },\n\n    saveBDRchange(index) {\n      this.loader = true;\n      const dateForSave = this.data[index];\n      console.log(dateForSave);\n      api.putBDRreportsave(index, dateForSave).then(response => {\n        this.notifyHead = 'Успешно';\n        this.notifyMessage = 'Данные сохранены';\n        this.notifyClass = 'wrapper-success';\n        this.showNotify = true;\n        setTimeout(this.closeNotification, 1500);\n        this.loader = false;\n      });\n    },\n\n    saveBDRreport() {\n      this.loader = true;\n      let dataForAllSave = [];\n      Object.entries(this.data).forEach(element => {\n        const [key, value] = element;\n        dataForAllSave.push(value);\n      });\n      console.log(dataForAllSave);\n      api.saveBDRreport(this.$route.params.id, dataForAllSave).then(response => {\n        this.notifyHead = 'Успешно';\n        this.notifyMessage = 'Данные Преобразованы в отчет';\n        this.notifyClass = 'wrapper-success';\n        this.showNotify = true;\n        setTimeout(this.closeNotification, 1500);\n        this.loader = false;\n      });\n    },\n\n    closeNotification() {\n      this.showNotify = false;\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA,kCADA;;EAGAC;IACA;MACAA,QADA;MAEAC,kBAFA;MAGAC,QAHA;MAIAC,QAJA;MAKAC,QALA;MAMAC,aANA;MAOAC,WAPA;MAQAC,SARA;MASAC,cATA;MAWAC,iBAXA;MAYAC,cAZA;MAaAC,iBAbA;MAcAC,eAdA;MAgBAC;IAhBA;EAoBA,CAxBA;;EAyBAC;IAAAC;IAAAC;IAAAC;EAAA,CAzBA;EA0BAC,YACA;MACAC,8BADA;MAEAC,4BAFA;MAGAC,qCAHA;MAIAC;IAJA;EADA,CA1BA;;EAkCAC;IACA;IACAC,4CACAC,IADA,CACAC;MACA;MAEA;MAEA;QACA;UAAA;QAAA;MACA,CAFA;IAGA,CATA;EAWA,CA/CA;;EAgDAC;IACAC;MACA;MACA;IACA,CAJA;;IAKAC;MACA;MACA;MACAC;MACAN,yCACAC,IADA,CACAC;QACA;QACA;QACA;QACA;QACAK;QACA;MACA,CARA;IAUA,CAnBA;;IAoBAC;MACA;MACA;MACAC;QACA;QACAC;MACA,CAHA;MAIAJ;MACAN,yDACAC,IADA,CACAC;QACA;QACA;QACA;QACA;QACAK;QACA;MACA,CARA;IASA,CArCA;;IAsCAI;MACA;IACA;;EAxCA;AAhDA","names":["template","data","all_table_data","name","plan","fact","deviation","comment","level","updated_at","showNotify","notifyHead","notifyMessage","notifyClass","loader","components","Notifications","Loader","MultiSelect","computed","user","uid","allGroups","staffGlobal","mounted","api","then","response","methods","getName","saveBDRchange","console","setTimeout","saveBDRreport","Object","dataForAllSave","closeNotification"],"sourceRoot":"src/views","sources":["editBDR.vue"],"sourcesContent":["<template>\r\n   <div>\r\n<h2>БДР отчет</h2>\r\n\r\n<!-- PUT /api/reports/bdr-row/update/365 -->\r\n<br>\r\n<div style=\"width: 95%; overflow-x: auto; height: 80vh; overflow-y: auto; position: relative; left: 50%; transform: translate(-50%,0);\"> \r\n    <table class=\"table\" style=\"table-layout: fixed; z-index: 2;\">\r\n<thead>\r\n     <tr>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Название</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">План</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Ожидаемый факт</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Отклонение</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Комментарии по отклонениям</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Ответственный за статью в целом</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Лицо, которому Ответственный делегировал заполнение</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Заполняет ожидаемый факт</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Дата последнего обновления</th>\r\n          <th style=\" vertical-align: middle !important; table-layout: fixed;\">Действие</th>\r\n     </tr>\r\n</thead>\r\n<tbody >\r\n   <tr v-for=\"(bdr, index) in data\" :key=\"bdr.id\" :class=\"{'l0': bdr.level === 0, 'l1': bdr.level === 1, 'l2': bdr.level === 2}\">  \r\n          <td clas=\"lc groups\">{{bdr.name}}</td>\r\n          <td class=\"td-btr\"><input class=\"input-filter\"  v-model=\"data[index].plan\"></td>\r\n          <td class=\"td-btr\"><input class=\"input-filter\" v-model=\"data[index].fact\"></td>\r\n          <td class=\"td-btr\"><input class=\"input-filter\" v-model=\"data[index].deviation\"></td>\r\n          <td class=\"td-btr\"><input class=\"input-filter\" v-model=\"data[index].comment\"></td>\r\n          <td class=\"td-btr\">\r\n            <span class=\"\" v-for=\"user in data[index].responsible_users\" :key=\"user\">\r\n            {{getName(user)}}</span>  \r\n            <span :selected=\"(data[index].delegated_users)\" :variants=\"staffGlobal\"></span>\r\n\r\n            <MultiSelect :selected=\"data[index].responsible_users\" :variants=\"staffGlobal\"></MultiSelect>\r\n            </td>\r\n\r\n          <td class=\"td-btr\">\r\n            <span class=\"\" v-for=\"user in data[index].delegated_users\" :key=\"user\">\r\n            {{getName(user)}}</span>  \r\n             \r\n             <span :selected=\"(data[index].delegated_users)\" :variants=\"staffGlobal\"></span>\r\n\r\n            <MultiSelect :selected=\"data[index].delegated_users\" :variants=\"staffGlobal\"></MultiSelect>\r\n        </td>\r\n          <td class=\"td-btr\">\r\n            <span class=\"\" v-for=\"user in data[index].filling_users\" :key=\"user\">\r\n            {{getName(user)}}</span>  \r\n            <span :selected=\"(data[index].filling_users)\" :variants=\"staffGlobal\"></span>\r\n             \r\n            <MultiSelect :selected=\"data[index].filling_users\" :variants=\"staffGlobal\"></MultiSelect>\r\n\r\n          </td>\r\n          <!-- <td class=\"td-btr\"><input class=\"input-filter\" v-model=\"data[index].filling_users\"></td> -->\r\n          <td class=\"td-btr\">{{new Date(bdr.updated_at).toLocaleString()}}</td>\r\n          <td class=\"td-btr\"><button class=\"Accept\" style=\"height: 100%\" @click=\"saveBDRchange(index)\">Сохранить</button></td>\r\n\r\n </tr>\r\n\r\n\r\n\r\n</tbody>\r\n  </table>\r\n</div> \r\n<button class=\"Accept\" @click=\"saveBDRreport()\" style=\"width: 95%; margin: 5% 0;  position: relative; left: 50%; transform: translate(-50%,0);\">Сохранить отчет</button>\r\n<Notifications :show=\"showNotify\" :header=\"notifyHead\" :message=\"notifyMessage\" :block-class=\"notifyClass\" id=\"notif\"/>\r\n<Loader :loader=\"loader\"></Loader>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex';\r\nimport api from '@/api/report'\r\nimport Notifications from '@/components/notifications/Notifications.vue';\r\nimport Loader from '@/components/loader/loader.vue'\r\nimport MultiSelect from '@/components/ui/MultiSelect.vue';\r\nimport { getUserById } from '@/helpers/getAllUsers';\r\nexport default {\r\n     template:`{{ $route.params.id }}`,\r\n     \r\n    data(){\r\n        return{\r\n            data : {},\r\n           all_table_data: [],\r\n            name: '',\r\n            plan: '',\r\n            fact: '',\r\n            deviation: '',\r\n            comment: '',\r\n            level: '',\r\n            updated_at: '',\r\n\r\n          showNotify: false,\r\n          notifyHead: '',\r\n          notifyMessage: '',\r\n          notifyClass: '',\r\n\r\n          loader: false,\r\n      \r\n            \r\n        }\r\n    },\r\n    components:{ Notifications, Loader, MultiSelect },\r\n    computed: {\r\n        ...mapState({\r\n            user: state => state.auth.user,\r\n            uid: state => state.auth.uid,\r\n            allGroups: state => state.auth.groups,\r\n            staffGlobal: state => state.auth.users\r\n        })\r\n    },\r\n    mounted(){\r\n     this.loader = true\r\n          api.getBDRreportByID(this.$route.params.id)\r\n          .then(response => {\r\n               this.all_table_data = response.data.bdr_report_rows\r\n            \r\n               this.loader = false\r\n                \r\n                this.all_table_data.forEach(el => {\r\n                    this.data = {...this.data, [el.id]: el}\r\n                })\r\n          })\r\n\r\n    },\r\n    methods:{\r\n        getName(id){\r\n            const user = getUserById(this.staffGlobal, id)\r\n            return user.first_name\r\n        },\r\n     saveBDRchange(index){\r\n        this.loader = true\r\n        const dateForSave = this.data[index]\r\n        console.log(dateForSave)\r\n          api.putBDRreportsave(index,dateForSave)\r\n          .then(response => {\r\n          this.notifyHead = 'Успешно'\r\n          this.notifyMessage = 'Данные сохранены'\r\n          this.notifyClass = 'wrapper-success'\r\n          this.showNotify = true\r\n          setTimeout(this.closeNotification, 1500)\r\n          this.loader = false\r\n          })\r\n\r\n     },\r\n     saveBDRreport(){\r\n        this.loader = true\r\n        let dataForAllSave = []\r\n        Object.entries(this.data).forEach(element => {\r\n            const [key, value] = element\r\n            dataForAllSave.push(value)\r\n        })  \r\n        console.log(dataForAllSave)\r\n        api.saveBDRreport(this.$route.params.id, dataForAllSave)\r\n        .then(response => {\r\n            this.notifyHead = 'Успешно'\r\n          this.notifyMessage = 'Данные Преобразованы в отчет'\r\n          this.notifyClass = 'wrapper-success'\r\n          this.showNotify = true\r\n          setTimeout(this.closeNotification, 1500)\r\n          this.loader = false\r\n        })\r\n     },\r\n     closeNotification(){\r\n            this.showNotify = false\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.lc {\r\n    background: #EBEBEB;\r\n    font-size: normal;\r\n}\r\n.groups {\r\n    text-align: left;\r\n    font-weight: bold;\r\n}\r\n.groups-amount{\r\n    background: #DDEBF7;\r\n    font-size: 14px;\r\n}\r\n.input-filter{\r\n    width: 100% !important;\r\n    height: 100% !important;\r\n    margin: 0 !important;\r\n    border: none;\r\n    text-decoration: none;\r\n    outline: none;\r\n    text-align: center;\r\n    font-size: 13px;\r\n}\r\n.td-btr {\r\n    padding: 0 !important;\r\n    vertical-align: middle !important;\r\n}\r\n.l0{\r\n    font-weight: bold;\r\n    font-size: 15px !important;\r\n\r\n}\r\n.l0 input{\r\n    font-size: 13px !important;\r\n    text-align: center !important;\r\n    background: #DDEBF7 !important;\r\n    \r\n    \r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}